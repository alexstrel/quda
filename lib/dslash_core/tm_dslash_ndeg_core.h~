// *** CUDA DSLASH ***

//Extra constant (double) mu, (double)eta and (double)delta

#define SHARED_FLOATS_PER_THREAD 16

// input spinor
#ifdef SPINOR_DOUBLE
#define spinorFloat double
#define i00_re I0.x
#define i00_im I0.y
#define i01_re I1.x
#define i01_im I1.y
#define i02_re I2.x
#define i02_im I2.y
#define i10_re I3.x
#define i10_im I3.y
#define i11_re I4.x
#define i11_im I4.y
#define i12_re I5.x
#define i12_im I5.y
#define i20_re I6.x
#define i20_im I6.y
#define i21_re I7.x
#define i21_im I7.y
#define i22_re I8.x
#define i22_im I8.y
#define i30_re I9.x
#define i30_im I9.y
#define i31_re I10.x
#define i31_im I10.y
#define i32_re I11.x
#define i32_im I11.y

#else
#define spinorFloat float
#define i00_re I0.x
#define i00_im I0.y
#define i01_re I0.z
#define i01_im I0.w
#define i02_re I1.x
#define i02_im I1.y
#define i10_re I1.z
#define i10_im I1.w
#define i11_re I2.x
#define i11_im I2.y
#define i12_re I2.z
#define i12_im I2.w
#define i20_re I3.x
#define i20_im I3.y
#define i21_re I3.z
#define i21_im I3.w
#define i22_re I4.x
#define i22_im I4.y
#define i30_re I4.z
#define i30_im I4.w
#define i31_re I5.x
#define i31_im I5.y
#define i32_re I5.z
#define i32_im I5.w
#endif // SPINOR_DOUBLE

// gauge link
#ifdef GAUGE_FLOAT2
#define g00_re G0.x
#define g00_im G0.y
#define g01_re G1.x
#define g01_im G1.y
#define g02_re G2.x
#define g02_im G2.y
#define g10_re G3.x
#define g10_im G3.y
#define g11_re G4.x
#define g11_im G4.y
#define g12_re G5.x
#define g12_im G5.y
#define g20_re G6.x
#define g20_im G6.y
#define g21_re G7.x
#define g21_im G7.y
#define g22_re G8.x
#define g22_im G8.y
// temporaries
#define A_re G9.x
#define A_im G9.y

#else
#define g00_re G0.x
#define g00_im G0.y
#define g01_re G0.z
#define g01_im G0.w
#define g02_re G1.x
#define g02_im G1.y
#define g10_re G1.z
#define g10_im G1.w
#define g11_re G2.x
#define g11_im G2.y
#define g12_re G2.z
#define g12_im G2.w
#define g20_re G3.x
#define g20_im G3.y
#define g21_re G3.z
#define g21_im G3.w
#define g22_re G4.x
#define g22_im G4.y
// temporaries
#define A_re G4.z
#define A_im G4.w

#endif // GAUGE_DOUBLE

// conjugated gauge link
#define gT00_re (+g00_re)
#define gT00_im (-g00_im)
#define gT01_re (+g10_re)
#define gT01_im (-g10_im)
#define gT02_re (+g20_re)
#define gT02_im (-g20_im)
#define gT10_re (+g01_re)
#define gT10_im (-g01_im)
#define gT11_re (+g11_re)
#define gT11_im (-g11_im)
#define gT12_re (+g21_re)
#define gT12_im (-g21_im)
#define gT20_re (+g02_re)
#define gT20_im (-g02_im)
#define gT21_re (+g12_re)
#define gT21_im (-g12_im)
#define gT22_re (+g22_re)
#define gT22_im (-g22_im)

// output 1st flavor spinor
#define o1_00_re s[0*SHARED_STRIDE]
#define o1_00_im s[1*SHARED_STRIDE]
#define o1_01_re s[2*SHARED_STRIDE]
#define o1_01_im s[3*SHARED_STRIDE]
#define o1_02_re s[4*SHARED_STRIDE]
#define o1_02_im s[5*SHARED_STRIDE]
#define o1_10_re s[6*SHARED_STRIDE]
#define o1_10_im s[7*SHARED_STRIDE]
#define o1_11_re s[8*SHARED_STRIDE]
#define o1_11_im s[9*SHARED_STRIDE]
#define o1_12_re s[10*SHARED_STRIDE]
#define o1_12_im s[11*SHARED_STRIDE]
#define o1_20_re s[12*SHARED_STRIDE]
#define o1_20_im s[13*SHARED_STRIDE]
#define o1_21_re s[14*SHARED_STRIDE]
#define o1_21_im s[15*SHARED_STRIDE]
volatile spinorFloat o1_22_re;
volatile spinorFloat o1_22_im;
volatile spinorFloat o1_30_re;
volatile spinorFloat o1_30_im;
volatile spinorFloat o1_31_re;
volatile spinorFloat o1_31_im;
volatile spinorFloat o1_32_re;
volatile spinorFloat o1_32_im;

// output 2st flavor spinor
#define o2_00_re s[0*SHARED_STRIDE]
#define o2_00_im s[1*SHARED_STRIDE]
#define o2_01_re s[2*SHARED_STRIDE]
#define o2_01_im s[3*SHARED_STRIDE]
#define o2_02_re s[4*SHARED_STRIDE]
#define o2_02_im s[5*SHARED_STRIDE]
#define o2_10_re s[6*SHARED_STRIDE]
#define o2_10_im s[7*SHARED_STRIDE]
#define o2_11_re s[8*SHARED_STRIDE]
#define o2_11_im s[9*SHARED_STRIDE]
#define o2_12_re s[10*SHARED_STRIDE]
#define o2_12_im s[11*SHARED_STRIDE]
#define o2_20_re s[12*SHARED_STRIDE]
#define o2_20_im s[13*SHARED_STRIDE]
#define o2_21_re s[14*SHARED_STRIDE]
#define o2_21_im s[15*SHARED_STRIDE]
volatile spinorFloat o2_22_re;
volatile spinorFloat o2_22_im;
volatile spinorFloat o2_30_re;
volatile spinorFloat o2_30_im;
volatile spinorFloat o2_31_re;
volatile spinorFloat o2_31_im;
volatile spinorFloat o2_32_re;
volatile spinorFloat o2_32_im;



#include "read_gauge.h"
#include "read_clover.h"
#include "io_spinor.h"

int sid = blockIdx.x*blockDim.x + threadIdx.x;
int z1 = FAST_INT_DIVIDE(sid, X1h);
int x1h = sid - z1*X1h;
int z2 = FAST_INT_DIVIDE(z1, X2);
int x2 = z1 - z2*X2;
int x4 = FAST_INT_DIVIDE(z2, X3);
int x3 = z2 - x4*X3;
int x1odd = (x2 + x3 + x4 + oddBit) & 1;
int x1 = 2*x1h + x1odd;
int X = 2*sid + x1odd;

#ifdef SPINOR_DOUBLE
#if (__CUDA_ARCH__ >= 200)
#define SHARED_STRIDE 16 // to avoid bank conflicts on Fermi
#else
#define SHARED_STRIDE  8 // to avoid bank conflicts on G80 and GT200
#endif
extern __shared__ spinorFloat sd_data[];
volatile spinorFloat *s = sd_data + SHARED_FLOATS_PER_THREAD*SHARED_STRIDE*(threadIdx.x/SHARED_STRIDE)
                                  + (threadIdx.x % SHARED_STRIDE);
#else
#if (__CUDA_ARCH__ >= 200)
#define SHARED_STRIDE 32 // to avoid bank conflicts on Fermi
#else
#define SHARED_STRIDE 16 // to avoid bank conflicts on G80 and GT200
#endif
extern __shared__ spinorFloat ss_data[];
volatile spinorFloat *s = ss_data + SHARED_FLOATS_PER_THREAD*SHARED_STRIDE*(threadIdx.x/SHARED_STRIDE)
                                  + (threadIdx.x % SHARED_STRIDE);
#endif

o1_00_re = o1_00_im = 0;
o1_01_re = o1_01_im = 0;
o1_02_re = o1_02_im = 0;
o1_10_re = o1_10_im = 0;
o1_11_re = o1_11_im = 0;
o1_12_re = o1_12_im = 0;
o1_20_re = o1_20_im = 0;
o1_21_re = o1_21_im = 0;
o1_22_re = o1_22_im = 0;
o1_30_re = o1_30_im = 0;
o1_31_re = o1_31_im = 0;
o1_32_re = o1_32_im = 0;

o2_00_re = o2_00_im = 0;
o2_01_re = o2_01_im = 0;
o2_02_re = o2_02_im = 0;
o2_10_re = o2_10_im = 0;
o2_11_re = o2_11_im = 0;
o2_12_re = o2_12_im = 0;
o2_20_re = o2_20_im = 0;
o2_21_re = o2_21_im = 0;
o2_22_re = o2_22_im = 0;
o2_30_re = o2_30_im = 0;
o2_31_re = o2_31_im = 0;
o2_32_re = o2_32_im = 0;

{
    // Projector P0-
    // 1 0 0 -i 
    // 0 1 -i 0 
    // 0 i 1 0 
    // i 0 0 1 
    
    int sp_idx = ((x1==X1m1) ? X-X1m1 : X+1) >> 1;
    int ga_idx = sid;
    
    // read gauge matrix from device memory
    READ_GAUGE_MATRIX(GAUGE0TEX, 0);
    
    // reconstruct gauge matrix
    RECONSTRUCT_GAUGE_MATRIX(0);
    
    {// read the first flavr spinor from device memory
    	READ_SPINOR(FLAVORSPINORTEX1);
    
    // project spinor into half spinors
    	spinorFloat a0_re = +i00_re+i30_im;
    	spinorFloat a0_im = +i00_im-i30_re;
    	spinorFloat a1_re = +i01_re+i31_im;
    	spinorFloat a1_im = +i01_im-i31_re;
    	spinorFloat a2_re = +i02_re+i32_im;
    	spinorFloat a2_im = +i02_im-i32_re;
    	
    	spinorFloat b0_re = +i10_re+i20_im;
    	spinorFloat b0_im = +i10_im-i20_re;
    	spinorFloat b1_re = +i11_re+i21_im;
    	spinorFloat b1_im = +i11_im-i21_re;
    	spinorFloat b2_re = +i12_re+i22_im;
    	spinorFloat b2_im = +i12_im-i22_re;
    	
    // multiply row 0
    	spinorFloat A0_re = 0;
    	A0_re += g00_re * a0_re;
    	A0_re -= g00_im * a0_im;
    	A0_re += g01_re * a1_re;
    	A0_re -= g01_im * a1_im;
    	A0_re += g02_re * a2_re;
    	A0_re -= g02_im * a2_im;
    	spinorFloat A0_im = 0;
    	A0_im += g00_re * a0_im;
    	A0_im += g00_im * a0_re;
    	A0_im += g01_re * a1_im;
    	A0_im += g01_im * a1_re;
    	A0_im += g02_re * a2_im;
    	A0_im += g02_im * a2_re;
    	spinorFloat B0_re = 0;
    	B0_re += g00_re * b0_re;
    	B0_re -= g00_im * b0_im;
    	B0_re += g01_re * b1_re;
    	B0_re -= g01_im * b1_im;
    	B0_re += g02_re * b2_re;
    	B0_re -= g02_im * b2_im;
    	spinorFloat B0_im = 0;
    	B0_im += g00_re * b0_im;
    	B0_im += g00_im * b0_re;
    	B0_im += g01_re * b1_im;
    	B0_im += g01_im * b1_re;
    	B0_im += g02_re * b2_im;
    	B0_im += g02_im * b2_re;
    	
    	// multiply row 1
    	spinorFloat A1_re = 0;
    	A1_re += g10_re * a0_re;
    	A1_re -= g10_im * a0_im;
    	A1_re += g11_re * a1_re;
    	A1_re -= g11_im * a1_im;
    	A1_re += g12_re * a2_re;
    	A1_re -= g12_im * a2_im;
    	spinorFloat A1_im = 0;
    	A1_im += g10_re * a0_im;
    	A1_im += g10_im * a0_re;
    	A1_im += g11_re * a1_im;
    	A1_im += g11_im * a1_re;
    	A1_im += g12_re * a2_im;
    	A1_im += g12_im * a2_re;
    	spinorFloat B1_re = 0;
    	B1_re += g10_re * b0_re;
    	B1_re -= g10_im * b0_im;
    	B1_re += g11_re * b1_re;
    	B1_re -= g11_im * b1_im;
    	B1_re += g12_re * b2_re;
    	B1_re -= g12_im * b2_im;
    	spinorFloat B1_im = 0;
    	B1_im += g10_re * b0_im;
    	B1_im += g10_im * b0_re;
    	B1_im += g11_re * b1_im;
    	B1_im += g11_im * b1_re;
    	B1_im += g12_re * b2_im;
    	B1_im += g12_im * b2_re;
    	
    	// multiply row 2
    	spinorFloat A2_re = 0;
    	A2_re += g20_re * a0_re;
    	A2_re -= g20_im * a0_im;
    	A2_re += g21_re * a1_re;
    	A2_re -= g21_im * a1_im;
    	A2_re += g22_re * a2_re;
    	A2_re -= g22_im * a2_im;
    	spinorFloat A2_im = 0;
    	A2_im += g20_re * a0_im;
    	A2_im += g20_im * a0_re;
    	A2_im += g21_re * a1_im;
    	A2_im += g21_im * a1_re;
    	A2_im += g22_re * a2_im;
    	A2_im += g22_im * a2_re;
    	spinorFloat B2_re = 0;
    	B2_re += g20_re * b0_re;
    	B2_re -= g20_im * b0_im;
    	B2_re += g21_re * b1_re;
    	B2_re -= g21_im * b1_im;
    	B2_re += g22_re * b2_re;
    	B2_re -= g22_im * b2_im;
    	spinorFloat B2_im = 0;
    	B2_im += g20_re * b0_im;
    	B2_im += g20_im * b0_re;
    	B2_im += g21_re * b1_im;
    	B2_im += g21_im * b1_re;
    	B2_im += g22_re * b2_im;
    	B2_im += g22_im * b2_re;
    	
    #ifndef DSLASH_XPAY
    	o1_00_re += A0_re;
    	o1_00_im += A0_im;
    	o1_10_re += B0_re;
    	o1_10_im += B0_im;
    	o1_20_re -= B0_im;
    	o1_20_im += B0_re;
    	o1_30_re -= A0_im;
    	o1_30_im += A0_re;
    	
    	o1_01_re += A1_re;
    	o1_01_im += A1_im;
    	o1_11_re += B1_re;
    	o1_11_im += B1_im;
    	o1_21_re -= B1_im;
    	o1_21_im += B1_re;
    	o1_31_re -= A1_im;
    	o1_31_im += A1_re;
    	
    	o1_02_re += A2_re;
    	o1_02_im += A2_im;
    	o1_12_re += B2_re;
    	o1_12_im += B2_im;
    	o1_22_re -= B2_im;
    	o1_22_im += B2_re;
    	o1_32_re -= A2_im;
    	o1_32_im += A2_re;
    	
    	
    #else
    	//check this!!!
    	o2_00_re += A0_re;
    	o2_00_im += A0_im;
    	o2_10_re += B0_re;
    	o2_10_im += B0_im;
    	o2_20_re -= B0_im;
    	o2_20_im += B0_re;
    	o2_30_re -= A0_im;
    	o2_30_im += A0_re;
    	
    	o2_01_re += A1_re;
    	o2_01_im += A1_im;
    	o2_11_re += B1_re;
    	o2_11_im += B1_im;
    	o2_21_re -= B1_im;
    	o2_21_im += B1_re;
    	o2_31_re -= A1_im;
    	o2_31_im += A1_re;
    	
    	o2_02_re += A2_re;
    	o2_02_im += A2_im;
    	o2_12_re += B2_re;
    	o2_12_im += B2_im;
    	o2_22_re -= B2_im;
    	o2_22_im += B2_re;
    	o2_32_re -= A2_im;
    	o2_32_im += A2_re;
    	
    // Re-use registers here!
    	A0_re = +i00_re+i20_im*mu;
    	A0_im = +i00_im-i20_re*mu;
    	A1_re = +i01_re+i21_im*mu;
    	A1_im = +i01_im-i21_re*mu;
    	A2_re = +i02_re+i22_im*mu;
    	A2_im = +i02_im-i22_re*mu;
    
    	B0_re = +i10_re+i30_im*mu;
    	B0_im = +i10_im-i30_re*mu;
    	B1_re = +i11_re+i31_im*mu;
    	B1_im = +i11_im-i31_re*mu;
    	B2_re = +i12_re+i32_im*mu;
    	B2_im = +i12_im-i32_re*mu;
    
    	i20_re += (+i00_im*mu);
    	i20_im += (-i00_re*mu);
    	i00_re = A0_re;
    	i00_im = A0_im;
    	i21_re += (+i01_im*mu);
    	i21_im += (-i01_re*mu);
    	i01_re = A1_re;
    	i01_im = A1_im;
    	i22_re += (+i02_im*mu);
    	i22_im += (-i02_re*mu);
    	i02_re = A2_re;
    	i02_im = A2_im;
    
    	i30_re += (+i10_im*mu);
    	i30_im += (-i10_re*mu);
    	i10_re = B0_re;
    	i10_im = B0_im;
    	i31_re += (+i11_im*mu);
    	i31_im += (-i11_re*mu);
    	i11_re = B1_re;
    	i11_im = B1_im;
    	i32_re += (+i12_im*mu);
    	i32_im += (-i12_re*mu);
    	i12_re = B2_re;
    	i12_im = B2_im;
    
    
    // project spinor into half spinors
    	a0_re = +i00_re+i30_im;
    	a0_im = +i00_im-i30_re;
    	a1_re = +i01_re+i31_im;
    	a1_im = +i01_im-i31_re;
    	a2_re = +i02_re+i32_im;
    	a2_im = +i02_im-i32_re;
    	
    	b0_re = +i10_re+i20_im;
    	b0_im = +i10_im-i20_re;
    	b1_re = +i11_re+i21_im;
    	b1_im = +i11_im-i21_re;
    	b2_re = +i12_re+i22_im;
    	b2_im = +i12_im-i22_re;
    	
    // multiply row 0
    	A0_re = 0;
    	A0_re += g00_re * a0_re;
    	A0_re -= g00_im * a0_im;
    	A0_re += g01_re * a1_re;
    	A0_re -= g01_im * a1_im;
    	A0_re += g02_re * a2_re;
    	A0_re -= g02_im * a2_im;
    	A0_im = 0;
    	A0_im += g00_re * a0_im;
    	A0_im += g00_im * a0_re;
    	A0_im += g01_re * a1_im;
    	A0_im += g01_im * a1_re;
    	A0_im += g02_re * a2_im;
    	A0_im += g02_im * a2_re;
    	B0_re = 0;
    	B0_re += g00_re * b0_re;
    	B0_re -= g00_im * b0_im;
    	B0_re += g01_re * b1_re;
    	B0_re -= g01_im * b1_im;
    	B0_re += g02_re * b2_re;
    	B0_re -= g02_im * b2_im;
    	B0_im = 0;
    	B0_im += g00_re * b0_im;
    	B0_im += g00_im * b0_re;
    	B0_im += g01_re * b1_im;
    	B0_im += g01_im * b1_re;
    	B0_im += g02_re * b2_im;
    	B0_im += g02_im * b2_re;
    	
    	// multiply row 1
    	A1_re = 0;
    	A1_re += g10_re * a0_re;
    	A1_re -= g10_im * a0_im;
    	A1_re += g11_re * a1_re;
    	A1_re -= g11_im * a1_im;
    	A1_re += g12_re * a2_re;
    	A1_re -= g12_im * a2_im;
    	A1_im = 0;
    	A1_im += g10_re * a0_im;
    	A1_im += g10_im * a0_re;
    	A1_im += g11_re * a1_im;
    	A1_im += g11_im * a1_re;
    	A1_im += g12_re * a2_im;
    	A1_im += g12_im * a2_re;
    	B1_re = 0;
    	B1_re += g10_re * b0_re;
    	B1_re -= g10_im * b0_im;
    	B1_re += g11_re * b1_re;
    	B1_re -= g11_im * b1_im;
    	B1_re += g12_re * b2_re;
    	B1_re -= g12_im * b2_im;
    	B1_im = 0;
    	B1_im += g10_re * b0_im;
    	B1_im += g10_im * b0_re;
    	B1_im += g11_re * b1_im;
    	B1_im += g11_im * b1_re;
    	B1_im += g12_re * b2_im;
    	B1_im += g12_im * b2_re;
    	
    	// multiply row 2
    	A2_re = 0;
    	A2_re += g20_re * a0_re;
    	A2_re -= g20_im * a0_im;
    	A2_re += g21_re * a1_re;
    	A2_re -= g21_im * a1_im;
    	A2_re += g22_re * a2_re;
    	A2_re -= g22_im * a2_im;
    	A2_im = 0;
    	A2_im += g20_re * a0_im;
    	A2_im += g20_im * a0_re;
    	A2_im += g21_re * a1_im;
    	A2_im += g21_im * a1_re;
    	A2_im += g22_re * a2_im;
    	A2_im += g22_im * a2_re;
    	B2_re = 0;
    	B2_re += g20_re * b0_re;
    	B2_re -= g20_im * b0_im;
    	B2_re += g21_re * b1_re;
    	B2_re -= g21_im * b1_im;
    	B2_re += g22_re * b2_re;
    	B2_re -= g22_im * b2_im;
    	B2_im = 0;
    	B2_im += g20_re * b0_im;
    	B2_im += g20_im * b0_re;
    	B2_im += g21_re * b1_im;
    	B2_im += g21_im * b1_re;
    	B2_im += g22_re * b2_im;
    	B2_im += g22_im * b2_re;
    	
    //Store the data:
    	o1_00_re += A0_re;
    	o1_00_im += A0_im;
    	o1_10_re += B0_re;
    	o1_10_im += B0_im;
    	o1_20_re -= B0_im;
    	o1_20_im += B0_re;
    	o1_30_re -= A0_im;
    	o1_30_im += A0_re;
    	
    	o1_01_re += A1_re;
    	o1_01_im += A1_im;
    	o1_11_re += B1_re;
    	o1_11_im += B1_im;
    	o1_21_re -= B1_im;
    	o1_21_im += B1_re;
    	o1_31_re -= A1_im;
    	o1_31_im += A1_re;
    	
    	o1_02_re += A2_re;
    	o1_02_im += A2_im;
    	o1_12_re += B2_re;
    	o1_12_im += B2_im;
    	o1_22_re -= B2_im;
    	o1_22_im += B2_re;
    	o1_32_re -= A2_im;
    	o1_32_im += A2_re;
    	
    	
    #endif
    }
    {// read the second flavorr spinor from device memory
    	READ_SPINOR(FLAVORSPINORTEX2);
    
    // project spinor into half spinors
    	spinorFloat a0_re = +i00_re+i30_im;
    	spinorFloat a0_im = +i00_im-i30_re;
    	spinorFloat a1_re = +i01_re+i31_im;
    	spinorFloat a1_im = +i01_im-i31_re;
    	spinorFloat a2_re = +i02_re+i32_im;
    	spinorFloat a2_im = +i02_im-i32_re;
    	
    	spinorFloat b0_re = +i10_re+i20_im;
    	spinorFloat b0_im = +i10_im-i20_re;
    	spinorFloat b1_re = +i11_re+i21_im;
    	spinorFloat b1_im = +i11_im-i21_re;
    	spinorFloat b2_re = +i12_re+i22_im;
    	spinorFloat b2_im = +i12_im-i22_re;
    	
    // multiply row 0
    	spinorFloat A0_re = 0;
    	A0_re += g00_re * a0_re;
    	A0_re -= g00_im * a0_im;
    	A0_re += g01_re * a1_re;
    	A0_re -= g01_im * a1_im;
    	A0_re += g02_re * a2_re;
    	A0_re -= g02_im * a2_im;
    	spinorFloat A0_im = 0;
    	A0_im += g00_re * a0_im;
    	A0_im += g00_im * a0_re;
    	A0_im += g01_re * a1_im;
    	A0_im += g01_im * a1_re;
    	A0_im += g02_re * a2_im;
    	A0_im += g02_im * a2_re;
    	spinorFloat B0_re = 0;
    	B0_re += g00_re * b0_re;
    	B0_re -= g00_im * b0_im;
    	B0_re += g01_re * b1_re;
    	B0_re -= g01_im * b1_im;
    	B0_re += g02_re * b2_re;
    	B0_re -= g02_im * b2_im;
    	spinorFloat B0_im = 0;
    	B0_im += g00_re * b0_im;
    	B0_im += g00_im * b0_re;
    	B0_im += g01_re * b1_im;
    	B0_im += g01_im * b1_re;
    	B0_im += g02_re * b2_im;
    	B0_im += g02_im * b2_re;
    	
    	// multiply row 1
    	spinorFloat A1_re = 0;
    	A1_re += g10_re * a0_re;
    	A1_re -= g10_im * a0_im;
    	A1_re += g11_re * a1_re;
    	A1_re -= g11_im * a1_im;
    	A1_re += g12_re * a2_re;
    	A1_re -= g12_im * a2_im;
    	spinorFloat A1_im = 0;
    	A1_im += g10_re * a0_im;
    	A1_im += g10_im * a0_re;
    	A1_im += g11_re * a1_im;
    	A1_im += g11_im * a1_re;
    	A1_im += g12_re * a2_im;
    	A1_im += g12_im * a2_re;
    	spinorFloat B1_re = 0;
    	B1_re += g10_re * b0_re;
    	B1_re -= g10_im * b0_im;
    	B1_re += g11_re * b1_re;
    	B1_re -= g11_im * b1_im;
    	B1_re += g12_re * b2_re;
    	B1_re -= g12_im * b2_im;
    	spinorFloat B1_im = 0;
    	B1_im += g10_re * b0_im;
    	B1_im += g10_im * b0_re;
    	B1_im += g11_re * b1_im;
    	B1_im += g11_im * b1_re;
    	B1_im += g12_re * b2_im;
    	B1_im += g12_im * b2_re;
    	
    	// multiply row 2
    	spinorFloat A2_re = 0;
    	A2_re += g20_re * a0_re;
    	A2_re -= g20_im * a0_im;
    	A2_re += g21_re * a1_re;
    	A2_re -= g21_im * a1_im;
    	A2_re += g22_re * a2_re;
    	A2_re -= g22_im * a2_im;
    	spinorFloat A2_im = 0;
    	A2_im += g20_re * a0_im;
    	A2_im += g20_im * a0_re;
    	A2_im += g21_re * a1_im;
    	A2_im += g21_im * a1_re;
    	A2_im += g22_re * a2_im;
    	A2_im += g22_im * a2_re;
    	spinorFloat B2_re = 0;
    	B2_re += g20_re * b0_re;
    	B2_re -= g20_im * b0_im;
    	B2_re += g21_re * b1_re;
    	B2_re -= g21_im * b1_im;
    	B2_re += g22_re * b2_re;
    	B2_re -= g22_im * b2_im;
    	spinorFloat B2_im = 0;
    	B2_im += g20_re * b0_im;
    	B2_im += g20_im * b0_re;
    	B2_im += g21_re * b1_im;
    	B2_im += g21_im * b1_re;
    	B2_im += g22_re * b2_im;
    	B2_im += g22_im * b2_re;
    	
    #ifndef DSLASH_XPAY
    	o2_00_re += A0_re;
    	o2_00_im += A0_im;
    	o2_10_re += B0_re;
    	o2_10_im += B0_im;
    	o2_20_re -= B0_im;
    	o2_20_im += B0_re;
    	o2_30_re -= A0_im;
    	o2_30_im += A0_re;
    	
    	o2_01_re += A1_re;
    	o2_01_im += A1_im;
    	o2_11_re += B1_re;
    	o2_11_im += B1_im;
    	o2_21_re -= B1_im;
    	o2_21_im += B1_re;
    	o2_31_re -= A1_im;
    	o2_31_im += A1_re;
    	
    	o2_02_re += A2_re;
    	o2_02_im += A2_im;
    	o2_12_re += B2_re;
    	o2_12_im += B2_im;
    	o2_22_re -= B2_im;
    	o2_22_im += B2_re;
    	o2_32_re -= A2_im;
    	o2_32_im += A2_re;
    	
    	
    #else
    	//(check this!!!)
    	o1_00_re += A0_re;
    	o1_00_im += A0_im;
    	o1_10_re += B0_re;
    	o1_10_im += B0_im;
    	o1_20_re -= B0_im;
    	o1_20_im += B0_re;
    	o1_30_re -= A0_im;
    	o1_30_im += A0_re;
    	
    	o1_01_re += A1_re;
    	o1_01_im += A1_im;
    	o1_11_re += B1_re;
    	o1_11_im += B1_im;
    	o1_21_re -= B1_im;
    	o1_21_im += B1_re;
    	o1_31_re -= A1_im;
    	o1_31_im += A1_re;
    	
    	o1_02_re += A2_re;
    	o1_02_im += A2_im;
    	o1_12_re += B2_re;
    	o1_12_im += B2_im;
    	o1_22_re -= B2_im;
    	o1_22_im += B2_re;
    	o1_32_re -= A2_im;
    	o1_32_im += A2_re;
    	
    // Re-use registers here!
    	A0_re = +i00_re-i20_im*mu;
    	A0_im = +i00_im+i20_re*mu;
    	A1_re = +i01_re-i21_im*mu;
    	A1_im = +i01_im+i21_re*mu;
    	A2_re = +i02_re-i22_im*mu;
    	A2_im = +i02_im+i22_re*mu;
    
    	B0_re = +i10_re-i30_im*mu;
    	B0_im = +i10_im+i30_re*mu;
    	B1_re = +i11_re-i31_im*mu;
    	B1_im = +i11_im+i31_re*mu;
    	B2_re = +i12_re-i32_im*mu;
    	B2_im = +i12_im+i32_re*mu;
    
    	i20_re += (-i00_im*mu);
    	i20_im += (+i00_re*mu);
    	i00_re = A0_re;
    	i00_im = A0_im;
    	i21_re += (-i01_im*mu);
    	i21_im += (+i01_re*mu);
    	i01_re = A1_re;
    	i01_im = A1_im;
    	i22_re += (-i02_im*mu);
    	i22_im += (+i02_re*mu);
    	i02_re = A2_re;
    	i02_im = A2_im;
    
    	i30_re += (-i10_im*mu);
    	i30_im += (+i10_re*mu);
    	i10_re = B0_re;
    	i10_im = B0_im;
    	i31_re += (-i11_im*mu);
    	i31_im += (+i11_re*mu);
    	i11_re = B1_re;
    	i11_im = B1_im;
    	i32_re += (-i12_im*mu);
    	i32_im += (+i12_re*mu);
    	i12_re = B2_re;
    	i12_im = B2_im;
    
    
    // project spinor into half spinors
    	a0_re = +i00_re+i30_im;
    	a0_im = +i00_im-i30_re;
    	a1_re = +i01_re+i31_im;
    	a1_im = +i01_im-i31_re;
    	a2_re = +i02_re+i32_im;
    	a2_im = +i02_im-i32_re;
    	
    	b0_re = +i10_re+i20_im;
    	b0_im = +i10_im-i20_re;
    	b1_re = +i11_re+i21_im;
    	b1_im = +i11_im-i21_re;
    	b2_re = +i12_re+i22_im;
    	b2_im = +i12_im-i22_re;
    	
    // multiply row 0
    	A0_re = 0;
    	A0_re += g00_re * a0_re;
    	A0_re -= g00_im * a0_im;
    	A0_re += g01_re * a1_re;
    	A0_re -= g01_im * a1_im;
    	A0_re += g02_re * a2_re;
    	A0_re -= g02_im * a2_im;
    	A0_im = 0;
    	A0_im += g00_re * a0_im;
    	A0_im += g00_im * a0_re;
    	A0_im += g01_re * a1_im;
    	A0_im += g01_im * a1_re;
    	A0_im += g02_re * a2_im;
    	A0_im += g02_im * a2_re;
    	B0_re = 0;
    	B0_re += g00_re * b0_re;
    	B0_re -= g00_im * b0_im;
    	B0_re += g01_re * b1_re;
    	B0_re -= g01_im * b1_im;
    	B0_re += g02_re * b2_re;
    	B0_re -= g02_im * b2_im;
    	B0_im = 0;
    	B0_im += g00_re * b0_im;
    	B0_im += g00_im * b0_re;
    	B0_im += g01_re * b1_im;
    	B0_im += g01_im * b1_re;
    	B0_im += g02_re * b2_im;
    	B0_im += g02_im * b2_re;
    	
    	// multiply row 1
    	A1_re = 0;
    	A1_re += g10_re * a0_re;
    	A1_re -= g10_im * a0_im;
    	A1_re += g11_re * a1_re;
    	A1_re -= g11_im * a1_im;
    	A1_re += g12_re * a2_re;
    	A1_re -= g12_im * a2_im;
    	A1_im = 0;
    	A1_im += g10_re * a0_im;
    	A1_im += g10_im * a0_re;
    	A1_im += g11_re * a1_im;
    	A1_im += g11_im * a1_re;
    	A1_im += g12_re * a2_im;
    	A1_im += g12_im * a2_re;
    	B1_re = 0;
    	B1_re += g10_re * b0_re;
    	B1_re -= g10_im * b0_im;
    	B1_re += g11_re * b1_re;
    	B1_re -= g11_im * b1_im;
    	B1_re += g12_re * b2_re;
    	B1_re -= g12_im * b2_im;
    	B1_im = 0;
    	B1_im += g10_re * b0_im;
    	B1_im += g10_im * b0_re;
    	B1_im += g11_re * b1_im;
    	B1_im += g11_im * b1_re;
    	B1_im += g12_re * b2_im;
    	B1_im += g12_im * b2_re;
    	
    	// multiply row 2
    	A2_re = 0;
    	A2_re += g20_re * a0_re;
    	A2_re -= g20_im * a0_im;
    	A2_re += g21_re * a1_re;
    	A2_re -= g21_im * a1_im;
    	A2_re += g22_re * a2_re;
    	A2_re -= g22_im * a2_im;
    	A2_im = 0;
    	A2_im += g20_re * a0_im;
    	A2_im += g20_im * a0_re;
    	A2_im += g21_re * a1_im;
    	A2_im += g21_im * a1_re;
    	A2_im += g22_re * a2_im;
    	A2_im += g22_im * a2_re;
    	B2_re = 0;
    	B2_re += g20_re * b0_re;
    	B2_re -= g20_im * b0_im;
    	B2_re += g21_re * b1_re;
    	B2_re -= g21_im * b1_im;
    	B2_re += g22_re * b2_re;
    	B2_re -= g22_im * b2_im;
    	B2_im = 0;
    	B2_im += g20_re * b0_im;
    	B2_im += g20_im * b0_re;
    	B2_im += g21_re * b1_im;
    	B2_im += g21_im * b1_re;
    	B2_im += g22_re * b2_im;
    	B2_im += g22_im * b2_re;
    	
    //Store the data:
    	o2_00_re += A0_re;
    	o2_00_im += A0_im;
    	o2_10_re += B0_re;
    	o2_10_im += B0_im;
    	o2_20_re -= B0_im;
    	o2_20_im += B0_re;
    	o2_30_re -= A0_im;
    	o2_30_im += A0_re;
    	
    	o2_01_re += A1_re;
    	o2_01_im += A1_im;
    	o2_11_re += B1_re;
    	o2_11_im += B1_im;
    	o2_21_re -= B1_im;
    	o2_21_im += B1_re;
    	o2_31_re -= A1_im;
    	o2_31_im += A1_re;
    	
    	o2_02_re += A2_re;
    	o2_02_im += A2_im;
    	o2_12_re += B2_re;
    	o2_12_im += B2_im;
    	o2_22_re -= B2_im;
    	o2_22_im += B2_re;
    	o2_32_re -= A2_im;
    	o2_32_im += A2_re;
    	
    	
    #endif
    }
}

{
    // Projector P0+
    // 1 0 0 i 
    // 0 1 i 0 
    // 0 -i 1 0 
    // -i 0 0 1 
    
    int sp_idx = ((x1==0)    ? X+X1m1 : X-1) >> 1;
    int ga_idx = sp_idx;
    
    // read gauge matrix from device memory
    READ_GAUGE_MATRIX(GAUGE1TEX, 1);
    
    // reconstruct gauge matrix
    RECONSTRUCT_GAUGE_MATRIX(1);
    
    {// read the first flavr spinor from device memory
    	READ_SPINOR(FLAVORSPINORTEX1);
    
    // project spinor into half spinors
    	spinorFloat a0_re = +i00_re-i30_im;
    	spinorFloat a0_im = +i00_im+i30_re;
    	spinorFloat a1_re = +i01_re-i31_im;
    	spinorFloat a1_im = +i01_im+i31_re;
    	spinorFloat a2_re = +i02_re-i32_im;
    	spinorFloat a2_im = +i02_im+i32_re;
    	
    	spinorFloat b0_re = +i10_re-i20_im;
    	spinorFloat b0_im = +i10_im+i20_re;
    	spinorFloat b1_re = +i11_re-i21_im;
    	spinorFloat b1_im = +i11_im+i21_re;
    	spinorFloat b2_re = +i12_re-i22_im;
    	spinorFloat b2_im = +i12_im+i22_re;
    	
    // multiply row 0
    	spinorFloat A0_re = 0;
    	A0_re += gT00_re * a0_re;
    	A0_re -= gT00_im * a0_im;
    	A0_re += gT01_re * a1_re;
    	A0_re -= gT01_im * a1_im;
    	A0_re += gT02_re * a2_re;
    	A0_re -= gT02_im * a2_im;
    	spinorFloat A0_im = 0;
    	A0_im += gT00_re * a0_im;
    	A0_im += gT00_im * a0_re;
    	A0_im += gT01_re * a1_im;
    	A0_im += gT01_im * a1_re;
    	A0_im += gT02_re * a2_im;
    	A0_im += gT02_im * a2_re;
    	spinorFloat B0_re = 0;
    	B0_re += gT00_re * b0_re;
    	B0_re -= gT00_im * b0_im;
    	B0_re += gT01_re * b1_re;
    	B0_re -= gT01_im * b1_im;
    	B0_re += gT02_re * b2_re;
    	B0_re -= gT02_im * b2_im;
    	spinorFloat B0_im = 0;
    	B0_im += gT00_re * b0_im;
    	B0_im += gT00_im * b0_re;
    	B0_im += gT01_re * b1_im;
    	B0_im += gT01_im * b1_re;
    	B0_im += gT02_re * b2_im;
    	B0_im += gT02_im * b2_re;
    	
    	// multiply row 1
    	spinorFloat A1_re = 0;
    	A1_re += gT10_re * a0_re;
    	A1_re -= gT10_im * a0_im;
    	A1_re += gT11_re * a1_re;
    	A1_re -= gT11_im * a1_im;
    	A1_re += gT12_re * a2_re;
    	A1_re -= gT12_im * a2_im;
    	spinorFloat A1_im = 0;
    	A1_im += gT10_re * a0_im;
    	A1_im += gT10_im * a0_re;
    	A1_im += gT11_re * a1_im;
    	A1_im += gT11_im * a1_re;
    	A1_im += gT12_re * a2_im;
    	A1_im += gT12_im * a2_re;
    	spinorFloat B1_re = 0;
    	B1_re += gT10_re * b0_re;
    	B1_re -= gT10_im * b0_im;
    	B1_re += gT11_re * b1_re;
    	B1_re -= gT11_im * b1_im;
    	B1_re += gT12_re * b2_re;
    	B1_re -= gT12_im * b2_im;
    	spinorFloat B1_im = 0;
    	B1_im += gT10_re * b0_im;
    	B1_im += gT10_im * b0_re;
    	B1_im += gT11_re * b1_im;
    	B1_im += gT11_im * b1_re;
    	B1_im += gT12_re * b2_im;
    	B1_im += gT12_im * b2_re;
    	
    	// multiply row 2
    	spinorFloat A2_re = 0;
    	A2_re += gT20_re * a0_re;
    	A2_re -= gT20_im * a0_im;
    	A2_re += gT21_re * a1_re;
    	A2_re -= gT21_im * a1_im;
    	A2_re += gT22_re * a2_re;
    	A2_re -= gT22_im * a2_im;
    	spinorFloat A2_im = 0;
    	A2_im += gT20_re * a0_im;
    	A2_im += gT20_im * a0_re;
    	A2_im += gT21_re * a1_im;
    	A2_im += gT21_im * a1_re;
    	A2_im += gT22_re * a2_im;
    	A2_im += gT22_im * a2_re;
    	spinorFloat B2_re = 0;
    	B2_re += gT20_re * b0_re;
    	B2_re -= gT20_im * b0_im;
    	B2_re += gT21_re * b1_re;
    	B2_re -= gT21_im * b1_im;
    	B2_re += gT22_re * b2_re;
    	B2_re -= gT22_im * b2_im;
    	spinorFloat B2_im = 0;
    	B2_im += gT20_re * b0_im;
    	B2_im += gT20_im * b0_re;
    	B2_im += gT21_re * b1_im;
    	B2_im += gT21_im * b1_re;
    	B2_im += gT22_re * b2_im;
    	B2_im += gT22_im * b2_re;
    	
    #ifndef DSLASH_XPAY
    	o1_00_re += A0_re;
    	o1_00_im += A0_im;
    	o1_10_re += B0_re;
    	o1_10_im += B0_im;
    	o1_20_re += B0_im;
    	o1_20_im -= B0_re;
    	o1_30_re += A0_im;
    	o1_30_im -= A0_re;
    	
    	o1_01_re += A1_re;
    	o1_01_im += A1_im;
    	o1_11_re += B1_re;
    	o1_11_im += B1_im;
    	o1_21_re += B1_im;
    	o1_21_im -= B1_re;
    	o1_31_re += A1_im;
    	o1_31_im -= A1_re;
    	
    	o1_02_re += A2_re;
    	o1_02_im += A2_im;
    	o1_12_re += B2_re;
    	o1_12_im += B2_im;
    	o1_22_re += B2_im;
    	o1_22_im -= B2_re;
    	o1_32_re += A2_im;
    	o1_32_im -= A2_re;
    	
    	
    #else
    	//check this!!!
    	o2_00_re += A0_re;
    	o2_00_im += A0_im;
    	o2_10_re += B0_re;
    	o2_10_im += B0_im;
    	o2_20_re += B0_im;
    	o2_20_im -= B0_re;
    	o2_30_re += A0_im;
    	o2_30_im -= A0_re;
    	
    	o2_01_re += A1_re;
    	o2_01_im += A1_im;
    	o2_11_re += B1_re;
    	o2_11_im += B1_im;
    	o2_21_re += B1_im;
    	o2_21_im -= B1_re;
    	o2_31_re += A1_im;
    	o2_31_im -= A1_re;
    	
    	o2_02_re += A2_re;
    	o2_02_im += A2_im;
    	o2_12_re += B2_re;
    	o2_12_im += B2_im;
    	o2_22_re += B2_im;
    	o2_22_im -= B2_re;
    	o2_32_re += A2_im;
    	o2_32_im -= A2_re;
    	
    // Re-use registers here!
    	A0_re = +i00_re+i20_im*mu;
    	A0_im = +i00_im-i20_re*mu;
    	A1_re = +i01_re+i21_im*mu;
    	A1_im = +i01_im-i21_re*mu;
    	A2_re = +i02_re+i22_im*mu;
    	A2_im = +i02_im-i22_re*mu;
    
    	B0_re = +i10_re+i30_im*mu;
    	B0_im = +i10_im-i30_re*mu;
    	B1_re = +i11_re+i31_im*mu;
    	B1_im = +i11_im-i31_re*mu;
    	B2_re = +i12_re+i32_im*mu;
    	B2_im = +i12_im-i32_re*mu;
    
    	i20_re += (+i00_im*mu);
    	i20_im += (-i00_re*mu);
    	i00_re = A0_re;
    	i00_im = A0_im;
    	i21_re += (+i01_im*mu);
    	i21_im += (-i01_re*mu);
    	i01_re = A1_re;
    	i01_im = A1_im;
    	i22_re += (+i02_im*mu);
    	i22_im += (-i02_re*mu);
    	i02_re = A2_re;
    	i02_im = A2_im;
    
    	i30_re += (+i10_im*mu);
    	i30_im += (-i10_re*mu);
    	i10_re = B0_re;
    	i10_im = B0_im;
    	i31_re += (+i11_im*mu);
    	i31_im += (-i11_re*mu);
    	i11_re = B1_re;
    	i11_im = B1_im;
    	i32_re += (+i12_im*mu);
    	i32_im += (-i12_re*mu);
    	i12_re = B2_re;
    	i12_im = B2_im;
    
    
    // project spinor into half spinors
    	a0_re = +i00_re-i30_im;
    	a0_im = +i00_im+i30_re;
    	a1_re = +i01_re-i31_im;
    	a1_im = +i01_im+i31_re;
    	a2_re = +i02_re-i32_im;
    	a2_im = +i02_im+i32_re;
    	
    	b0_re = +i10_re-i20_im;
    	b0_im = +i10_im+i20_re;
    	b1_re = +i11_re-i21_im;
    	b1_im = +i11_im+i21_re;
    	b2_re = +i12_re-i22_im;
    	b2_im = +i12_im+i22_re;
    	
    // multiply row 0
    	A0_re = 0;
    	A0_re += gT00_re * a0_re;
    	A0_re -= gT00_im * a0_im;
    	A0_re += gT01_re * a1_re;
    	A0_re -= gT01_im * a1_im;
    	A0_re += gT02_re * a2_re;
    	A0_re -= gT02_im * a2_im;
    	A0_im = 0;
    	A0_im += gT00_re * a0_im;
    	A0_im += gT00_im * a0_re;
    	A0_im += gT01_re * a1_im;
    	A0_im += gT01_im * a1_re;
    	A0_im += gT02_re * a2_im;
    	A0_im += gT02_im * a2_re;
    	B0_re = 0;
    	B0_re += gT00_re * b0_re;
    	B0_re -= gT00_im * b0_im;
    	B0_re += gT01_re * b1_re;
    	B0_re -= gT01_im * b1_im;
    	B0_re += gT02_re * b2_re;
    	B0_re -= gT02_im * b2_im;
    	B0_im = 0;
    	B0_im += gT00_re * b0_im;
    	B0_im += gT00_im * b0_re;
    	B0_im += gT01_re * b1_im;
    	B0_im += gT01_im * b1_re;
    	B0_im += gT02_re * b2_im;
    	B0_im += gT02_im * b2_re;
    	
    	// multiply row 1
    	A1_re = 0;
    	A1_re += gT10_re * a0_re;
    	A1_re -= gT10_im * a0_im;
    	A1_re += gT11_re * a1_re;
    	A1_re -= gT11_im * a1_im;
    	A1_re += gT12_re * a2_re;
    	A1_re -= gT12_im * a2_im;
    	A1_im = 0;
    	A1_im += gT10_re * a0_im;
    	A1_im += gT10_im * a0_re;
    	A1_im += gT11_re * a1_im;
    	A1_im += gT11_im * a1_re;
    	A1_im += gT12_re * a2_im;
    	A1_im += gT12_im * a2_re;
    	B1_re = 0;
    	B1_re += gT10_re * b0_re;
    	B1_re -= gT10_im * b0_im;
    	B1_re += gT11_re * b1_re;
    	B1_re -= gT11_im * b1_im;
    	B1_re += gT12_re * b2_re;
    	B1_re -= gT12_im * b2_im;
    	B1_im = 0;
    	B1_im += gT10_re * b0_im;
    	B1_im += gT10_im * b0_re;
    	B1_im += gT11_re * b1_im;
    	B1_im += gT11_im * b1_re;
    	B1_im += gT12_re * b2_im;
    	B1_im += gT12_im * b2_re;
    	
    	// multiply row 2
    	A2_re = 0;
    	A2_re += gT20_re * a0_re;
    	A2_re -= gT20_im * a0_im;
    	A2_re += gT21_re * a1_re;
    	A2_re -= gT21_im * a1_im;
    	A2_re += gT22_re * a2_re;
    	A2_re -= gT22_im * a2_im;
    	A2_im = 0;
    	A2_im += gT20_re * a0_im;
    	A2_im += gT20_im * a0_re;
    	A2_im += gT21_re * a1_im;
    	A2_im += gT21_im * a1_re;
    	A2_im += gT22_re * a2_im;
    	A2_im += gT22_im * a2_re;
    	B2_re = 0;
    	B2_re += gT20_re * b0_re;
    	B2_re -= gT20_im * b0_im;
    	B2_re += gT21_re * b1_re;
    	B2_re -= gT21_im * b1_im;
    	B2_re += gT22_re * b2_re;
    	B2_re -= gT22_im * b2_im;
    	B2_im = 0;
    	B2_im += gT20_re * b0_im;
    	B2_im += gT20_im * b0_re;
    	B2_im += gT21_re * b1_im;
    	B2_im += gT21_im * b1_re;
    	B2_im += gT22_re * b2_im;
    	B2_im += gT22_im * b2_re;
    	
    //Store the data:
    	o1_00_re += A0_re;
    	o1_00_im += A0_im;
    	o1_10_re += B0_re;
    	o1_10_im += B0_im;
    	o1_20_re += B0_im;
    	o1_20_im -= B0_re;
    	o1_30_re += A0_im;
    	o1_30_im -= A0_re;
    	
    	o1_01_re += A1_re;
    	o1_01_im += A1_im;
    	o1_11_re += B1_re;
    	o1_11_im += B1_im;
    	o1_21_re += B1_im;
    	o1_21_im -= B1_re;
    	o1_31_re += A1_im;
    	o1_31_im -= A1_re;
    	
    	o1_02_re += A2_re;
    	o1_02_im += A2_im;
    	o1_12_re += B2_re;
    	o1_12_im += B2_im;
    	o1_22_re += B2_im;
    	o1_22_im -= B2_re;
    	o1_32_re += A2_im;
    	o1_32_im -= A2_re;
    	
    	
    #endif
    }
    {// read the second flavorr spinor from device memory
    	READ_SPINOR(FLAVORSPINORTEX2);
    
    // project spinor into half spinors
    	spinorFloat a0_re = +i00_re-i30_im;
    	spinorFloat a0_im = +i00_im+i30_re;
    	spinorFloat a1_re = +i01_re-i31_im;
    	spinorFloat a1_im = +i01_im+i31_re;
    	spinorFloat a2_re = +i02_re-i32_im;
    	spinorFloat a2_im = +i02_im+i32_re;
    	
    	spinorFloat b0_re = +i10_re-i20_im;
    	spinorFloat b0_im = +i10_im+i20_re;
    	spinorFloat b1_re = +i11_re-i21_im;
    	spinorFloat b1_im = +i11_im+i21_re;
    	spinorFloat b2_re = +i12_re-i22_im;
    	spinorFloat b2_im = +i12_im+i22_re;
    	
    // multiply row 0
    	spinorFloat A0_re = 0;
    	A0_re += gT00_re * a0_re;
    	A0_re -= gT00_im * a0_im;
    	A0_re += gT01_re * a1_re;
    	A0_re -= gT01_im * a1_im;
    	A0_re += gT02_re * a2_re;
    	A0_re -= gT02_im * a2_im;
    	spinorFloat A0_im = 0;
    	A0_im += gT00_re * a0_im;
    	A0_im += gT00_im * a0_re;
    	A0_im += gT01_re * a1_im;
    	A0_im += gT01_im * a1_re;
    	A0_im += gT02_re * a2_im;
    	A0_im += gT02_im * a2_re;
    	spinorFloat B0_re = 0;
    	B0_re += gT00_re * b0_re;
    	B0_re -= gT00_im * b0_im;
    	B0_re += gT01_re * b1_re;
    	B0_re -= gT01_im * b1_im;
    	B0_re += gT02_re * b2_re;
    	B0_re -= gT02_im * b2_im;
    	spinorFloat B0_im = 0;
    	B0_im += gT00_re * b0_im;
    	B0_im += gT00_im * b0_re;
    	B0_im += gT01_re * b1_im;
    	B0_im += gT01_im * b1_re;
    	B0_im += gT02_re * b2_im;
    	B0_im += gT02_im * b2_re;
    	
    	// multiply row 1
    	spinorFloat A1_re = 0;
    	A1_re += gT10_re * a0_re;
    	A1_re -= gT10_im * a0_im;
    	A1_re += gT11_re * a1_re;
    	A1_re -= gT11_im * a1_im;
    	A1_re += gT12_re * a2_re;
    	A1_re -= gT12_im * a2_im;
    	spinorFloat A1_im = 0;
    	A1_im += gT10_re * a0_im;
    	A1_im += gT10_im * a0_re;
    	A1_im += gT11_re * a1_im;
    	A1_im += gT11_im * a1_re;
    	A1_im += gT12_re * a2_im;
    	A1_im += gT12_im * a2_re;
    	spinorFloat B1_re = 0;
    	B1_re += gT10_re * b0_re;
    	B1_re -= gT10_im * b0_im;
    	B1_re += gT11_re * b1_re;
    	B1_re -= gT11_im * b1_im;
    	B1_re += gT12_re * b2_re;
    	B1_re -= gT12_im * b2_im;
    	spinorFloat B1_im = 0;
    	B1_im += gT10_re * b0_im;
    	B1_im += gT10_im * b0_re;
    	B1_im += gT11_re * b1_im;
    	B1_im += gT11_im * b1_re;
    	B1_im += gT12_re * b2_im;
    	B1_im += gT12_im * b2_re;
    	
    	// multiply row 2
    	spinorFloat A2_re = 0;
    	A2_re += gT20_re * a0_re;
    	A2_re -= gT20_im * a0_im;
    	A2_re += gT21_re * a1_re;
    	A2_re -= gT21_im * a1_im;
    	A2_re += gT22_re * a2_re;
    	A2_re -= gT22_im * a2_im;
    	spinorFloat A2_im = 0;
    	A2_im += gT20_re * a0_im;
    	A2_im += gT20_im * a0_re;
    	A2_im += gT21_re * a1_im;
    	A2_im += gT21_im * a1_re;
    	A2_im += gT22_re * a2_im;
    	A2_im += gT22_im * a2_re;
    	spinorFloat B2_re = 0;
    	B2_re += gT20_re * b0_re;
    	B2_re -= gT20_im * b0_im;
    	B2_re += gT21_re * b1_re;
    	B2_re -= gT21_im * b1_im;
    	B2_re += gT22_re * b2_re;
    	B2_re -= gT22_im * b2_im;
    	spinorFloat B2_im = 0;
    	B2_im += gT20_re * b0_im;
    	B2_im += gT20_im * b0_re;
    	B2_im += gT21_re * b1_im;
    	B2_im += gT21_im * b1_re;
    	B2_im += gT22_re * b2_im;
    	B2_im += gT22_im * b2_re;
    	
    #ifndef DSLASH_XPAY
    	o2_00_re += A0_re;
    	o2_00_im += A0_im;
    	o2_10_re += B0_re;
    	o2_10_im += B0_im;
    	o2_20_re += B0_im;
    	o2_20_im -= B0_re;
    	o2_30_re += A0_im;
    	o2_30_im -= A0_re;
    	
    	o2_01_re += A1_re;
    	o2_01_im += A1_im;
    	o2_11_re += B1_re;
    	o2_11_im += B1_im;
    	o2_21_re += B1_im;
    	o2_21_im -= B1_re;
    	o2_31_re += A1_im;
    	o2_31_im -= A1_re;
    	
    	o2_02_re += A2_re;
    	o2_02_im += A2_im;
    	o2_12_re += B2_re;
    	o2_12_im += B2_im;
    	o2_22_re += B2_im;
    	o2_22_im -= B2_re;
    	o2_32_re += A2_im;
    	o2_32_im -= A2_re;
    	
    	
    #else
    	//(check this!!!)
    	o1_00_re += A0_re;
    	o1_00_im += A0_im;
    	o1_10_re += B0_re;
    	o1_10_im += B0_im;
    	o1_20_re += B0_im;
    	o1_20_im -= B0_re;
    	o1_30_re += A0_im;
    	o1_30_im -= A0_re;
    	
    	o1_01_re += A1_re;
    	o1_01_im += A1_im;
    	o1_11_re += B1_re;
    	o1_11_im += B1_im;
    	o1_21_re += B1_im;
    	o1_21_im -= B1_re;
    	o1_31_re += A1_im;
    	o1_31_im -= A1_re;
    	
    	o1_02_re += A2_re;
    	o1_02_im += A2_im;
    	o1_12_re += B2_re;
    	o1_12_im += B2_im;
    	o1_22_re += B2_im;
    	o1_22_im -= B2_re;
    	o1_32_re += A2_im;
    	o1_32_im -= A2_re;
    	
    // Re-use registers here!
    	A0_re = +i00_re-i20_im*mu;
    	A0_im = +i00_im+i20_re*mu;
    	A1_re = +i01_re-i21_im*mu;
    	A1_im = +i01_im+i21_re*mu;
    	A2_re = +i02_re-i22_im*mu;
    	A2_im = +i02_im+i22_re*mu;
    
    	B0_re = +i10_re-i30_im*mu;
    	B0_im = +i10_im+i30_re*mu;
    	B1_re = +i11_re-i31_im*mu;
    	B1_im = +i11_im+i31_re*mu;
    	B2_re = +i12_re-i32_im*mu;
    	B2_im = +i12_im+i32_re*mu;
    
    	i20_re += (-i00_im*mu);
    	i20_im += (+i00_re*mu);
    	i00_re = A0_re;
    	i00_im = A0_im;
    	i21_re += (-i01_im*mu);
    	i21_im += (+i01_re*mu);
    	i01_re = A1_re;
    	i01_im = A1_im;
    	i22_re += (-i02_im*mu);
    	i22_im += (+i02_re*mu);
    	i02_re = A2_re;
    	i02_im = A2_im;
    
    	i30_re += (-i10_im*mu);
    	i30_im += (+i10_re*mu);
    	i10_re = B0_re;
    	i10_im = B0_im;
    	i31_re += (-i11_im*mu);
    	i31_im += (+i11_re*mu);
    	i11_re = B1_re;
    	i11_im = B1_im;
    	i32_re += (-i12_im*mu);
    	i32_im += (+i12_re*mu);
    	i12_re = B2_re;
    	i12_im = B2_im;
    
    
    // project spinor into half spinors
    	a0_re = +i00_re-i30_im;
    	a0_im = +i00_im+i30_re;
    	a1_re = +i01_re-i31_im;
    	a1_im = +i01_im+i31_re;
    	a2_re = +i02_re-i32_im;
    	a2_im = +i02_im+i32_re;
    	
    	b0_re = +i10_re-i20_im;
    	b0_im = +i10_im+i20_re;
    	b1_re = +i11_re-i21_im;
    	b1_im = +i11_im+i21_re;
    	b2_re = +i12_re-i22_im;
    	b2_im = +i12_im+i22_re;
    	
    // multiply row 0
    	A0_re = 0;
    	A0_re += gT00_re * a0_re;
    	A0_re -= gT00_im * a0_im;
    	A0_re += gT01_re * a1_re;
    	A0_re -= gT01_im * a1_im;
    	A0_re += gT02_re * a2_re;
    	A0_re -= gT02_im * a2_im;
    	A0_im = 0;
    	A0_im += gT00_re * a0_im;
    	A0_im += gT00_im * a0_re;
    	A0_im += gT01_re * a1_im;
    	A0_im += gT01_im * a1_re;
    	A0_im += gT02_re * a2_im;
    	A0_im += gT02_im * a2_re;
    	B0_re = 0;
    	B0_re += gT00_re * b0_re;
    	B0_re -= gT00_im * b0_im;
    	B0_re += gT01_re * b1_re;
    	B0_re -= gT01_im * b1_im;
    	B0_re += gT02_re * b2_re;
    	B0_re -= gT02_im * b2_im;
    	B0_im = 0;
    	B0_im += gT00_re * b0_im;
    	B0_im += gT00_im * b0_re;
    	B0_im += gT01_re * b1_im;
    	B0_im += gT01_im * b1_re;
    	B0_im += gT02_re * b2_im;
    	B0_im += gT02_im * b2_re;
    	
    	// multiply row 1
    	A1_re = 0;
    	A1_re += gT10_re * a0_re;
    	A1_re -= gT10_im * a0_im;
    	A1_re += gT11_re * a1_re;
    	A1_re -= gT11_im * a1_im;
    	A1_re += gT12_re * a2_re;
    	A1_re -= gT12_im * a2_im;
    	A1_im = 0;
    	A1_im += gT10_re * a0_im;
    	A1_im += gT10_im * a0_re;
    	A1_im += gT11_re * a1_im;
    	A1_im += gT11_im * a1_re;
    	A1_im += gT12_re * a2_im;
    	A1_im += gT12_im * a2_re;
    	B1_re = 0;
    	B1_re += gT10_re * b0_re;
    	B1_re -= gT10_im * b0_im;
    	B1_re += gT11_re * b1_re;
    	B1_re -= gT11_im * b1_im;
    	B1_re += gT12_re * b2_re;
    	B1_re -= gT12_im * b2_im;
    	B1_im = 0;
    	B1_im += gT10_re * b0_im;
    	B1_im += gT10_im * b0_re;
    	B1_im += gT11_re * b1_im;
    	B1_im += gT11_im * b1_re;
    	B1_im += gT12_re * b2_im;
    	B1_im += gT12_im * b2_re;
    	
    	// multiply row 2
    	A2_re = 0;
    	A2_re += gT20_re * a0_re;
    	A2_re -= gT20_im * a0_im;
    	A2_re += gT21_re * a1_re;
    	A2_re -= gT21_im * a1_im;
    	A2_re += gT22_re * a2_re;
    	A2_re -= gT22_im * a2_im;
    	A2_im = 0;
    	A2_im += gT20_re * a0_im;
    	A2_im += gT20_im * a0_re;
    	A2_im += gT21_re * a1_im;
    	A2_im += gT21_im * a1_re;
    	A2_im += gT22_re * a2_im;
    	A2_im += gT22_im * a2_re;
    	B2_re = 0;
    	B2_re += gT20_re * b0_re;
    	B2_re -= gT20_im * b0_im;
    	B2_re += gT21_re * b1_re;
    	B2_re -= gT21_im * b1_im;
    	B2_re += gT22_re * b2_re;
    	B2_re -= gT22_im * b2_im;
    	B2_im = 0;
    	B2_im += gT20_re * b0_im;
    	B2_im += gT20_im * b0_re;
    	B2_im += gT21_re * b1_im;
    	B2_im += gT21_im * b1_re;
    	B2_im += gT22_re * b2_im;
    	B2_im += gT22_im * b2_re;
    	
    //Store the data:
    	o2_00_re += A0_re;
    	o2_00_im += A0_im;
    	o2_10_re += B0_re;
    	o2_10_im += B0_im;
    	o2_20_re += B0_im;
    	o2_20_im -= B0_re;
    	o2_30_re += A0_im;
    	o2_30_im -= A0_re;
    	
    	o2_01_re += A1_re;
    	o2_01_im += A1_im;
    	o2_11_re += B1_re;
    	o2_11_im += B1_im;
    	o2_21_re += B1_im;
    	o2_21_im -= B1_re;
    	o2_31_re += A1_im;
    	o2_31_im -= A1_re;
    	
    	o2_02_re += A2_re;
    	o2_02_im += A2_im;
    	o2_12_re += B2_re;
    	o2_12_im += B2_im;
    	o2_22_re += B2_im;
    	o2_22_im -= B2_re;
    	o2_32_re += A2_im;
    	o2_32_im -= A2_re;
    	
    	
    #endif
    }
}

{
    // Projector P1-
    // 1 0 0 -1 
    // 0 1 1 0 
    // 0 1 1 0 
    // -1 0 0 1 
    
    int sp_idx = ((x2==X2m1) ? X-X2X1mX1 : X+X1) >> 1;
    int ga_idx = sid;
    
    // read gauge matrix from device memory
    READ_GAUGE_MATRIX(GAUGE0TEX, 2);
    
    // reconstruct gauge matrix
    RECONSTRUCT_GAUGE_MATRIX(2);
    
    {// read the first flavr spinor from device memory
    	READ_SPINOR(FLAVORSPINORTEX1);
    
    // project spinor into half spinors
    	spinorFloat a0_re = +i00_re-i30_re;
    	spinorFloat a0_im = +i00_im-i30_im;
    	spinorFloat a1_re = +i01_re-i31_re;
    	spinorFloat a1_im = +i01_im-i31_im;
    	spinorFloat a2_re = +i02_re-i32_re;
    	spinorFloat a2_im = +i02_im-i32_im;
    	
    	spinorFloat b0_re = +i10_re+i20_re;
    	spinorFloat b0_im = +i10_im+i20_im;
    	spinorFloat b1_re = +i11_re+i21_re;
    	spinorFloat b1_im = +i11_im+i21_im;
    	spinorFloat b2_re = +i12_re+i22_re;
    	spinorFloat b2_im = +i12_im+i22_im;
    	
    // multiply row 0
    	spinorFloat A0_re = 0;
    	A0_re += g00_re * a0_re;
    	A0_re -= g00_im * a0_im;
    	A0_re += g01_re * a1_re;
    	A0_re -= g01_im * a1_im;
    	A0_re += g02_re * a2_re;
    	A0_re -= g02_im * a2_im;
    	spinorFloat A0_im = 0;
    	A0_im += g00_re * a0_im;
    	A0_im += g00_im * a0_re;
    	A0_im += g01_re * a1_im;
    	A0_im += g01_im * a1_re;
    	A0_im += g02_re * a2_im;
    	A0_im += g02_im * a2_re;
    	spinorFloat B0_re = 0;
    	B0_re += g00_re * b0_re;
    	B0_re -= g00_im * b0_im;
    	B0_re += g01_re * b1_re;
    	B0_re -= g01_im * b1_im;
    	B0_re += g02_re * b2_re;
    	B0_re -= g02_im * b2_im;
    	spinorFloat B0_im = 0;
    	B0_im += g00_re * b0_im;
    	B0_im += g00_im * b0_re;
    	B0_im += g01_re * b1_im;
    	B0_im += g01_im * b1_re;
    	B0_im += g02_re * b2_im;
    	B0_im += g02_im * b2_re;
    	
    	// multiply row 1
    	spinorFloat A1_re = 0;
    	A1_re += g10_re * a0_re;
    	A1_re -= g10_im * a0_im;
    	A1_re += g11_re * a1_re;
    	A1_re -= g11_im * a1_im;
    	A1_re += g12_re * a2_re;
    	A1_re -= g12_im * a2_im;
    	spinorFloat A1_im = 0;
    	A1_im += g10_re * a0_im;
    	A1_im += g10_im * a0_re;
    	A1_im += g11_re * a1_im;
    	A1_im += g11_im * a1_re;
    	A1_im += g12_re * a2_im;
    	A1_im += g12_im * a2_re;
    	spinorFloat B1_re = 0;
    	B1_re += g10_re * b0_re;
    	B1_re -= g10_im * b0_im;
    	B1_re += g11_re * b1_re;
    	B1_re -= g11_im * b1_im;
    	B1_re += g12_re * b2_re;
    	B1_re -= g12_im * b2_im;
    	spinorFloat B1_im = 0;
    	B1_im += g10_re * b0_im;
    	B1_im += g10_im * b0_re;
    	B1_im += g11_re * b1_im;
    	B1_im += g11_im * b1_re;
    	B1_im += g12_re * b2_im;
    	B1_im += g12_im * b2_re;
    	
    	// multiply row 2
    	spinorFloat A2_re = 0;
    	A2_re += g20_re * a0_re;
    	A2_re -= g20_im * a0_im;
    	A2_re += g21_re * a1_re;
    	A2_re -= g21_im * a1_im;
    	A2_re += g22_re * a2_re;
    	A2_re -= g22_im * a2_im;
    	spinorFloat A2_im = 0;
    	A2_im += g20_re * a0_im;
    	A2_im += g20_im * a0_re;
    	A2_im += g21_re * a1_im;
    	A2_im += g21_im * a1_re;
    	A2_im += g22_re * a2_im;
    	A2_im += g22_im * a2_re;
    	spinorFloat B2_re = 0;
    	B2_re += g20_re * b0_re;
    	B2_re -= g20_im * b0_im;
    	B2_re += g21_re * b1_re;
    	B2_re -= g21_im * b1_im;
    	B2_re += g22_re * b2_re;
    	B2_re -= g22_im * b2_im;
    	spinorFloat B2_im = 0;
    	B2_im += g20_re * b0_im;
    	B2_im += g20_im * b0_re;
    	B2_im += g21_re * b1_im;
    	B2_im += g21_im * b1_re;
    	B2_im += g22_re * b2_im;
    	B2_im += g22_im * b2_re;
    	
    #ifndef DSLASH_XPAY
    	o1_00_re += A0_re;
    	o1_00_im += A0_im;
    	o1_10_re += B0_re;
    	o1_10_im += B0_im;
    	o1_20_re += B0_re;
    	o1_20_im += B0_im;
    	o1_30_re -= A0_re;
    	o1_30_im -= A0_im;
    	
    	o1_01_re += A1_re;
    	o1_01_im += A1_im;
    	o1_11_re += B1_re;
    	o1_11_im += B1_im;
    	o1_21_re += B1_re;
    	o1_21_im += B1_im;
    	o1_31_re -= A1_re;
    	o1_31_im -= A1_im;
    	
    	o1_02_re += A2_re;
    	o1_02_im += A2_im;
    	o1_12_re += B2_re;
    	o1_12_im += B2_im;
    	o1_22_re += B2_re;
    	o1_22_im += B2_im;
    	o1_32_re -= A2_re;
    	o1_32_im -= A2_im;
    	
    	
    #else
    	//check this!!!
    	o2_00_re += A0_re;
    	o2_00_im += A0_im;
    	o2_10_re += B0_re;
    	o2_10_im += B0_im;
    	o2_20_re += B0_re;
    	o2_20_im += B0_im;
    	o2_30_re -= A0_re;
    	o2_30_im -= A0_im;
    	
    	o2_01_re += A1_re;
    	o2_01_im += A1_im;
    	o2_11_re += B1_re;
    	o2_11_im += B1_im;
    	o2_21_re += B1_re;
    	o2_21_im += B1_im;
    	o2_31_re -= A1_re;
    	o2_31_im -= A1_im;
    	
    	o2_02_re += A2_re;
    	o2_02_im += A2_im;
    	o2_12_re += B2_re;
    	o2_12_im += B2_im;
    	o2_22_re += B2_re;
    	o2_22_im += B2_im;
    	o2_32_re -= A2_re;
    	o2_32_im -= A2_im;
    	
    // Re-use registers here!
    	A0_re = +i00_re+i20_im*mu;
    	A0_im = +i00_im-i20_re*mu;
    	A1_re = +i01_re+i21_im*mu;
    	A1_im = +i01_im-i21_re*mu;
    	A2_re = +i02_re+i22_im*mu;
    	A2_im = +i02_im-i22_re*mu;
    
    	B0_re = +i10_re+i30_im*mu;
    	B0_im = +i10_im-i30_re*mu;
    	B1_re = +i11_re+i31_im*mu;
    	B1_im = +i11_im-i31_re*mu;
    	B2_re = +i12_re+i32_im*mu;
    	B2_im = +i12_im-i32_re*mu;
    
    	i20_re += (+i00_im*mu);
    	i20_im += (-i00_re*mu);
    	i00_re = A0_re;
    	i00_im = A0_im;
    	i21_re += (+i01_im*mu);
    	i21_im += (-i01_re*mu);
    	i01_re = A1_re;
    	i01_im = A1_im;
    	i22_re += (+i02_im*mu);
    	i22_im += (-i02_re*mu);
    	i02_re = A2_re;
    	i02_im = A2_im;
    
    	i30_re += (+i10_im*mu);
    	i30_im += (-i10_re*mu);
    	i10_re = B0_re;
    	i10_im = B0_im;
    	i31_re += (+i11_im*mu);
    	i31_im += (-i11_re*mu);
    	i11_re = B1_re;
    	i11_im = B1_im;
    	i32_re += (+i12_im*mu);
    	i32_im += (-i12_re*mu);
    	i12_re = B2_re;
    	i12_im = B2_im;
    
    
    // project spinor into half spinors
    	a0_re = +i00_re-i30_re;
    	a0_im = +i00_im-i30_im;
    	a1_re = +i01_re-i31_re;
    	a1_im = +i01_im-i31_im;
    	a2_re = +i02_re-i32_re;
    	a2_im = +i02_im-i32_im;
    	
    	b0_re = +i10_re+i20_re;
    	b0_im = +i10_im+i20_im;
    	b1_re = +i11_re+i21_re;
    	b1_im = +i11_im+i21_im;
    	b2_re = +i12_re+i22_re;
    	b2_im = +i12_im+i22_im;
    	
    // multiply row 0
    	A0_re = 0;
    	A0_re += g00_re * a0_re;
    	A0_re -= g00_im * a0_im;
    	A0_re += g01_re * a1_re;
    	A0_re -= g01_im * a1_im;
    	A0_re += g02_re * a2_re;
    	A0_re -= g02_im * a2_im;
    	A0_im = 0;
    	A0_im += g00_re * a0_im;
    	A0_im += g00_im * a0_re;
    	A0_im += g01_re * a1_im;
    	A0_im += g01_im * a1_re;
    	A0_im += g02_re * a2_im;
    	A0_im += g02_im * a2_re;
    	B0_re = 0;
    	B0_re += g00_re * b0_re;
    	B0_re -= g00_im * b0_im;
    	B0_re += g01_re * b1_re;
    	B0_re -= g01_im * b1_im;
    	B0_re += g02_re * b2_re;
    	B0_re -= g02_im * b2_im;
    	B0_im = 0;
    	B0_im += g00_re * b0_im;
    	B0_im += g00_im * b0_re;
    	B0_im += g01_re * b1_im;
    	B0_im += g01_im * b1_re;
    	B0_im += g02_re * b2_im;
    	B0_im += g02_im * b2_re;
    	
    	// multiply row 1
    	A1_re = 0;
    	A1_re += g10_re * a0_re;
    	A1_re -= g10_im * a0_im;
    	A1_re += g11_re * a1_re;
    	A1_re -= g11_im * a1_im;
    	A1_re += g12_re * a2_re;
    	A1_re -= g12_im * a2_im;
    	A1_im = 0;
    	A1_im += g10_re * a0_im;
    	A1_im += g10_im * a0_re;
    	A1_im += g11_re * a1_im;
    	A1_im += g11_im * a1_re;
    	A1_im += g12_re * a2_im;
    	A1_im += g12_im * a2_re;
    	B1_re = 0;
    	B1_re += g10_re * b0_re;
    	B1_re -= g10_im * b0_im;
    	B1_re += g11_re * b1_re;
    	B1_re -= g11_im * b1_im;
    	B1_re += g12_re * b2_re;
    	B1_re -= g12_im * b2_im;
    	B1_im = 0;
    	B1_im += g10_re * b0_im;
    	B1_im += g10_im * b0_re;
    	B1_im += g11_re * b1_im;
    	B1_im += g11_im * b1_re;
    	B1_im += g12_re * b2_im;
    	B1_im += g12_im * b2_re;
    	
    	// multiply row 2
    	A2_re = 0;
    	A2_re += g20_re * a0_re;
    	A2_re -= g20_im * a0_im;
    	A2_re += g21_re * a1_re;
    	A2_re -= g21_im * a1_im;
    	A2_re += g22_re * a2_re;
    	A2_re -= g22_im * a2_im;
    	A2_im = 0;
    	A2_im += g20_re * a0_im;
    	A2_im += g20_im * a0_re;
    	A2_im += g21_re * a1_im;
    	A2_im += g21_im * a1_re;
    	A2_im += g22_re * a2_im;
    	A2_im += g22_im * a2_re;
    	B2_re = 0;
    	B2_re += g20_re * b0_re;
    	B2_re -= g20_im * b0_im;
    	B2_re += g21_re * b1_re;
    	B2_re -= g21_im * b1_im;
    	B2_re += g22_re * b2_re;
    	B2_re -= g22_im * b2_im;
    	B2_im = 0;
    	B2_im += g20_re * b0_im;
    	B2_im += g20_im * b0_re;
    	B2_im += g21_re * b1_im;
    	B2_im += g21_im * b1_re;
    	B2_im += g22_re * b2_im;
    	B2_im += g22_im * b2_re;
    	
    //Store the data:
    	o1_00_re += A0_re;
    	o1_00_im += A0_im;
    	o1_10_re += B0_re;
    	o1_10_im += B0_im;
    	o1_20_re += B0_re;
    	o1_20_im += B0_im;
    	o1_30_re -= A0_re;
    	o1_30_im -= A0_im;
    	
    	o1_01_re += A1_re;
    	o1_01_im += A1_im;
    	o1_11_re += B1_re;
    	o1_11_im += B1_im;
    	o1_21_re += B1_re;
    	o1_21_im += B1_im;
    	o1_31_re -= A1_re;
    	o1_31_im -= A1_im;
    	
    	o1_02_re += A2_re;
    	o1_02_im += A2_im;
    	o1_12_re += B2_re;
    	o1_12_im += B2_im;
    	o1_22_re += B2_re;
    	o1_22_im += B2_im;
    	o1_32_re -= A2_re;
    	o1_32_im -= A2_im;
    	
    	
    #endif
    }
    {// read the second flavorr spinor from device memory
    	READ_SPINOR(FLAVORSPINORTEX2);
    
    // project spinor into half spinors
    	spinorFloat a0_re = +i00_re-i30_re;
    	spinorFloat a0_im = +i00_im-i30_im;
    	spinorFloat a1_re = +i01_re-i31_re;
    	spinorFloat a1_im = +i01_im-i31_im;
    	spinorFloat a2_re = +i02_re-i32_re;
    	spinorFloat a2_im = +i02_im-i32_im;
    	
    	spinorFloat b0_re = +i10_re+i20_re;
    	spinorFloat b0_im = +i10_im+i20_im;
    	spinorFloat b1_re = +i11_re+i21_re;
    	spinorFloat b1_im = +i11_im+i21_im;
    	spinorFloat b2_re = +i12_re+i22_re;
    	spinorFloat b2_im = +i12_im+i22_im;
    	
    // multiply row 0
    	spinorFloat A0_re = 0;
    	A0_re += g00_re * a0_re;
    	A0_re -= g00_im * a0_im;
    	A0_re += g01_re * a1_re;
    	A0_re -= g01_im * a1_im;
    	A0_re += g02_re * a2_re;
    	A0_re -= g02_im * a2_im;
    	spinorFloat A0_im = 0;
    	A0_im += g00_re * a0_im;
    	A0_im += g00_im * a0_re;
    	A0_im += g01_re * a1_im;
    	A0_im += g01_im * a1_re;
    	A0_im += g02_re * a2_im;
    	A0_im += g02_im * a2_re;
    	spinorFloat B0_re = 0;
    	B0_re += g00_re * b0_re;
    	B0_re -= g00_im * b0_im;
    	B0_re += g01_re * b1_re;
    	B0_re -= g01_im * b1_im;
    	B0_re += g02_re * b2_re;
    	B0_re -= g02_im * b2_im;
    	spinorFloat B0_im = 0;
    	B0_im += g00_re * b0_im;
    	B0_im += g00_im * b0_re;
    	B0_im += g01_re * b1_im;
    	B0_im += g01_im * b1_re;
    	B0_im += g02_re * b2_im;
    	B0_im += g02_im * b2_re;
    	
    	// multiply row 1
    	spinorFloat A1_re = 0;
    	A1_re += g10_re * a0_re;
    	A1_re -= g10_im * a0_im;
    	A1_re += g11_re * a1_re;
    	A1_re -= g11_im * a1_im;
    	A1_re += g12_re * a2_re;
    	A1_re -= g12_im * a2_im;
    	spinorFloat A1_im = 0;
    	A1_im += g10_re * a0_im;
    	A1_im += g10_im * a0_re;
    	A1_im += g11_re * a1_im;
    	A1_im += g11_im * a1_re;
    	A1_im += g12_re * a2_im;
    	A1_im += g12_im * a2_re;
    	spinorFloat B1_re = 0;
    	B1_re += g10_re * b0_re;
    	B1_re -= g10_im * b0_im;
    	B1_re += g11_re * b1_re;
    	B1_re -= g11_im * b1_im;
    	B1_re += g12_re * b2_re;
    	B1_re -= g12_im * b2_im;
    	spinorFloat B1_im = 0;
    	B1_im += g10_re * b0_im;
    	B1_im += g10_im * b0_re;
    	B1_im += g11_re * b1_im;
    	B1_im += g11_im * b1_re;
    	B1_im += g12_re * b2_im;
    	B1_im += g12_im * b2_re;
    	
    	// multiply row 2
    	spinorFloat A2_re = 0;
    	A2_re += g20_re * a0_re;
    	A2_re -= g20_im * a0_im;
    	A2_re += g21_re * a1_re;
    	A2_re -= g21_im * a1_im;
    	A2_re += g22_re * a2_re;
    	A2_re -= g22_im * a2_im;
    	spinorFloat A2_im = 0;
    	A2_im += g20_re * a0_im;
    	A2_im += g20_im * a0_re;
    	A2_im += g21_re * a1_im;
    	A2_im += g21_im * a1_re;
    	A2_im += g22_re * a2_im;
    	A2_im += g22_im * a2_re;
    	spinorFloat B2_re = 0;
    	B2_re += g20_re * b0_re;
    	B2_re -= g20_im * b0_im;
    	B2_re += g21_re * b1_re;
    	B2_re -= g21_im * b1_im;
    	B2_re += g22_re * b2_re;
    	B2_re -= g22_im * b2_im;
    	spinorFloat B2_im = 0;
    	B2_im += g20_re * b0_im;
    	B2_im += g20_im * b0_re;
    	B2_im += g21_re * b1_im;
    	B2_im += g21_im * b1_re;
    	B2_im += g22_re * b2_im;
    	B2_im += g22_im * b2_re;
    	
    #ifndef DSLASH_XPAY
    	o2_00_re += A0_re;
    	o2_00_im += A0_im;
    	o2_10_re += B0_re;
    	o2_10_im += B0_im;
    	o2_20_re += B0_re;
    	o2_20_im += B0_im;
    	o2_30_re -= A0_re;
    	o2_30_im -= A0_im;
    	
    	o2_01_re += A1_re;
    	o2_01_im += A1_im;
    	o2_11_re += B1_re;
    	o2_11_im += B1_im;
    	o2_21_re += B1_re;
    	o2_21_im += B1_im;
    	o2_31_re -= A1_re;
    	o2_31_im -= A1_im;
    	
    	o2_02_re += A2_re;
    	o2_02_im += A2_im;
    	o2_12_re += B2_re;
    	o2_12_im += B2_im;
    	o2_22_re += B2_re;
    	o2_22_im += B2_im;
    	o2_32_re -= A2_re;
    	o2_32_im -= A2_im;
    	
    	
    #else
    	//(check this!!!)
    	o1_00_re += A0_re;
    	o1_00_im += A0_im;
    	o1_10_re += B0_re;
    	o1_10_im += B0_im;
    	o1_20_re += B0_re;
    	o1_20_im += B0_im;
    	o1_30_re -= A0_re;
    	o1_30_im -= A0_im;
    	
    	o1_01_re += A1_re;
    	o1_01_im += A1_im;
    	o1_11_re += B1_re;
    	o1_11_im += B1_im;
    	o1_21_re += B1_re;
    	o1_21_im += B1_im;
    	o1_31_re -= A1_re;
    	o1_31_im -= A1_im;
    	
    	o1_02_re += A2_re;
    	o1_02_im += A2_im;
    	o1_12_re += B2_re;
    	o1_12_im += B2_im;
    	o1_22_re += B2_re;
    	o1_22_im += B2_im;
    	o1_32_re -= A2_re;
    	o1_32_im -= A2_im;
    	
    // Re-use registers here!
    	A0_re = +i00_re-i20_im*mu;
    	A0_im = +i00_im+i20_re*mu;
    	A1_re = +i01_re-i21_im*mu;
    	A1_im = +i01_im+i21_re*mu;
    	A2_re = +i02_re-i22_im*mu;
    	A2_im = +i02_im+i22_re*mu;
    
    	B0_re = +i10_re-i30_im*mu;
    	B0_im = +i10_im+i30_re*mu;
    	B1_re = +i11_re-i31_im*mu;
    	B1_im = +i11_im+i31_re*mu;
    	B2_re = +i12_re-i32_im*mu;
    	B2_im = +i12_im+i32_re*mu;
    
    	i20_re += (-i00_im*mu);
    	i20_im += (+i00_re*mu);
    	i00_re = A0_re;
    	i00_im = A0_im;
    	i21_re += (-i01_im*mu);
    	i21_im += (+i01_re*mu);
    	i01_re = A1_re;
    	i01_im = A1_im;
    	i22_re += (-i02_im*mu);
    	i22_im += (+i02_re*mu);
    	i02_re = A2_re;
    	i02_im = A2_im;
    
    	i30_re += (-i10_im*mu);
    	i30_im += (+i10_re*mu);
    	i10_re = B0_re;
    	i10_im = B0_im;
    	i31_re += (-i11_im*mu);
    	i31_im += (+i11_re*mu);
    	i11_re = B1_re;
    	i11_im = B1_im;
    	i32_re += (-i12_im*mu);
    	i32_im += (+i12_re*mu);
    	i12_re = B2_re;
    	i12_im = B2_im;
    
    
    // project spinor into half spinors
    	a0_re = +i00_re-i30_re;
    	a0_im = +i00_im-i30_im;
    	a1_re = +i01_re-i31_re;
    	a1_im = +i01_im-i31_im;
    	a2_re = +i02_re-i32_re;
    	a2_im = +i02_im-i32_im;
    	
    	b0_re = +i10_re+i20_re;
    	b0_im = +i10_im+i20_im;
    	b1_re = +i11_re+i21_re;
    	b1_im = +i11_im+i21_im;
    	b2_re = +i12_re+i22_re;
    	b2_im = +i12_im+i22_im;
    	
    // multiply row 0
    	A0_re = 0;
    	A0_re += g00_re * a0_re;
    	A0_re -= g00_im * a0_im;
    	A0_re += g01_re * a1_re;
    	A0_re -= g01_im * a1_im;
    	A0_re += g02_re * a2_re;
    	A0_re -= g02_im * a2_im;
    	A0_im = 0;
    	A0_im += g00_re * a0_im;
    	A0_im += g00_im * a0_re;
    	A0_im += g01_re * a1_im;
    	A0_im += g01_im * a1_re;
    	A0_im += g02_re * a2_im;
    	A0_im += g02_im * a2_re;
    	B0_re = 0;
    	B0_re += g00_re * b0_re;
    	B0_re -= g00_im * b0_im;
    	B0_re += g01_re * b1_re;
    	B0_re -= g01_im * b1_im;
    	B0_re += g02_re * b2_re;
    	B0_re -= g02_im * b2_im;
    	B0_im = 0;
    	B0_im += g00_re * b0_im;
    	B0_im += g00_im * b0_re;
    	B0_im += g01_re * b1_im;
    	B0_im += g01_im * b1_re;
    	B0_im += g02_re * b2_im;
    	B0_im += g02_im * b2_re;
    	
    	// multiply row 1
    	A1_re = 0;
    	A1_re += g10_re * a0_re;
    	A1_re -= g10_im * a0_im;
    	A1_re += g11_re * a1_re;
    	A1_re -= g11_im * a1_im;
    	A1_re += g12_re * a2_re;
    	A1_re -= g12_im * a2_im;
    	A1_im = 0;
    	A1_im += g10_re * a0_im;
    	A1_im += g10_im * a0_re;
    	A1_im += g11_re * a1_im;
    	A1_im += g11_im * a1_re;
    	A1_im += g12_re * a2_im;
    	A1_im += g12_im * a2_re;
    	B1_re = 0;
    	B1_re += g10_re * b0_re;
    	B1_re -= g10_im * b0_im;
    	B1_re += g11_re * b1_re;
    	B1_re -= g11_im * b1_im;
    	B1_re += g12_re * b2_re;
    	B1_re -= g12_im * b2_im;
    	B1_im = 0;
    	B1_im += g10_re * b0_im;
    	B1_im += g10_im * b0_re;
    	B1_im += g11_re * b1_im;
    	B1_im += g11_im * b1_re;
    	B1_im += g12_re * b2_im;
    	B1_im += g12_im * b2_re;
    	
    	// multiply row 2
    	A2_re = 0;
    	A2_re += g20_re * a0_re;
    	A2_re -= g20_im * a0_im;
    	A2_re += g21_re * a1_re;
    	A2_re -= g21_im * a1_im;
    	A2_re += g22_re * a2_re;
    	A2_re -= g22_im * a2_im;
    	A2_im = 0;
    	A2_im += g20_re * a0_im;
    	A2_im += g20_im * a0_re;
    	A2_im += g21_re * a1_im;
    	A2_im += g21_im * a1_re;
    	A2_im += g22_re * a2_im;
    	A2_im += g22_im * a2_re;
    	B2_re = 0;
    	B2_re += g20_re * b0_re;
    	B2_re -= g20_im * b0_im;
    	B2_re += g21_re * b1_re;
    	B2_re -= g21_im * b1_im;
    	B2_re += g22_re * b2_re;
    	B2_re -= g22_im * b2_im;
    	B2_im = 0;
    	B2_im += g20_re * b0_im;
    	B2_im += g20_im * b0_re;
    	B2_im += g21_re * b1_im;
    	B2_im += g21_im * b1_re;
    	B2_im += g22_re * b2_im;
    	B2_im += g22_im * b2_re;
    	
    //Store the data:
    	o2_00_re += A0_re;
    	o2_00_im += A0_im;
    	o2_10_re += B0_re;
    	o2_10_im += B0_im;
    	o2_20_re += B0_re;
    	o2_20_im += B0_im;
    	o2_30_re -= A0_re;
    	o2_30_im -= A0_im;
    	
    	o2_01_re += A1_re;
    	o2_01_im += A1_im;
    	o2_11_re += B1_re;
    	o2_11_im += B1_im;
    	o2_21_re += B1_re;
    	o2_21_im += B1_im;
    	o2_31_re -= A1_re;
    	o2_31_im -= A1_im;
    	
    	o2_02_re += A2_re;
    	o2_02_im += A2_im;
    	o2_12_re += B2_re;
    	o2_12_im += B2_im;
    	o2_22_re += B2_re;
    	o2_22_im += B2_im;
    	o2_32_re -= A2_re;
    	o2_32_im -= A2_im;
    	
    	
    #endif
    }
}

{
    // Projector P1+
    // 1 0 0 1 
    // 0 1 -1 0 
    // 0 -1 1 0 
    // 1 0 0 1 
    
    int sp_idx = ((x2==0)    ? X+X2X1mX1 : X-X1) >> 1;
    int ga_idx = sp_idx;
    
    // read gauge matrix from device memory
    READ_GAUGE_MATRIX(GAUGE1TEX, 3);
    
    // reconstruct gauge matrix
    RECONSTRUCT_GAUGE_MATRIX(3);
    
    {// read the first flavr spinor from device memory
    	READ_SPINOR(FLAVORSPINORTEX1);
    
    // project spinor into half spinors
    	spinorFloat a0_re = +i00_re+i30_re;
    	spinorFloat a0_im = +i00_im+i30_im;
    	spinorFloat a1_re = +i01_re+i31_re;
    	spinorFloat a1_im = +i01_im+i31_im;
    	spinorFloat a2_re = +i02_re+i32_re;
    	spinorFloat a2_im = +i02_im+i32_im;
    	
    	spinorFloat b0_re = +i10_re-i20_re;
    	spinorFloat b0_im = +i10_im-i20_im;
    	spinorFloat b1_re = +i11_re-i21_re;
    	spinorFloat b1_im = +i11_im-i21_im;
    	spinorFloat b2_re = +i12_re-i22_re;
    	spinorFloat b2_im = +i12_im-i22_im;
    	
    // multiply row 0
    	spinorFloat A0_re = 0;
    	A0_re += gT00_re * a0_re;
    	A0_re -= gT00_im * a0_im;
    	A0_re += gT01_re * a1_re;
    	A0_re -= gT01_im * a1_im;
    	A0_re += gT02_re * a2_re;
    	A0_re -= gT02_im * a2_im;
    	spinorFloat A0_im = 0;
    	A0_im += gT00_re * a0_im;
    	A0_im += gT00_im * a0_re;
    	A0_im += gT01_re * a1_im;
    	A0_im += gT01_im * a1_re;
    	A0_im += gT02_re * a2_im;
    	A0_im += gT02_im * a2_re;
    	spinorFloat B0_re = 0;
    	B0_re += gT00_re * b0_re;
    	B0_re -= gT00_im * b0_im;
    	B0_re += gT01_re * b1_re;
    	B0_re -= gT01_im * b1_im;
    	B0_re += gT02_re * b2_re;
    	B0_re -= gT02_im * b2_im;
    	spinorFloat B0_im = 0;
    	B0_im += gT00_re * b0_im;
    	B0_im += gT00_im * b0_re;
    	B0_im += gT01_re * b1_im;
    	B0_im += gT01_im * b1_re;
    	B0_im += gT02_re * b2_im;
    	B0_im += gT02_im * b2_re;
    	
    	// multiply row 1
    	spinorFloat A1_re = 0;
    	A1_re += gT10_re * a0_re;
    	A1_re -= gT10_im * a0_im;
    	A1_re += gT11_re * a1_re;
    	A1_re -= gT11_im * a1_im;
    	A1_re += gT12_re * a2_re;
    	A1_re -= gT12_im * a2_im;
    	spinorFloat A1_im = 0;
    	A1_im += gT10_re * a0_im;
    	A1_im += gT10_im * a0_re;
    	A1_im += gT11_re * a1_im;
    	A1_im += gT11_im * a1_re;
    	A1_im += gT12_re * a2_im;
    	A1_im += gT12_im * a2_re;
    	spinorFloat B1_re = 0;
    	B1_re += gT10_re * b0_re;
    	B1_re -= gT10_im * b0_im;
    	B1_re += gT11_re * b1_re;
    	B1_re -= gT11_im * b1_im;
    	B1_re += gT12_re * b2_re;
    	B1_re -= gT12_im * b2_im;
    	spinorFloat B1_im = 0;
    	B1_im += gT10_re * b0_im;
    	B1_im += gT10_im * b0_re;
    	B1_im += gT11_re * b1_im;
    	B1_im += gT11_im * b1_re;
    	B1_im += gT12_re * b2_im;
    	B1_im += gT12_im * b2_re;
    	
    	// multiply row 2
    	spinorFloat A2_re = 0;
    	A2_re += gT20_re * a0_re;
    	A2_re -= gT20_im * a0_im;
    	A2_re += gT21_re * a1_re;
    	A2_re -= gT21_im * a1_im;
    	A2_re += gT22_re * a2_re;
    	A2_re -= gT22_im * a2_im;
    	spinorFloat A2_im = 0;
    	A2_im += gT20_re * a0_im;
    	A2_im += gT20_im * a0_re;
    	A2_im += gT21_re * a1_im;
    	A2_im += gT21_im * a1_re;
    	A2_im += gT22_re * a2_im;
    	A2_im += gT22_im * a2_re;
    	spinorFloat B2_re = 0;
    	B2_re += gT20_re * b0_re;
    	B2_re -= gT20_im * b0_im;
    	B2_re += gT21_re * b1_re;
    	B2_re -= gT21_im * b1_im;
    	B2_re += gT22_re * b2_re;
    	B2_re -= gT22_im * b2_im;
    	spinorFloat B2_im = 0;
    	B2_im += gT20_re * b0_im;
    	B2_im += gT20_im * b0_re;
    	B2_im += gT21_re * b1_im;
    	B2_im += gT21_im * b1_re;
    	B2_im += gT22_re * b2_im;
    	B2_im += gT22_im * b2_re;
    	
    #ifndef DSLASH_XPAY
    	o1_00_re += A0_re;
    	o1_00_im += A0_im;
    	o1_10_re += B0_re;
    	o1_10_im += B0_im;
    	o1_20_re -= B0_re;
    	o1_20_im -= B0_im;
    	o1_30_re += A0_re;
    	o1_30_im += A0_im;
    	
    	o1_01_re += A1_re;
    	o1_01_im += A1_im;
    	o1_11_re += B1_re;
    	o1_11_im += B1_im;
    	o1_21_re -= B1_re;
    	o1_21_im -= B1_im;
    	o1_31_re += A1_re;
    	o1_31_im += A1_im;
    	
    	o1_02_re += A2_re;
    	o1_02_im += A2_im;
    	o1_12_re += B2_re;
    	o1_12_im += B2_im;
    	o1_22_re -= B2_re;
    	o1_22_im -= B2_im;
    	o1_32_re += A2_re;
    	o1_32_im += A2_im;
    	
    	
    #else
    	//check this!!!
    	o2_00_re += A0_re;
    	o2_00_im += A0_im;
    	o2_10_re += B0_re;
    	o2_10_im += B0_im;
    	o2_20_re -= B0_re;
    	o2_20_im -= B0_im;
    	o2_30_re += A0_re;
    	o2_30_im += A0_im;
    	
    	o2_01_re += A1_re;
    	o2_01_im += A1_im;
    	o2_11_re += B1_re;
    	o2_11_im += B1_im;
    	o2_21_re -= B1_re;
    	o2_21_im -= B1_im;
    	o2_31_re += A1_re;
    	o2_31_im += A1_im;
    	
    	o2_02_re += A2_re;
    	o2_02_im += A2_im;
    	o2_12_re += B2_re;
    	o2_12_im += B2_im;
    	o2_22_re -= B2_re;
    	o2_22_im -= B2_im;
    	o2_32_re += A2_re;
    	o2_32_im += A2_im;
    	
    // Re-use registers here!
    	A0_re = +i00_re+i20_im*mu;
    	A0_im = +i00_im-i20_re*mu;
    	A1_re = +i01_re+i21_im*mu;
    	A1_im = +i01_im-i21_re*mu;
    	A2_re = +i02_re+i22_im*mu;
    	A2_im = +i02_im-i22_re*mu;
    
    	B0_re = +i10_re+i30_im*mu;
    	B0_im = +i10_im-i30_re*mu;
    	B1_re = +i11_re+i31_im*mu;
    	B1_im = +i11_im-i31_re*mu;
    	B2_re = +i12_re+i32_im*mu;
    	B2_im = +i12_im-i32_re*mu;
    
    	i20_re += (+i00_im*mu);
    	i20_im += (-i00_re*mu);
    	i00_re = A0_re;
    	i00_im = A0_im;
    	i21_re += (+i01_im*mu);
    	i21_im += (-i01_re*mu);
    	i01_re = A1_re;
    	i01_im = A1_im;
    	i22_re += (+i02_im*mu);
    	i22_im += (-i02_re*mu);
    	i02_re = A2_re;
    	i02_im = A2_im;
    
    	i30_re += (+i10_im*mu);
    	i30_im += (-i10_re*mu);
    	i10_re = B0_re;
    	i10_im = B0_im;
    	i31_re += (+i11_im*mu);
    	i31_im += (-i11_re*mu);
    	i11_re = B1_re;
    	i11_im = B1_im;
    	i32_re += (+i12_im*mu);
    	i32_im += (-i12_re*mu);
    	i12_re = B2_re;
    	i12_im = B2_im;
    
    
    // project spinor into half spinors
    	a0_re = +i00_re+i30_re;
    	a0_im = +i00_im+i30_im;
    	a1_re = +i01_re+i31_re;
    	a1_im = +i01_im+i31_im;
    	a2_re = +i02_re+i32_re;
    	a2_im = +i02_im+i32_im;
    	
    	b0_re = +i10_re-i20_re;
    	b0_im = +i10_im-i20_im;
    	b1_re = +i11_re-i21_re;
    	b1_im = +i11_im-i21_im;
    	b2_re = +i12_re-i22_re;
    	b2_im = +i12_im-i22_im;
    	
    // multiply row 0
    	A0_re = 0;
    	A0_re += gT00_re * a0_re;
    	A0_re -= gT00_im * a0_im;
    	A0_re += gT01_re * a1_re;
    	A0_re -= gT01_im * a1_im;
    	A0_re += gT02_re * a2_re;
    	A0_re -= gT02_im * a2_im;
    	A0_im = 0;
    	A0_im += gT00_re * a0_im;
    	A0_im += gT00_im * a0_re;
    	A0_im += gT01_re * a1_im;
    	A0_im += gT01_im * a1_re;
    	A0_im += gT02_re * a2_im;
    	A0_im += gT02_im * a2_re;
    	B0_re = 0;
    	B0_re += gT00_re * b0_re;
    	B0_re -= gT00_im * b0_im;
    	B0_re += gT01_re * b1_re;
    	B0_re -= gT01_im * b1_im;
    	B0_re += gT02_re * b2_re;
    	B0_re -= gT02_im * b2_im;
    	B0_im = 0;
    	B0_im += gT00_re * b0_im;
    	B0_im += gT00_im * b0_re;
    	B0_im += gT01_re * b1_im;
    	B0_im += gT01_im * b1_re;
    	B0_im += gT02_re * b2_im;
    	B0_im += gT02_im * b2_re;
    	
    	// multiply row 1
    	A1_re = 0;
    	A1_re += gT10_re * a0_re;
    	A1_re -= gT10_im * a0_im;
    	A1_re += gT11_re * a1_re;
    	A1_re -= gT11_im * a1_im;
    	A1_re += gT12_re * a2_re;
    	A1_re -= gT12_im * a2_im;
    	A1_im = 0;
    	A1_im += gT10_re * a0_im;
    	A1_im += gT10_im * a0_re;
    	A1_im += gT11_re * a1_im;
    	A1_im += gT11_im * a1_re;
    	A1_im += gT12_re * a2_im;
    	A1_im += gT12_im * a2_re;
    	B1_re = 0;
    	B1_re += gT10_re * b0_re;
    	B1_re -= gT10_im * b0_im;
    	B1_re += gT11_re * b1_re;
    	B1_re -= gT11_im * b1_im;
    	B1_re += gT12_re * b2_re;
    	B1_re -= gT12_im * b2_im;
    	B1_im = 0;
    	B1_im += gT10_re * b0_im;
    	B1_im += gT10_im * b0_re;
    	B1_im += gT11_re * b1_im;
    	B1_im += gT11_im * b1_re;
    	B1_im += gT12_re * b2_im;
    	B1_im += gT12_im * b2_re;
    	
    	// multiply row 2
    	A2_re = 0;
    	A2_re += gT20_re * a0_re;
    	A2_re -= gT20_im * a0_im;
    	A2_re += gT21_re * a1_re;
    	A2_re -= gT21_im * a1_im;
    	A2_re += gT22_re * a2_re;
    	A2_re -= gT22_im * a2_im;
    	A2_im = 0;
    	A2_im += gT20_re * a0_im;
    	A2_im += gT20_im * a0_re;
    	A2_im += gT21_re * a1_im;
    	A2_im += gT21_im * a1_re;
    	A2_im += gT22_re * a2_im;
    	A2_im += gT22_im * a2_re;
    	B2_re = 0;
    	B2_re += gT20_re * b0_re;
    	B2_re -= gT20_im * b0_im;
    	B2_re += gT21_re * b1_re;
    	B2_re -= gT21_im * b1_im;
    	B2_re += gT22_re * b2_re;
    	B2_re -= gT22_im * b2_im;
    	B2_im = 0;
    	B2_im += gT20_re * b0_im;
    	B2_im += gT20_im * b0_re;
    	B2_im += gT21_re * b1_im;
    	B2_im += gT21_im * b1_re;
    	B2_im += gT22_re * b2_im;
    	B2_im += gT22_im * b2_re;
    	
    //Store the data:
    	o1_00_re += A0_re;
    	o1_00_im += A0_im;
    	o1_10_re += B0_re;
    	o1_10_im += B0_im;
    	o1_20_re -= B0_re;
    	o1_20_im -= B0_im;
    	o1_30_re += A0_re;
    	o1_30_im += A0_im;
    	
    	o1_01_re += A1_re;
    	o1_01_im += A1_im;
    	o1_11_re += B1_re;
    	o1_11_im += B1_im;
    	o1_21_re -= B1_re;
    	o1_21_im -= B1_im;
    	o1_31_re += A1_re;
    	o1_31_im += A1_im;
    	
    	o1_02_re += A2_re;
    	o1_02_im += A2_im;
    	o1_12_re += B2_re;
    	o1_12_im += B2_im;
    	o1_22_re -= B2_re;
    	o1_22_im -= B2_im;
    	o1_32_re += A2_re;
    	o1_32_im += A2_im;
    	
    	
    #endif
    }
    {// read the second flavorr spinor from device memory
    	READ_SPINOR(FLAVORSPINORTEX2);
    
    // project spinor into half spinors
    	spinorFloat a0_re = +i00_re+i30_re;
    	spinorFloat a0_im = +i00_im+i30_im;
    	spinorFloat a1_re = +i01_re+i31_re;
    	spinorFloat a1_im = +i01_im+i31_im;
    	spinorFloat a2_re = +i02_re+i32_re;
    	spinorFloat a2_im = +i02_im+i32_im;
    	
    	spinorFloat b0_re = +i10_re-i20_re;
    	spinorFloat b0_im = +i10_im-i20_im;
    	spinorFloat b1_re = +i11_re-i21_re;
    	spinorFloat b1_im = +i11_im-i21_im;
    	spinorFloat b2_re = +i12_re-i22_re;
    	spinorFloat b2_im = +i12_im-i22_im;
    	
    // multiply row 0
    	spinorFloat A0_re = 0;
    	A0_re += gT00_re * a0_re;
    	A0_re -= gT00_im * a0_im;
    	A0_re += gT01_re * a1_re;
    	A0_re -= gT01_im * a1_im;
    	A0_re += gT02_re * a2_re;
    	A0_re -= gT02_im * a2_im;
    	spinorFloat A0_im = 0;
    	A0_im += gT00_re * a0_im;
    	A0_im += gT00_im * a0_re;
    	A0_im += gT01_re * a1_im;
    	A0_im += gT01_im * a1_re;
    	A0_im += gT02_re * a2_im;
    	A0_im += gT02_im * a2_re;
    	spinorFloat B0_re = 0;
    	B0_re += gT00_re * b0_re;
    	B0_re -= gT00_im * b0_im;
    	B0_re += gT01_re * b1_re;
    	B0_re -= gT01_im * b1_im;
    	B0_re += gT02_re * b2_re;
    	B0_re -= gT02_im * b2_im;
    	spinorFloat B0_im = 0;
    	B0_im += gT00_re * b0_im;
    	B0_im += gT00_im * b0_re;
    	B0_im += gT01_re * b1_im;
    	B0_im += gT01_im * b1_re;
    	B0_im += gT02_re * b2_im;
    	B0_im += gT02_im * b2_re;
    	
    	// multiply row 1
    	spinorFloat A1_re = 0;
    	A1_re += gT10_re * a0_re;
    	A1_re -= gT10_im * a0_im;
    	A1_re += gT11_re * a1_re;
    	A1_re -= gT11_im * a1_im;
    	A1_re += gT12_re * a2_re;
    	A1_re -= gT12_im * a2_im;
    	spinorFloat A1_im = 0;
    	A1_im += gT10_re * a0_im;
    	A1_im += gT10_im * a0_re;
    	A1_im += gT11_re * a1_im;
    	A1_im += gT11_im * a1_re;
    	A1_im += gT12_re * a2_im;
    	A1_im += gT12_im * a2_re;
    	spinorFloat B1_re = 0;
    	B1_re += gT10_re * b0_re;
    	B1_re -= gT10_im * b0_im;
    	B1_re += gT11_re * b1_re;
    	B1_re -= gT11_im * b1_im;
    	B1_re += gT12_re * b2_re;
    	B1_re -= gT12_im * b2_im;
    	spinorFloat B1_im = 0;
    	B1_im += gT10_re * b0_im;
    	B1_im += gT10_im * b0_re;
    	B1_im += gT11_re * b1_im;
    	B1_im += gT11_im * b1_re;
    	B1_im += gT12_re * b2_im;
    	B1_im += gT12_im * b2_re;
    	
    	// multiply row 2
    	spinorFloat A2_re = 0;
    	A2_re += gT20_re * a0_re;
    	A2_re -= gT20_im * a0_im;
    	A2_re += gT21_re * a1_re;
    	A2_re -= gT21_im * a1_im;
    	A2_re += gT22_re * a2_re;
    	A2_re -= gT22_im * a2_im;
    	spinorFloat A2_im = 0;
    	A2_im += gT20_re * a0_im;
    	A2_im += gT20_im * a0_re;
    	A2_im += gT21_re * a1_im;
    	A2_im += gT21_im * a1_re;
    	A2_im += gT22_re * a2_im;
    	A2_im += gT22_im * a2_re;
    	spinorFloat B2_re = 0;
    	B2_re += gT20_re * b0_re;
    	B2_re -= gT20_im * b0_im;
    	B2_re += gT21_re * b1_re;
    	B2_re -= gT21_im * b1_im;
    	B2_re += gT22_re * b2_re;
    	B2_re -= gT22_im * b2_im;
    	spinorFloat B2_im = 0;
    	B2_im += gT20_re * b0_im;
    	B2_im += gT20_im * b0_re;
    	B2_im += gT21_re * b1_im;
    	B2_im += gT21_im * b1_re;
    	B2_im += gT22_re * b2_im;
    	B2_im += gT22_im * b2_re;
    	
    #ifndef DSLASH_XPAY
    	o2_00_re += A0_re;
    	o2_00_im += A0_im;
    	o2_10_re += B0_re;
    	o2_10_im += B0_im;
    	o2_20_re -= B0_re;
    	o2_20_im -= B0_im;
    	o2_30_re += A0_re;
    	o2_30_im += A0_im;
    	
    	o2_01_re += A1_re;
    	o2_01_im += A1_im;
    	o2_11_re += B1_re;
    	o2_11_im += B1_im;
    	o2_21_re -= B1_re;
    	o2_21_im -= B1_im;
    	o2_31_re += A1_re;
    	o2_31_im += A1_im;
    	
    	o2_02_re += A2_re;
    	o2_02_im += A2_im;
    	o2_12_re += B2_re;
    	o2_12_im += B2_im;
    	o2_22_re -= B2_re;
    	o2_22_im -= B2_im;
    	o2_32_re += A2_re;
    	o2_32_im += A2_im;
    	
    	
    #else
    	//(check this!!!)
    	o1_00_re += A0_re;
    	o1_00_im += A0_im;
    	o1_10_re += B0_re;
    	o1_10_im += B0_im;
    	o1_20_re -= B0_re;
    	o1_20_im -= B0_im;
    	o1_30_re += A0_re;
    	o1_30_im += A0_im;
    	
    	o1_01_re += A1_re;
    	o1_01_im += A1_im;
    	o1_11_re += B1_re;
    	o1_11_im += B1_im;
    	o1_21_re -= B1_re;
    	o1_21_im -= B1_im;
    	o1_31_re += A1_re;
    	o1_31_im += A1_im;
    	
    	o1_02_re += A2_re;
    	o1_02_im += A2_im;
    	o1_12_re += B2_re;
    	o1_12_im += B2_im;
    	o1_22_re -= B2_re;
    	o1_22_im -= B2_im;
    	o1_32_re += A2_re;
    	o1_32_im += A2_im;
    	
    // Re-use registers here!
    	A0_re = +i00_re-i20_im*mu;
    	A0_im = +i00_im+i20_re*mu;
    	A1_re = +i01_re-i21_im*mu;
    	A1_im = +i01_im+i21_re*mu;
    	A2_re = +i02_re-i22_im*mu;
    	A2_im = +i02_im+i22_re*mu;
    
    	B0_re = +i10_re-i30_im*mu;
    	B0_im = +i10_im+i30_re*mu;
    	B1_re = +i11_re-i31_im*mu;
    	B1_im = +i11_im+i31_re*mu;
    	B2_re = +i12_re-i32_im*mu;
    	B2_im = +i12_im+i32_re*mu;
    
    	i20_re += (-i00_im*mu);
    	i20_im += (+i00_re*mu);
    	i00_re = A0_re;
    	i00_im = A0_im;
    	i21_re += (-i01_im*mu);
    	i21_im += (+i01_re*mu);
    	i01_re = A1_re;
    	i01_im = A1_im;
    	i22_re += (-i02_im*mu);
    	i22_im += (+i02_re*mu);
    	i02_re = A2_re;
    	i02_im = A2_im;
    
    	i30_re += (-i10_im*mu);
    	i30_im += (+i10_re*mu);
    	i10_re = B0_re;
    	i10_im = B0_im;
    	i31_re += (-i11_im*mu);
    	i31_im += (+i11_re*mu);
    	i11_re = B1_re;
    	i11_im = B1_im;
    	i32_re += (-i12_im*mu);
    	i32_im += (+i12_re*mu);
    	i12_re = B2_re;
    	i12_im = B2_im;
    
    
    // project spinor into half spinors
    	a0_re = +i00_re+i30_re;
    	a0_im = +i00_im+i30_im;
    	a1_re = +i01_re+i31_re;
    	a1_im = +i01_im+i31_im;
    	a2_re = +i02_re+i32_re;
    	a2_im = +i02_im+i32_im;
    	
    	b0_re = +i10_re-i20_re;
    	b0_im = +i10_im-i20_im;
    	b1_re = +i11_re-i21_re;
    	b1_im = +i11_im-i21_im;
    	b2_re = +i12_re-i22_re;
    	b2_im = +i12_im-i22_im;
    	
    // multiply row 0
    	A0_re = 0;
    	A0_re += gT00_re * a0_re;
    	A0_re -= gT00_im * a0_im;
    	A0_re += gT01_re * a1_re;
    	A0_re -= gT01_im * a1_im;
    	A0_re += gT02_re * a2_re;
    	A0_re -= gT02_im * a2_im;
    	A0_im = 0;
    	A0_im += gT00_re * a0_im;
    	A0_im += gT00_im * a0_re;
    	A0_im += gT01_re * a1_im;
    	A0_im += gT01_im * a1_re;
    	A0_im += gT02_re * a2_im;
    	A0_im += gT02_im * a2_re;
    	B0_re = 0;
    	B0_re += gT00_re * b0_re;
    	B0_re -= gT00_im * b0_im;
    	B0_re += gT01_re * b1_re;
    	B0_re -= gT01_im * b1_im;
    	B0_re += gT02_re * b2_re;
    	B0_re -= gT02_im * b2_im;
    	B0_im = 0;
    	B0_im += gT00_re * b0_im;
    	B0_im += gT00_im * b0_re;
    	B0_im += gT01_re * b1_im;
    	B0_im += gT01_im * b1_re;
    	B0_im += gT02_re * b2_im;
    	B0_im += gT02_im * b2_re;
    	
    	// multiply row 1
    	A1_re = 0;
    	A1_re += gT10_re * a0_re;
    	A1_re -= gT10_im * a0_im;
    	A1_re += gT11_re * a1_re;
    	A1_re -= gT11_im * a1_im;
    	A1_re += gT12_re * a2_re;
    	A1_re -= gT12_im * a2_im;
    	A1_im = 0;
    	A1_im += gT10_re * a0_im;
    	A1_im += gT10_im * a0_re;
    	A1_im += gT11_re * a1_im;
    	A1_im += gT11_im * a1_re;
    	A1_im += gT12_re * a2_im;
    	A1_im += gT12_im * a2_re;
    	B1_re = 0;
    	B1_re += gT10_re * b0_re;
    	B1_re -= gT10_im * b0_im;
    	B1_re += gT11_re * b1_re;
    	B1_re -= gT11_im * b1_im;
    	B1_re += gT12_re * b2_re;
    	B1_re -= gT12_im * b2_im;
    	B1_im = 0;
    	B1_im += gT10_re * b0_im;
    	B1_im += gT10_im * b0_re;
    	B1_im += gT11_re * b1_im;
    	B1_im += gT11_im * b1_re;
    	B1_im += gT12_re * b2_im;
    	B1_im += gT12_im * b2_re;
    	
    	// multiply row 2
    	A2_re = 0;
    	A2_re += gT20_re * a0_re;
    	A2_re -= gT20_im * a0_im;
    	A2_re += gT21_re * a1_re;
    	A2_re -= gT21_im * a1_im;
    	A2_re += gT22_re * a2_re;
    	A2_re -= gT22_im * a2_im;
    	A2_im = 0;
    	A2_im += gT20_re * a0_im;
    	A2_im += gT20_im * a0_re;
    	A2_im += gT21_re * a1_im;
    	A2_im += gT21_im * a1_re;
    	A2_im += gT22_re * a2_im;
    	A2_im += gT22_im * a2_re;
    	B2_re = 0;
    	B2_re += gT20_re * b0_re;
    	B2_re -= gT20_im * b0_im;
    	B2_re += gT21_re * b1_re;
    	B2_re -= gT21_im * b1_im;
    	B2_re += gT22_re * b2_re;
    	B2_re -= gT22_im * b2_im;
    	B2_im = 0;
    	B2_im += gT20_re * b0_im;
    	B2_im += gT20_im * b0_re;
    	B2_im += gT21_re * b1_im;
    	B2_im += gT21_im * b1_re;
    	B2_im += gT22_re * b2_im;
    	B2_im += gT22_im * b2_re;
    	
    //Store the data:
    	o2_00_re += A0_re;
    	o2_00_im += A0_im;
    	o2_10_re += B0_re;
    	o2_10_im += B0_im;
    	o2_20_re -= B0_re;
    	o2_20_im -= B0_im;
    	o2_30_re += A0_re;
    	o2_30_im += A0_im;
    	
    	o2_01_re += A1_re;
    	o2_01_im += A1_im;
    	o2_11_re += B1_re;
    	o2_11_im += B1_im;
    	o2_21_re -= B1_re;
    	o2_21_im -= B1_im;
    	o2_31_re += A1_re;
    	o2_31_im += A1_im;
    	
    	o2_02_re += A2_re;
    	o2_02_im += A2_im;
    	o2_12_re += B2_re;
    	o2_12_im += B2_im;
    	o2_22_re -= B2_re;
    	o2_22_im -= B2_im;
    	o2_32_re += A2_re;
    	o2_32_im += A2_im;
    	
    	
    #endif
    }
}

{
    // Projector P2-
    // 1 0 -i 0 
    // 0 1 0 i 
    // i 0 1 0 
    // 0 -i 0 1 
    
    int sp_idx = ((x3==X3m1) ? X-X3X2X1mX2X1 : X+X2X1) >> 1;
    int ga_idx = sid;
    
    // read gauge matrix from device memory
    READ_GAUGE_MATRIX(GAUGE0TEX, 4);
    
    // reconstruct gauge matrix
    RECONSTRUCT_GAUGE_MATRIX(4);
    
    {// read the first flavr spinor from device memory
    	READ_SPINOR(FLAVORSPINORTEX1);
    
    // project spinor into half spinors
    	spinorFloat a0_re = +i00_re+i20_im;
    	spinorFloat a0_im = +i00_im-i20_re;
    	spinorFloat a1_re = +i01_re+i21_im;
    	spinorFloat a1_im = +i01_im-i21_re;
    	spinorFloat a2_re = +i02_re+i22_im;
    	spinorFloat a2_im = +i02_im-i22_re;
    	
    	spinorFloat b0_re = +i10_re-i30_im;
    	spinorFloat b0_im = +i10_im+i30_re;
    	spinorFloat b1_re = +i11_re-i31_im;
    	spinorFloat b1_im = +i11_im+i31_re;
    	spinorFloat b2_re = +i12_re-i32_im;
    	spinorFloat b2_im = +i12_im+i32_re;
    	
    // multiply row 0
    	spinorFloat A0_re = 0;
    	A0_re += g00_re * a0_re;
    	A0_re -= g00_im * a0_im;
    	A0_re += g01_re * a1_re;
    	A0_re -= g01_im * a1_im;
    	A0_re += g02_re * a2_re;
    	A0_re -= g02_im * a2_im;
    	spinorFloat A0_im = 0;
    	A0_im += g00_re * a0_im;
    	A0_im += g00_im * a0_re;
    	A0_im += g01_re * a1_im;
    	A0_im += g01_im * a1_re;
    	A0_im += g02_re * a2_im;
    	A0_im += g02_im * a2_re;
    	spinorFloat B0_re = 0;
    	B0_re += g00_re * b0_re;
    	B0_re -= g00_im * b0_im;
    	B0_re += g01_re * b1_re;
    	B0_re -= g01_im * b1_im;
    	B0_re += g02_re * b2_re;
    	B0_re -= g02_im * b2_im;
    	spinorFloat B0_im = 0;
    	B0_im += g00_re * b0_im;
    	B0_im += g00_im * b0_re;
    	B0_im += g01_re * b1_im;
    	B0_im += g01_im * b1_re;
    	B0_im += g02_re * b2_im;
    	B0_im += g02_im * b2_re;
    	
    	// multiply row 1
    	spinorFloat A1_re = 0;
    	A1_re += g10_re * a0_re;
    	A1_re -= g10_im * a0_im;
    	A1_re += g11_re * a1_re;
    	A1_re -= g11_im * a1_im;
    	A1_re += g12_re * a2_re;
    	A1_re -= g12_im * a2_im;
    	spinorFloat A1_im = 0;
    	A1_im += g10_re * a0_im;
    	A1_im += g10_im * a0_re;
    	A1_im += g11_re * a1_im;
    	A1_im += g11_im * a1_re;
    	A1_im += g12_re * a2_im;
    	A1_im += g12_im * a2_re;
    	spinorFloat B1_re = 0;
    	B1_re += g10_re * b0_re;
    	B1_re -= g10_im * b0_im;
    	B1_re += g11_re * b1_re;
    	B1_re -= g11_im * b1_im;
    	B1_re += g12_re * b2_re;
    	B1_re -= g12_im * b2_im;
    	spinorFloat B1_im = 0;
    	B1_im += g10_re * b0_im;
    	B1_im += g10_im * b0_re;
    	B1_im += g11_re * b1_im;
    	B1_im += g11_im * b1_re;
    	B1_im += g12_re * b2_im;
    	B1_im += g12_im * b2_re;
    	
    	// multiply row 2
    	spinorFloat A2_re = 0;
    	A2_re += g20_re * a0_re;
    	A2_re -= g20_im * a0_im;
    	A2_re += g21_re * a1_re;
    	A2_re -= g21_im * a1_im;
    	A2_re += g22_re * a2_re;
    	A2_re -= g22_im * a2_im;
    	spinorFloat A2_im = 0;
    	A2_im += g20_re * a0_im;
    	A2_im += g20_im * a0_re;
    	A2_im += g21_re * a1_im;
    	A2_im += g21_im * a1_re;
    	A2_im += g22_re * a2_im;
    	A2_im += g22_im * a2_re;
    	spinorFloat B2_re = 0;
    	B2_re += g20_re * b0_re;
    	B2_re -= g20_im * b0_im;
    	B2_re += g21_re * b1_re;
    	B2_re -= g21_im * b1_im;
    	B2_re += g22_re * b2_re;
    	B2_re -= g22_im * b2_im;
    	spinorFloat B2_im = 0;
    	B2_im += g20_re * b0_im;
    	B2_im += g20_im * b0_re;
    	B2_im += g21_re * b1_im;
    	B2_im += g21_im * b1_re;
    	B2_im += g22_re * b2_im;
    	B2_im += g22_im * b2_re;
    	
    #ifndef DSLASH_XPAY
    	o1_00_re += A0_re;
    	o1_00_im += A0_im;
    	o1_10_re += B0_re;
    	o1_10_im += B0_im;
    	o1_20_re -= A0_im;
    	o1_20_im += A0_re;
    	o1_30_re += B0_im;
    	o1_30_im -= B0_re;
    	
    	o1_01_re += A1_re;
    	o1_01_im += A1_im;
    	o1_11_re += B1_re;
    	o1_11_im += B1_im;
    	o1_21_re -= A1_im;
    	o1_21_im += A1_re;
    	o1_31_re += B1_im;
    	o1_31_im -= B1_re;
    	
    	o1_02_re += A2_re;
    	o1_02_im += A2_im;
    	o1_12_re += B2_re;
    	o1_12_im += B2_im;
    	o1_22_re -= A2_im;
    	o1_22_im += A2_re;
    	o1_32_re += B2_im;
    	o1_32_im -= B2_re;
    	
    	
    #else
    	//check this!!!
    	o2_00_re += A0_re;
    	o2_00_im += A0_im;
    	o2_10_re += B0_re;
    	o2_10_im += B0_im;
    	o2_20_re -= A0_im;
    	o2_20_im += A0_re;
    	o2_30_re += B0_im;
    	o2_30_im -= B0_re;
    	
    	o2_01_re += A1_re;
    	o2_01_im += A1_im;
    	o2_11_re += B1_re;
    	o2_11_im += B1_im;
    	o2_21_re -= A1_im;
    	o2_21_im += A1_re;
    	o2_31_re += B1_im;
    	o2_31_im -= B1_re;
    	
    	o2_02_re += A2_re;
    	o2_02_im += A2_im;
    	o2_12_re += B2_re;
    	o2_12_im += B2_im;
    	o2_22_re -= A2_im;
    	o2_22_im += A2_re;
    	o2_32_re += B2_im;
    	o2_32_im -= B2_re;
    	
    // Re-use registers here!
    	A0_re = +i00_re+i20_im*mu;
    	A0_im = +i00_im-i20_re*mu;
    	A1_re = +i01_re+i21_im*mu;
    	A1_im = +i01_im-i21_re*mu;
    	A2_re = +i02_re+i22_im*mu;
    	A2_im = +i02_im-i22_re*mu;
    
    	B0_re = +i10_re+i30_im*mu;
    	B0_im = +i10_im-i30_re*mu;
    	B1_re = +i11_re+i31_im*mu;
    	B1_im = +i11_im-i31_re*mu;
    	B2_re = +i12_re+i32_im*mu;
    	B2_im = +i12_im-i32_re*mu;
    
    	i20_re += (+i00_im*mu);
    	i20_im += (-i00_re*mu);
    	i00_re = A0_re;
    	i00_im = A0_im;
    	i21_re += (+i01_im*mu);
    	i21_im += (-i01_re*mu);
    	i01_re = A1_re;
    	i01_im = A1_im;
    	i22_re += (+i02_im*mu);
    	i22_im += (-i02_re*mu);
    	i02_re = A2_re;
    	i02_im = A2_im;
    
    	i30_re += (+i10_im*mu);
    	i30_im += (-i10_re*mu);
    	i10_re = B0_re;
    	i10_im = B0_im;
    	i31_re += (+i11_im*mu);
    	i31_im += (-i11_re*mu);
    	i11_re = B1_re;
    	i11_im = B1_im;
    	i32_re += (+i12_im*mu);
    	i32_im += (-i12_re*mu);
    	i12_re = B2_re;
    	i12_im = B2_im;
    
    
    // project spinor into half spinors
    	a0_re = +i00_re+i20_im;
    	a0_im = +i00_im-i20_re;
    	a1_re = +i01_re+i21_im;
    	a1_im = +i01_im-i21_re;
    	a2_re = +i02_re+i22_im;
    	a2_im = +i02_im-i22_re;
    	
    	b0_re = +i10_re-i30_im;
    	b0_im = +i10_im+i30_re;
    	b1_re = +i11_re-i31_im;
    	b1_im = +i11_im+i31_re;
    	b2_re = +i12_re-i32_im;
    	b2_im = +i12_im+i32_re;
    	
    // multiply row 0
    	A0_re = 0;
    	A0_re += g00_re * a0_re;
    	A0_re -= g00_im * a0_im;
    	A0_re += g01_re * a1_re;
    	A0_re -= g01_im * a1_im;
    	A0_re += g02_re * a2_re;
    	A0_re -= g02_im * a2_im;
    	A0_im = 0;
    	A0_im += g00_re * a0_im;
    	A0_im += g00_im * a0_re;
    	A0_im += g01_re * a1_im;
    	A0_im += g01_im * a1_re;
    	A0_im += g02_re * a2_im;
    	A0_im += g02_im * a2_re;
    	B0_re = 0;
    	B0_re += g00_re * b0_re;
    	B0_re -= g00_im * b0_im;
    	B0_re += g01_re * b1_re;
    	B0_re -= g01_im * b1_im;
    	B0_re += g02_re * b2_re;
    	B0_re -= g02_im * b2_im;
    	B0_im = 0;
    	B0_im += g00_re * b0_im;
    	B0_im += g00_im * b0_re;
    	B0_im += g01_re * b1_im;
    	B0_im += g01_im * b1_re;
    	B0_im += g02_re * b2_im;
    	B0_im += g02_im * b2_re;
    	
    	// multiply row 1
    	A1_re = 0;
    	A1_re += g10_re * a0_re;
    	A1_re -= g10_im * a0_im;
    	A1_re += g11_re * a1_re;
    	A1_re -= g11_im * a1_im;
    	A1_re += g12_re * a2_re;
    	A1_re -= g12_im * a2_im;
    	A1_im = 0;
    	A1_im += g10_re * a0_im;
    	A1_im += g10_im * a0_re;
    	A1_im += g11_re * a1_im;
    	A1_im += g11_im * a1_re;
    	A1_im += g12_re * a2_im;
    	A1_im += g12_im * a2_re;
    	B1_re = 0;
    	B1_re += g10_re * b0_re;
    	B1_re -= g10_im * b0_im;
    	B1_re += g11_re * b1_re;
    	B1_re -= g11_im * b1_im;
    	B1_re += g12_re * b2_re;
    	B1_re -= g12_im * b2_im;
    	B1_im = 0;
    	B1_im += g10_re * b0_im;
    	B1_im += g10_im * b0_re;
    	B1_im += g11_re * b1_im;
    	B1_im += g11_im * b1_re;
    	B1_im += g12_re * b2_im;
    	B1_im += g12_im * b2_re;
    	
    	// multiply row 2
    	A2_re = 0;
    	A2_re += g20_re * a0_re;
    	A2_re -= g20_im * a0_im;
    	A2_re += g21_re * a1_re;
    	A2_re -= g21_im * a1_im;
    	A2_re += g22_re * a2_re;
    	A2_re -= g22_im * a2_im;
    	A2_im = 0;
    	A2_im += g20_re * a0_im;
    	A2_im += g20_im * a0_re;
    	A2_im += g21_re * a1_im;
    	A2_im += g21_im * a1_re;
    	A2_im += g22_re * a2_im;
    	A2_im += g22_im * a2_re;
    	B2_re = 0;
    	B2_re += g20_re * b0_re;
    	B2_re -= g20_im * b0_im;
    	B2_re += g21_re * b1_re;
    	B2_re -= g21_im * b1_im;
    	B2_re += g22_re * b2_re;
    	B2_re -= g22_im * b2_im;
    	B2_im = 0;
    	B2_im += g20_re * b0_im;
    	B2_im += g20_im * b0_re;
    	B2_im += g21_re * b1_im;
    	B2_im += g21_im * b1_re;
    	B2_im += g22_re * b2_im;
    	B2_im += g22_im * b2_re;
    	
    //Store the data:
    	o1_00_re += A0_re;
    	o1_00_im += A0_im;
    	o1_10_re += B0_re;
    	o1_10_im += B0_im;
    	o1_20_re -= A0_im;
    	o1_20_im += A0_re;
    	o1_30_re += B0_im;
    	o1_30_im -= B0_re;
    	
    	o1_01_re += A1_re;
    	o1_01_im += A1_im;
    	o1_11_re += B1_re;
    	o1_11_im += B1_im;
    	o1_21_re -= A1_im;
    	o1_21_im += A1_re;
    	o1_31_re += B1_im;
    	o1_31_im -= B1_re;
    	
    	o1_02_re += A2_re;
    	o1_02_im += A2_im;
    	o1_12_re += B2_re;
    	o1_12_im += B2_im;
    	o1_22_re -= A2_im;
    	o1_22_im += A2_re;
    	o1_32_re += B2_im;
    	o1_32_im -= B2_re;
    	
    	
    #endif
    }
    {// read the second flavorr spinor from device memory
    	READ_SPINOR(FLAVORSPINORTEX2);
    
    // project spinor into half spinors
    	spinorFloat a0_re = +i00_re+i20_im;
    	spinorFloat a0_im = +i00_im-i20_re;
    	spinorFloat a1_re = +i01_re+i21_im;
    	spinorFloat a1_im = +i01_im-i21_re;
    	spinorFloat a2_re = +i02_re+i22_im;
    	spinorFloat a2_im = +i02_im-i22_re;
    	
    	spinorFloat b0_re = +i10_re-i30_im;
    	spinorFloat b0_im = +i10_im+i30_re;
    	spinorFloat b1_re = +i11_re-i31_im;
    	spinorFloat b1_im = +i11_im+i31_re;
    	spinorFloat b2_re = +i12_re-i32_im;
    	spinorFloat b2_im = +i12_im+i32_re;
    	
    // multiply row 0
    	spinorFloat A0_re = 0;
    	A0_re += g00_re * a0_re;
    	A0_re -= g00_im * a0_im;
    	A0_re += g01_re * a1_re;
    	A0_re -= g01_im * a1_im;
    	A0_re += g02_re * a2_re;
    	A0_re -= g02_im * a2_im;
    	spinorFloat A0_im = 0;
    	A0_im += g00_re * a0_im;
    	A0_im += g00_im * a0_re;
    	A0_im += g01_re * a1_im;
    	A0_im += g01_im * a1_re;
    	A0_im += g02_re * a2_im;
    	A0_im += g02_im * a2_re;
    	spinorFloat B0_re = 0;
    	B0_re += g00_re * b0_re;
    	B0_re -= g00_im * b0_im;
    	B0_re += g01_re * b1_re;
    	B0_re -= g01_im * b1_im;
    	B0_re += g02_re * b2_re;
    	B0_re -= g02_im * b2_im;
    	spinorFloat B0_im = 0;
    	B0_im += g00_re * b0_im;
    	B0_im += g00_im * b0_re;
    	B0_im += g01_re * b1_im;
    	B0_im += g01_im * b1_re;
    	B0_im += g02_re * b2_im;
    	B0_im += g02_im * b2_re;
    	
    	// multiply row 1
    	spinorFloat A1_re = 0;
    	A1_re += g10_re * a0_re;
    	A1_re -= g10_im * a0_im;
    	A1_re += g11_re * a1_re;
    	A1_re -= g11_im * a1_im;
    	A1_re += g12_re * a2_re;
    	A1_re -= g12_im * a2_im;
    	spinorFloat A1_im = 0;
    	A1_im += g10_re * a0_im;
    	A1_im += g10_im * a0_re;
    	A1_im += g11_re * a1_im;
    	A1_im += g11_im * a1_re;
    	A1_im += g12_re * a2_im;
    	A1_im += g12_im * a2_re;
    	spinorFloat B1_re = 0;
    	B1_re += g10_re * b0_re;
    	B1_re -= g10_im * b0_im;
    	B1_re += g11_re * b1_re;
    	B1_re -= g11_im * b1_im;
    	B1_re += g12_re * b2_re;
    	B1_re -= g12_im * b2_im;
    	spinorFloat B1_im = 0;
    	B1_im += g10_re * b0_im;
    	B1_im += g10_im * b0_re;
    	B1_im += g11_re * b1_im;
    	B1_im += g11_im * b1_re;
    	B1_im += g12_re * b2_im;
    	B1_im += g12_im * b2_re;
    	
    	// multiply row 2
    	spinorFloat A2_re = 0;
    	A2_re += g20_re * a0_re;
    	A2_re -= g20_im * a0_im;
    	A2_re += g21_re * a1_re;
    	A2_re -= g21_im * a1_im;
    	A2_re += g22_re * a2_re;
    	A2_re -= g22_im * a2_im;
    	spinorFloat A2_im = 0;
    	A2_im += g20_re * a0_im;
    	A2_im += g20_im * a0_re;
    	A2_im += g21_re * a1_im;
    	A2_im += g21_im * a1_re;
    	A2_im += g22_re * a2_im;
    	A2_im += g22_im * a2_re;
    	spinorFloat B2_re = 0;
    	B2_re += g20_re * b0_re;
    	B2_re -= g20_im * b0_im;
    	B2_re += g21_re * b1_re;
    	B2_re -= g21_im * b1_im;
    	B2_re += g22_re * b2_re;
    	B2_re -= g22_im * b2_im;
    	spinorFloat B2_im = 0;
    	B2_im += g20_re * b0_im;
    	B2_im += g20_im * b0_re;
    	B2_im += g21_re * b1_im;
    	B2_im += g21_im * b1_re;
    	B2_im += g22_re * b2_im;
    	B2_im += g22_im * b2_re;
    	
    #ifndef DSLASH_XPAY
    	o2_00_re += A0_re;
    	o2_00_im += A0_im;
    	o2_10_re += B0_re;
    	o2_10_im += B0_im;
    	o2_20_re -= A0_im;
    	o2_20_im += A0_re;
    	o2_30_re += B0_im;
    	o2_30_im -= B0_re;
    	
    	o2_01_re += A1_re;
    	o2_01_im += A1_im;
    	o2_11_re += B1_re;
    	o2_11_im += B1_im;
    	o2_21_re -= A1_im;
    	o2_21_im += A1_re;
    	o2_31_re += B1_im;
    	o2_31_im -= B1_re;
    	
    	o2_02_re += A2_re;
    	o2_02_im += A2_im;
    	o2_12_re += B2_re;
    	o2_12_im += B2_im;
    	o2_22_re -= A2_im;
    	o2_22_im += A2_re;
    	o2_32_re += B2_im;
    	o2_32_im -= B2_re;
    	
    	
    #else
    	//(check this!!!)
    	o1_00_re += A0_re;
    	o1_00_im += A0_im;
    	o1_10_re += B0_re;
    	o1_10_im += B0_im;
    	o1_20_re -= A0_im;
    	o1_20_im += A0_re;
    	o1_30_re += B0_im;
    	o1_30_im -= B0_re;
    	
    	o1_01_re += A1_re;
    	o1_01_im += A1_im;
    	o1_11_re += B1_re;
    	o1_11_im += B1_im;
    	o1_21_re -= A1_im;
    	o1_21_im += A1_re;
    	o1_31_re += B1_im;
    	o1_31_im -= B1_re;
    	
    	o1_02_re += A2_re;
    	o1_02_im += A2_im;
    	o1_12_re += B2_re;
    	o1_12_im += B2_im;
    	o1_22_re -= A2_im;
    	o1_22_im += A2_re;
    	o1_32_re += B2_im;
    	o1_32_im -= B2_re;
    	
    // Re-use registers here!
    	A0_re = +i00_re-i20_im*mu;
    	A0_im = +i00_im+i20_re*mu;
    	A1_re = +i01_re-i21_im*mu;
    	A1_im = +i01_im+i21_re*mu;
    	A2_re = +i02_re-i22_im*mu;
    	A2_im = +i02_im+i22_re*mu;
    
    	B0_re = +i10_re-i30_im*mu;
    	B0_im = +i10_im+i30_re*mu;
    	B1_re = +i11_re-i31_im*mu;
    	B1_im = +i11_im+i31_re*mu;
    	B2_re = +i12_re-i32_im*mu;
    	B2_im = +i12_im+i32_re*mu;
    
    	i20_re += (-i00_im*mu);
    	i20_im += (+i00_re*mu);
    	i00_re = A0_re;
    	i00_im = A0_im;
    	i21_re += (-i01_im*mu);
    	i21_im += (+i01_re*mu);
    	i01_re = A1_re;
    	i01_im = A1_im;
    	i22_re += (-i02_im*mu);
    	i22_im += (+i02_re*mu);
    	i02_re = A2_re;
    	i02_im = A2_im;
    
    	i30_re += (-i10_im*mu);
    	i30_im += (+i10_re*mu);
    	i10_re = B0_re;
    	i10_im = B0_im;
    	i31_re += (-i11_im*mu);
    	i31_im += (+i11_re*mu);
    	i11_re = B1_re;
    	i11_im = B1_im;
    	i32_re += (-i12_im*mu);
    	i32_im += (+i12_re*mu);
    	i12_re = B2_re;
    	i12_im = B2_im;
    
    
    // project spinor into half spinors
    	a0_re = +i00_re+i20_im;
    	a0_im = +i00_im-i20_re;
    	a1_re = +i01_re+i21_im;
    	a1_im = +i01_im-i21_re;
    	a2_re = +i02_re+i22_im;
    	a2_im = +i02_im-i22_re;
    	
    	b0_re = +i10_re-i30_im;
    	b0_im = +i10_im+i30_re;
    	b1_re = +i11_re-i31_im;
    	b1_im = +i11_im+i31_re;
    	b2_re = +i12_re-i32_im;
    	b2_im = +i12_im+i32_re;
    	
    // multiply row 0
    	A0_re = 0;
    	A0_re += g00_re * a0_re;
    	A0_re -= g00_im * a0_im;
    	A0_re += g01_re * a1_re;
    	A0_re -= g01_im * a1_im;
    	A0_re += g02_re * a2_re;
    	A0_re -= g02_im * a2_im;
    	A0_im = 0;
    	A0_im += g00_re * a0_im;
    	A0_im += g00_im * a0_re;
    	A0_im += g01_re * a1_im;
    	A0_im += g01_im * a1_re;
    	A0_im += g02_re * a2_im;
    	A0_im += g02_im * a2_re;
    	B0_re = 0;
    	B0_re += g00_re * b0_re;
    	B0_re -= g00_im * b0_im;
    	B0_re += g01_re * b1_re;
    	B0_re -= g01_im * b1_im;
    	B0_re += g02_re * b2_re;
    	B0_re -= g02_im * b2_im;
    	B0_im = 0;
    	B0_im += g00_re * b0_im;
    	B0_im += g00_im * b0_re;
    	B0_im += g01_re * b1_im;
    	B0_im += g01_im * b1_re;
    	B0_im += g02_re * b2_im;
    	B0_im += g02_im * b2_re;
    	
    	// multiply row 1
    	A1_re = 0;
    	A1_re += g10_re * a0_re;
    	A1_re -= g10_im * a0_im;
    	A1_re += g11_re * a1_re;
    	A1_re -= g11_im * a1_im;
    	A1_re += g12_re * a2_re;
    	A1_re -= g12_im * a2_im;
    	A1_im = 0;
    	A1_im += g10_re * a0_im;
    	A1_im += g10_im * a0_re;
    	A1_im += g11_re * a1_im;
    	A1_im += g11_im * a1_re;
    	A1_im += g12_re * a2_im;
    	A1_im += g12_im * a2_re;
    	B1_re = 0;
    	B1_re += g10_re * b0_re;
    	B1_re -= g10_im * b0_im;
    	B1_re += g11_re * b1_re;
    	B1_re -= g11_im * b1_im;
    	B1_re += g12_re * b2_re;
    	B1_re -= g12_im * b2_im;
    	B1_im = 0;
    	B1_im += g10_re * b0_im;
    	B1_im += g10_im * b0_re;
    	B1_im += g11_re * b1_im;
    	B1_im += g11_im * b1_re;
    	B1_im += g12_re * b2_im;
    	B1_im += g12_im * b2_re;
    	
    	// multiply row 2
    	A2_re = 0;
    	A2_re += g20_re * a0_re;
    	A2_re -= g20_im * a0_im;
    	A2_re += g21_re * a1_re;
    	A2_re -= g21_im * a1_im;
    	A2_re += g22_re * a2_re;
    	A2_re -= g22_im * a2_im;
    	A2_im = 0;
    	A2_im += g20_re * a0_im;
    	A2_im += g20_im * a0_re;
    	A2_im += g21_re * a1_im;
    	A2_im += g21_im * a1_re;
    	A2_im += g22_re * a2_im;
    	A2_im += g22_im * a2_re;
    	B2_re = 0;
    	B2_re += g20_re * b0_re;
    	B2_re -= g20_im * b0_im;
    	B2_re += g21_re * b1_re;
    	B2_re -= g21_im * b1_im;
    	B2_re += g22_re * b2_re;
    	B2_re -= g22_im * b2_im;
    	B2_im = 0;
    	B2_im += g20_re * b0_im;
    	B2_im += g20_im * b0_re;
    	B2_im += g21_re * b1_im;
    	B2_im += g21_im * b1_re;
    	B2_im += g22_re * b2_im;
    	B2_im += g22_im * b2_re;
    	
    //Store the data:
    	o2_00_re += A0_re;
    	o2_00_im += A0_im;
    	o2_10_re += B0_re;
    	o2_10_im += B0_im;
    	o2_20_re -= A0_im;
    	o2_20_im += A0_re;
    	o2_30_re += B0_im;
    	o2_30_im -= B0_re;
    	
    	o2_01_re += A1_re;
    	o2_01_im += A1_im;
    	o2_11_re += B1_re;
    	o2_11_im += B1_im;
    	o2_21_re -= A1_im;
    	o2_21_im += A1_re;
    	o2_31_re += B1_im;
    	o2_31_im -= B1_re;
    	
    	o2_02_re += A2_re;
    	o2_02_im += A2_im;
    	o2_12_re += B2_re;
    	o2_12_im += B2_im;
    	o2_22_re -= A2_im;
    	o2_22_im += A2_re;
    	o2_32_re += B2_im;
    	o2_32_im -= B2_re;
    	
    	
    #endif
    }
}

{
    // Projector P2+
    // 1 0 i 0 
    // 0 1 0 -i 
    // -i 0 1 0 
    // 0 i 0 1 
    
    int sp_idx = ((x3==0)    ? X+X3X2X1mX2X1 : X-X2X1) >> 1;
    int ga_idx = sp_idx;
    
    // read gauge matrix from device memory
    READ_GAUGE_MATRIX(GAUGE1TEX, 5);
    
    // reconstruct gauge matrix
    RECONSTRUCT_GAUGE_MATRIX(5);
    
    {// read the first flavr spinor from device memory
    	READ_SPINOR(FLAVORSPINORTEX1);
    
    // project spinor into half spinors
    	spinorFloat a0_re = +i00_re-i20_im;
    	spinorFloat a0_im = +i00_im+i20_re;
    	spinorFloat a1_re = +i01_re-i21_im;
    	spinorFloat a1_im = +i01_im+i21_re;
    	spinorFloat a2_re = +i02_re-i22_im;
    	spinorFloat a2_im = +i02_im+i22_re;
    	
    	spinorFloat b0_re = +i10_re+i30_im;
    	spinorFloat b0_im = +i10_im-i30_re;
    	spinorFloat b1_re = +i11_re+i31_im;
    	spinorFloat b1_im = +i11_im-i31_re;
    	spinorFloat b2_re = +i12_re+i32_im;
    	spinorFloat b2_im = +i12_im-i32_re;
    	
    // multiply row 0
    	spinorFloat A0_re = 0;
    	A0_re += gT00_re * a0_re;
    	A0_re -= gT00_im * a0_im;
    	A0_re += gT01_re * a1_re;
    	A0_re -= gT01_im * a1_im;
    	A0_re += gT02_re * a2_re;
    	A0_re -= gT02_im * a2_im;
    	spinorFloat A0_im = 0;
    	A0_im += gT00_re * a0_im;
    	A0_im += gT00_im * a0_re;
    	A0_im += gT01_re * a1_im;
    	A0_im += gT01_im * a1_re;
    	A0_im += gT02_re * a2_im;
    	A0_im += gT02_im * a2_re;
    	spinorFloat B0_re = 0;
    	B0_re += gT00_re * b0_re;
    	B0_re -= gT00_im * b0_im;
    	B0_re += gT01_re * b1_re;
    	B0_re -= gT01_im * b1_im;
    	B0_re += gT02_re * b2_re;
    	B0_re -= gT02_im * b2_im;
    	spinorFloat B0_im = 0;
    	B0_im += gT00_re * b0_im;
    	B0_im += gT00_im * b0_re;
    	B0_im += gT01_re * b1_im;
    	B0_im += gT01_im * b1_re;
    	B0_im += gT02_re * b2_im;
    	B0_im += gT02_im * b2_re;
    	
    	// multiply row 1
    	spinorFloat A1_re = 0;
    	A1_re += gT10_re * a0_re;
    	A1_re -= gT10_im * a0_im;
    	A1_re += gT11_re * a1_re;
    	A1_re -= gT11_im * a1_im;
    	A1_re += gT12_re * a2_re;
    	A1_re -= gT12_im * a2_im;
    	spinorFloat A1_im = 0;
    	A1_im += gT10_re * a0_im;
    	A1_im += gT10_im * a0_re;
    	A1_im += gT11_re * a1_im;
    	A1_im += gT11_im * a1_re;
    	A1_im += gT12_re * a2_im;
    	A1_im += gT12_im * a2_re;
    	spinorFloat B1_re = 0;
    	B1_re += gT10_re * b0_re;
    	B1_re -= gT10_im * b0_im;
    	B1_re += gT11_re * b1_re;
    	B1_re -= gT11_im * b1_im;
    	B1_re += gT12_re * b2_re;
    	B1_re -= gT12_im * b2_im;
    	spinorFloat B1_im = 0;
    	B1_im += gT10_re * b0_im;
    	B1_im += gT10_im * b0_re;
    	B1_im += gT11_re * b1_im;
    	B1_im += gT11_im * b1_re;
    	B1_im += gT12_re * b2_im;
    	B1_im += gT12_im * b2_re;
    	
    	// multiply row 2
    	spinorFloat A2_re = 0;
    	A2_re += gT20_re * a0_re;
    	A2_re -= gT20_im * a0_im;
    	A2_re += gT21_re * a1_re;
    	A2_re -= gT21_im * a1_im;
    	A2_re += gT22_re * a2_re;
    	A2_re -= gT22_im * a2_im;
    	spinorFloat A2_im = 0;
    	A2_im += gT20_re * a0_im;
    	A2_im += gT20_im * a0_re;
    	A2_im += gT21_re * a1_im;
    	A2_im += gT21_im * a1_re;
    	A2_im += gT22_re * a2_im;
    	A2_im += gT22_im * a2_re;
    	spinorFloat B2_re = 0;
    	B2_re += gT20_re * b0_re;
    	B2_re -= gT20_im * b0_im;
    	B2_re += gT21_re * b1_re;
    	B2_re -= gT21_im * b1_im;
    	B2_re += gT22_re * b2_re;
    	B2_re -= gT22_im * b2_im;
    	spinorFloat B2_im = 0;
    	B2_im += gT20_re * b0_im;
    	B2_im += gT20_im * b0_re;
    	B2_im += gT21_re * b1_im;
    	B2_im += gT21_im * b1_re;
    	B2_im += gT22_re * b2_im;
    	B2_im += gT22_im * b2_re;
    	
    #ifndef DSLASH_XPAY
    	o1_00_re += A0_re;
    	o1_00_im += A0_im;
    	o1_10_re += B0_re;
    	o1_10_im += B0_im;
    	o1_20_re += A0_im;
    	o1_20_im -= A0_re;
    	o1_30_re -= B0_im;
    	o1_30_im += B0_re;
    	
    	o1_01_re += A1_re;
    	o1_01_im += A1_im;
    	o1_11_re += B1_re;
    	o1_11_im += B1_im;
    	o1_21_re += A1_im;
    	o1_21_im -= A1_re;
    	o1_31_re -= B1_im;
    	o1_31_im += B1_re;
    	
    	o1_02_re += A2_re;
    	o1_02_im += A2_im;
    	o1_12_re += B2_re;
    	o1_12_im += B2_im;
    	o1_22_re += A2_im;
    	o1_22_im -= A2_re;
    	o1_32_re -= B2_im;
    	o1_32_im += B2_re;
    	
    	
    #else
    	//check this!!!
    	o2_00_re += A0_re;
    	o2_00_im += A0_im;
    	o2_10_re += B0_re;
    	o2_10_im += B0_im;
    	o2_20_re += A0_im;
    	o2_20_im -= A0_re;
    	o2_30_re -= B0_im;
    	o2_30_im += B0_re;
    	
    	o2_01_re += A1_re;
    	o2_01_im += A1_im;
    	o2_11_re += B1_re;
    	o2_11_im += B1_im;
    	o2_21_re += A1_im;
    	o2_21_im -= A1_re;
    	o2_31_re -= B1_im;
    	o2_31_im += B1_re;
    	
    	o2_02_re += A2_re;
    	o2_02_im += A2_im;
    	o2_12_re += B2_re;
    	o2_12_im += B2_im;
    	o2_22_re += A2_im;
    	o2_22_im -= A2_re;
    	o2_32_re -= B2_im;
    	o2_32_im += B2_re;
    	
    // Re-use registers here!
    	A0_re = +i00_re+i20_im*mu;
    	A0_im = +i00_im-i20_re*mu;
    	A1_re = +i01_re+i21_im*mu;
    	A1_im = +i01_im-i21_re*mu;
    	A2_re = +i02_re+i22_im*mu;
    	A2_im = +i02_im-i22_re*mu;
    
    	B0_re = +i10_re+i30_im*mu;
    	B0_im = +i10_im-i30_re*mu;
    	B1_re = +i11_re+i31_im*mu;
    	B1_im = +i11_im-i31_re*mu;
    	B2_re = +i12_re+i32_im*mu;
    	B2_im = +i12_im-i32_re*mu;
    
    	i20_re += (+i00_im*mu);
    	i20_im += (-i00_re*mu);
    	i00_re = A0_re;
    	i00_im = A0_im;
    	i21_re += (+i01_im*mu);
    	i21_im += (-i01_re*mu);
    	i01_re = A1_re;
    	i01_im = A1_im;
    	i22_re += (+i02_im*mu);
    	i22_im += (-i02_re*mu);
    	i02_re = A2_re;
    	i02_im = A2_im;
    
    	i30_re += (+i10_im*mu);
    	i30_im += (-i10_re*mu);
    	i10_re = B0_re;
    	i10_im = B0_im;
    	i31_re += (+i11_im*mu);
    	i31_im += (-i11_re*mu);
    	i11_re = B1_re;
    	i11_im = B1_im;
    	i32_re += (+i12_im*mu);
    	i32_im += (-i12_re*mu);
    	i12_re = B2_re;
    	i12_im = B2_im;
    
    
    // project spinor into half spinors
    	a0_re = +i00_re-i20_im;
    	a0_im = +i00_im+i20_re;
    	a1_re = +i01_re-i21_im;
    	a1_im = +i01_im+i21_re;
    	a2_re = +i02_re-i22_im;
    	a2_im = +i02_im+i22_re;
    	
    	b0_re = +i10_re+i30_im;
    	b0_im = +i10_im-i30_re;
    	b1_re = +i11_re+i31_im;
    	b1_im = +i11_im-i31_re;
    	b2_re = +i12_re+i32_im;
    	b2_im = +i12_im-i32_re;
    	
    // multiply row 0
    	A0_re = 0;
    	A0_re += gT00_re * a0_re;
    	A0_re -= gT00_im * a0_im;
    	A0_re += gT01_re * a1_re;
    	A0_re -= gT01_im * a1_im;
    	A0_re += gT02_re * a2_re;
    	A0_re -= gT02_im * a2_im;
    	A0_im = 0;
    	A0_im += gT00_re * a0_im;
    	A0_im += gT00_im * a0_re;
    	A0_im += gT01_re * a1_im;
    	A0_im += gT01_im * a1_re;
    	A0_im += gT02_re * a2_im;
    	A0_im += gT02_im * a2_re;
    	B0_re = 0;
    	B0_re += gT00_re * b0_re;
    	B0_re -= gT00_im * b0_im;
    	B0_re += gT01_re * b1_re;
    	B0_re -= gT01_im * b1_im;
    	B0_re += gT02_re * b2_re;
    	B0_re -= gT02_im * b2_im;
    	B0_im = 0;
    	B0_im += gT00_re * b0_im;
    	B0_im += gT00_im * b0_re;
    	B0_im += gT01_re * b1_im;
    	B0_im += gT01_im * b1_re;
    	B0_im += gT02_re * b2_im;
    	B0_im += gT02_im * b2_re;
    	
    	// multiply row 1
    	A1_re = 0;
    	A1_re += gT10_re * a0_re;
    	A1_re -= gT10_im * a0_im;
    	A1_re += gT11_re * a1_re;
    	A1_re -= gT11_im * a1_im;
    	A1_re += gT12_re * a2_re;
    	A1_re -= gT12_im * a2_im;
    	A1_im = 0;
    	A1_im += gT10_re * a0_im;
    	A1_im += gT10_im * a0_re;
    	A1_im += gT11_re * a1_im;
    	A1_im += gT11_im * a1_re;
    	A1_im += gT12_re * a2_im;
    	A1_im += gT12_im * a2_re;
    	B1_re = 0;
    	B1_re += gT10_re * b0_re;
    	B1_re -= gT10_im * b0_im;
    	B1_re += gT11_re * b1_re;
    	B1_re -= gT11_im * b1_im;
    	B1_re += gT12_re * b2_re;
    	B1_re -= gT12_im * b2_im;
    	B1_im = 0;
    	B1_im += gT10_re * b0_im;
    	B1_im += gT10_im * b0_re;
    	B1_im += gT11_re * b1_im;
    	B1_im += gT11_im * b1_re;
    	B1_im += gT12_re * b2_im;
    	B1_im += gT12_im * b2_re;
    	
    	// multiply row 2
    	A2_re = 0;
    	A2_re += gT20_re * a0_re;
    	A2_re -= gT20_im * a0_im;
    	A2_re += gT21_re * a1_re;
    	A2_re -= gT21_im * a1_im;
    	A2_re += gT22_re * a2_re;
    	A2_re -= gT22_im * a2_im;
    	A2_im = 0;
    	A2_im += gT20_re * a0_im;
    	A2_im += gT20_im * a0_re;
    	A2_im += gT21_re * a1_im;
    	A2_im += gT21_im * a1_re;
    	A2_im += gT22_re * a2_im;
    	A2_im += gT22_im * a2_re;
    	B2_re = 0;
    	B2_re += gT20_re * b0_re;
    	B2_re -= gT20_im * b0_im;
    	B2_re += gT21_re * b1_re;
    	B2_re -= gT21_im * b1_im;
    	B2_re += gT22_re * b2_re;
    	B2_re -= gT22_im * b2_im;
    	B2_im = 0;
    	B2_im += gT20_re * b0_im;
    	B2_im += gT20_im * b0_re;
    	B2_im += gT21_re * b1_im;
    	B2_im += gT21_im * b1_re;
    	B2_im += gT22_re * b2_im;
    	B2_im += gT22_im * b2_re;
    	
    //Store the data:
    	o1_00_re += A0_re;
    	o1_00_im += A0_im;
    	o1_10_re += B0_re;
    	o1_10_im += B0_im;
    	o1_20_re += A0_im;
    	o1_20_im -= A0_re;
    	o1_30_re -= B0_im;
    	o1_30_im += B0_re;
    	
    	o1_01_re += A1_re;
    	o1_01_im += A1_im;
    	o1_11_re += B1_re;
    	o1_11_im += B1_im;
    	o1_21_re += A1_im;
    	o1_21_im -= A1_re;
    	o1_31_re -= B1_im;
    	o1_31_im += B1_re;
    	
    	o1_02_re += A2_re;
    	o1_02_im += A2_im;
    	o1_12_re += B2_re;
    	o1_12_im += B2_im;
    	o1_22_re += A2_im;
    	o1_22_im -= A2_re;
    	o1_32_re -= B2_im;
    	o1_32_im += B2_re;
    	
    	
    #endif
    }
    {// read the second flavorr spinor from device memory
    	READ_SPINOR(FLAVORSPINORTEX2);
    
    // project spinor into half spinors
    	spinorFloat a0_re = +i00_re-i20_im;
    	spinorFloat a0_im = +i00_im+i20_re;
    	spinorFloat a1_re = +i01_re-i21_im;
    	spinorFloat a1_im = +i01_im+i21_re;
    	spinorFloat a2_re = +i02_re-i22_im;
    	spinorFloat a2_im = +i02_im+i22_re;
    	
    	spinorFloat b0_re = +i10_re+i30_im;
    	spinorFloat b0_im = +i10_im-i30_re;
    	spinorFloat b1_re = +i11_re+i31_im;
    	spinorFloat b1_im = +i11_im-i31_re;
    	spinorFloat b2_re = +i12_re+i32_im;
    	spinorFloat b2_im = +i12_im-i32_re;
    	
    // multiply row 0
    	spinorFloat A0_re = 0;
    	A0_re += gT00_re * a0_re;
    	A0_re -= gT00_im * a0_im;
    	A0_re += gT01_re * a1_re;
    	A0_re -= gT01_im * a1_im;
    	A0_re += gT02_re * a2_re;
    	A0_re -= gT02_im * a2_im;
    	spinorFloat A0_im = 0;
    	A0_im += gT00_re * a0_im;
    	A0_im += gT00_im * a0_re;
    	A0_im += gT01_re * a1_im;
    	A0_im += gT01_im * a1_re;
    	A0_im += gT02_re * a2_im;
    	A0_im += gT02_im * a2_re;
    	spinorFloat B0_re = 0;
    	B0_re += gT00_re * b0_re;
    	B0_re -= gT00_im * b0_im;
    	B0_re += gT01_re * b1_re;
    	B0_re -= gT01_im * b1_im;
    	B0_re += gT02_re * b2_re;
    	B0_re -= gT02_im * b2_im;
    	spinorFloat B0_im = 0;
    	B0_im += gT00_re * b0_im;
    	B0_im += gT00_im * b0_re;
    	B0_im += gT01_re * b1_im;
    	B0_im += gT01_im * b1_re;
    	B0_im += gT02_re * b2_im;
    	B0_im += gT02_im * b2_re;
    	
    	// multiply row 1
    	spinorFloat A1_re = 0;
    	A1_re += gT10_re * a0_re;
    	A1_re -= gT10_im * a0_im;
    	A1_re += gT11_re * a1_re;
    	A1_re -= gT11_im * a1_im;
    	A1_re += gT12_re * a2_re;
    	A1_re -= gT12_im * a2_im;
    	spinorFloat A1_im = 0;
    	A1_im += gT10_re * a0_im;
    	A1_im += gT10_im * a0_re;
    	A1_im += gT11_re * a1_im;
    	A1_im += gT11_im * a1_re;
    	A1_im += gT12_re * a2_im;
    	A1_im += gT12_im * a2_re;
    	spinorFloat B1_re = 0;
    	B1_re += gT10_re * b0_re;
    	B1_re -= gT10_im * b0_im;
    	B1_re += gT11_re * b1_re;
    	B1_re -= gT11_im * b1_im;
    	B1_re += gT12_re * b2_re;
    	B1_re -= gT12_im * b2_im;
    	spinorFloat B1_im = 0;
    	B1_im += gT10_re * b0_im;
    	B1_im += gT10_im * b0_re;
    	B1_im += gT11_re * b1_im;
    	B1_im += gT11_im * b1_re;
    	B1_im += gT12_re * b2_im;
    	B1_im += gT12_im * b2_re;
    	
    	// multiply row 2
    	spinorFloat A2_re = 0;
    	A2_re += gT20_re * a0_re;
    	A2_re -= gT20_im * a0_im;
    	A2_re += gT21_re * a1_re;
    	A2_re -= gT21_im * a1_im;
    	A2_re += gT22_re * a2_re;
    	A2_re -= gT22_im * a2_im;
    	spinorFloat A2_im = 0;
    	A2_im += gT20_re * a0_im;
    	A2_im += gT20_im * a0_re;
    	A2_im += gT21_re * a1_im;
    	A2_im += gT21_im * a1_re;
    	A2_im += gT22_re * a2_im;
    	A2_im += gT22_im * a2_re;
    	spinorFloat B2_re = 0;
    	B2_re += gT20_re * b0_re;
    	B2_re -= gT20_im * b0_im;
    	B2_re += gT21_re * b1_re;
    	B2_re -= gT21_im * b1_im;
    	B2_re += gT22_re * b2_re;
    	B2_re -= gT22_im * b2_im;
    	spinorFloat B2_im = 0;
    	B2_im += gT20_re * b0_im;
    	B2_im += gT20_im * b0_re;
    	B2_im += gT21_re * b1_im;
    	B2_im += gT21_im * b1_re;
    	B2_im += gT22_re * b2_im;
    	B2_im += gT22_im * b2_re;
    	
    #ifndef DSLASH_XPAY
    	o2_00_re += A0_re;
    	o2_00_im += A0_im;
    	o2_10_re += B0_re;
    	o2_10_im += B0_im;
    	o2_20_re += A0_im;
    	o2_20_im -= A0_re;
    	o2_30_re -= B0_im;
    	o2_30_im += B0_re;
    	
    	o2_01_re += A1_re;
    	o2_01_im += A1_im;
    	o2_11_re += B1_re;
    	o2_11_im += B1_im;
    	o2_21_re += A1_im;
    	o2_21_im -= A1_re;
    	o2_31_re -= B1_im;
    	o2_31_im += B1_re;
    	
    	o2_02_re += A2_re;
    	o2_02_im += A2_im;
    	o2_12_re += B2_re;
    	o2_12_im += B2_im;
    	o2_22_re += A2_im;
    	o2_22_im -= A2_re;
    	o2_32_re -= B2_im;
    	o2_32_im += B2_re;
    	
    	
    #else
    	//(check this!!!)
    	o1_00_re += A0_re;
    	o1_00_im += A0_im;
    	o1_10_re += B0_re;
    	o1_10_im += B0_im;
    	o1_20_re += A0_im;
    	o1_20_im -= A0_re;
    	o1_30_re -= B0_im;
    	o1_30_im += B0_re;
    	
    	o1_01_re += A1_re;
    	o1_01_im += A1_im;
    	o1_11_re += B1_re;
    	o1_11_im += B1_im;
    	o1_21_re += A1_im;
    	o1_21_im -= A1_re;
    	o1_31_re -= B1_im;
    	o1_31_im += B1_re;
    	
    	o1_02_re += A2_re;
    	o1_02_im += A2_im;
    	o1_12_re += B2_re;
    	o1_12_im += B2_im;
    	o1_22_re += A2_im;
    	o1_22_im -= A2_re;
    	o1_32_re -= B2_im;
    	o1_32_im += B2_re;
    	
    // Re-use registers here!
    	A0_re = +i00_re-i20_im*mu;
    	A0_im = +i00_im+i20_re*mu;
    	A1_re = +i01_re-i21_im*mu;
    	A1_im = +i01_im+i21_re*mu;
    	A2_re = +i02_re-i22_im*mu;
    	A2_im = +i02_im+i22_re*mu;
    
    	B0_re = +i10_re-i30_im*mu;
    	B0_im = +i10_im+i30_re*mu;
    	B1_re = +i11_re-i31_im*mu;
    	B1_im = +i11_im+i31_re*mu;
    	B2_re = +i12_re-i32_im*mu;
    	B2_im = +i12_im+i32_re*mu;
    
    	i20_re += (-i00_im*mu);
    	i20_im += (+i00_re*mu);
    	i00_re = A0_re;
    	i00_im = A0_im;
    	i21_re += (-i01_im*mu);
    	i21_im += (+i01_re*mu);
    	i01_re = A1_re;
    	i01_im = A1_im;
    	i22_re += (-i02_im*mu);
    	i22_im += (+i02_re*mu);
    	i02_re = A2_re;
    	i02_im = A2_im;
    
    	i30_re += (-i10_im*mu);
    	i30_im += (+i10_re*mu);
    	i10_re = B0_re;
    	i10_im = B0_im;
    	i31_re += (-i11_im*mu);
    	i31_im += (+i11_re*mu);
    	i11_re = B1_re;
    	i11_im = B1_im;
    	i32_re += (-i12_im*mu);
    	i32_im += (+i12_re*mu);
    	i12_re = B2_re;
    	i12_im = B2_im;
    
    
    // project spinor into half spinors
    	a0_re = +i00_re-i20_im;
    	a0_im = +i00_im+i20_re;
    	a1_re = +i01_re-i21_im;
    	a1_im = +i01_im+i21_re;
    	a2_re = +i02_re-i22_im;
    	a2_im = +i02_im+i22_re;
    	
    	b0_re = +i10_re+i30_im;
    	b0_im = +i10_im-i30_re;
    	b1_re = +i11_re+i31_im;
    	b1_im = +i11_im-i31_re;
    	b2_re = +i12_re+i32_im;
    	b2_im = +i12_im-i32_re;
    	
    // multiply row 0
    	A0_re = 0;
    	A0_re += gT00_re * a0_re;
    	A0_re -= gT00_im * a0_im;
    	A0_re += gT01_re * a1_re;
    	A0_re -= gT01_im * a1_im;
    	A0_re += gT02_re * a2_re;
    	A0_re -= gT02_im * a2_im;
    	A0_im = 0;
    	A0_im += gT00_re * a0_im;
    	A0_im += gT00_im * a0_re;
    	A0_im += gT01_re * a1_im;
    	A0_im += gT01_im * a1_re;
    	A0_im += gT02_re * a2_im;
    	A0_im += gT02_im * a2_re;
    	B0_re = 0;
    	B0_re += gT00_re * b0_re;
    	B0_re -= gT00_im * b0_im;
    	B0_re += gT01_re * b1_re;
    	B0_re -= gT01_im * b1_im;
    	B0_re += gT02_re * b2_re;
    	B0_re -= gT02_im * b2_im;
    	B0_im = 0;
    	B0_im += gT00_re * b0_im;
    	B0_im += gT00_im * b0_re;
    	B0_im += gT01_re * b1_im;
    	B0_im += gT01_im * b1_re;
    	B0_im += gT02_re * b2_im;
    	B0_im += gT02_im * b2_re;
    	
    	// multiply row 1
    	A1_re = 0;
    	A1_re += gT10_re * a0_re;
    	A1_re -= gT10_im * a0_im;
    	A1_re += gT11_re * a1_re;
    	A1_re -= gT11_im * a1_im;
    	A1_re += gT12_re * a2_re;
    	A1_re -= gT12_im * a2_im;
    	A1_im = 0;
    	A1_im += gT10_re * a0_im;
    	A1_im += gT10_im * a0_re;
    	A1_im += gT11_re * a1_im;
    	A1_im += gT11_im * a1_re;
    	A1_im += gT12_re * a2_im;
    	A1_im += gT12_im * a2_re;
    	B1_re = 0;
    	B1_re += gT10_re * b0_re;
    	B1_re -= gT10_im * b0_im;
    	B1_re += gT11_re * b1_re;
    	B1_re -= gT11_im * b1_im;
    	B1_re += gT12_re * b2_re;
    	B1_re -= gT12_im * b2_im;
    	B1_im = 0;
    	B1_im += gT10_re * b0_im;
    	B1_im += gT10_im * b0_re;
    	B1_im += gT11_re * b1_im;
    	B1_im += gT11_im * b1_re;
    	B1_im += gT12_re * b2_im;
    	B1_im += gT12_im * b2_re;
    	
    	// multiply row 2
    	A2_re = 0;
    	A2_re += gT20_re * a0_re;
    	A2_re -= gT20_im * a0_im;
    	A2_re += gT21_re * a1_re;
    	A2_re -= gT21_im * a1_im;
    	A2_re += gT22_re * a2_re;
    	A2_re -= gT22_im * a2_im;
    	A2_im = 0;
    	A2_im += gT20_re * a0_im;
    	A2_im += gT20_im * a0_re;
    	A2_im += gT21_re * a1_im;
    	A2_im += gT21_im * a1_re;
    	A2_im += gT22_re * a2_im;
    	A2_im += gT22_im * a2_re;
    	B2_re = 0;
    	B2_re += gT20_re * b0_re;
    	B2_re -= gT20_im * b0_im;
    	B2_re += gT21_re * b1_re;
    	B2_re -= gT21_im * b1_im;
    	B2_re += gT22_re * b2_re;
    	B2_re -= gT22_im * b2_im;
    	B2_im = 0;
    	B2_im += gT20_re * b0_im;
    	B2_im += gT20_im * b0_re;
    	B2_im += gT21_re * b1_im;
    	B2_im += gT21_im * b1_re;
    	B2_im += gT22_re * b2_im;
    	B2_im += gT22_im * b2_re;
    	
    //Store the data:
    	o2_00_re += A0_re;
    	o2_00_im += A0_im;
    	o2_10_re += B0_re;
    	o2_10_im += B0_im;
    	o2_20_re += A0_im;
    	o2_20_im -= A0_re;
    	o2_30_re -= B0_im;
    	o2_30_im += B0_re;
    	
    	o2_01_re += A1_re;
    	o2_01_im += A1_im;
    	o2_11_re += B1_re;
    	o2_11_im += B1_im;
    	o2_21_re += A1_im;
    	o2_21_im -= A1_re;
    	o2_31_re -= B1_im;
    	o2_31_im += B1_re;
    	
    	o2_02_re += A2_re;
    	o2_02_im += A2_im;
    	o2_12_re += B2_re;
    	o2_12_im += B2_im;
    	o2_22_re += A2_im;
    	o2_22_im -= A2_re;
    	o2_32_re -= B2_im;
    	o2_32_im += B2_re;
    	
    	
    #endif
    }
}

{
    // Projector P3-
    // 0 0 0 0 
    // 0 0 0 0 
    // 0 0 2 0 
    // 0 0 0 2 
    
    int sp_idx = ((x4==X4m1) ? X-X4X3X2X1mX3X2X1 : X+X3X2X1) >> 1;
    int ga_idx = sid;
    
    if (gauge_fixed && ga_idx < X4X3X2X1hmX3X2X1h) {
        {// read the first flavr spinor from device memory
        	#ifndef DSLASH_XPAY
        		READ_SPINOR(FLAVORSPINORTEX1);
        	#else
        		READ_SPINOR_DOWN(FLAVORSPINORTEX1);
        	#endif
        
        // project spinor into half spinors
        	spinorFloat a0_re = +2*i20_re;
        	spinorFloat a0_im = +2*i20_im;
        	spinorFloat a1_re = +2*i21_re;
        	spinorFloat a1_im = +2*i21_im;
        	spinorFloat a2_re = +2*i22_re;
        	spinorFloat a2_im = +2*i22_im;
        	
        	spinorFloat b0_re = +2*i30_re;
        	spinorFloat b0_im = +2*i30_im;
        	spinorFloat b1_re = +2*i31_re;
        	spinorFloat b1_im = +2*i31_im;
        	spinorFloat b2_re = +2*i32_re;
        	spinorFloat b2_im = +2*i32_im;
        	
        // identity gauge matrix
        	spinorFloat A0_re = a0_re; 	spinorFloat A0_im = a0_im;
        	spinorFloat B0_re = b0_re; 	spinorFloat B0_im = b0_im;
        	spinorFloat A1_re = a1_re; 	spinorFloat A1_im = a1_im;
        	spinorFloat B1_re = b1_re; 	spinorFloat B1_im = b1_im;
        	spinorFloat A2_re = a2_re; 	spinorFloat A2_im = a2_im;
        	spinorFloat B2_re = b2_re; 	spinorFloat B2_im = b2_im;
        	
        #ifndef DSLASH_XPAY
        	o1_20_re += A0_re;
        	o1_20_im += A0_im;
        	o1_30_re += B0_re;
        	o1_30_im += B0_im;
        	
        	o1_21_re += A1_re;
        	o1_21_im += A1_im;
        	o1_31_re += B1_re;
        	o1_31_im += B1_im;
        	
        	o1_22_re += A2_re;
        	o1_22_im += A2_im;
        	o1_32_re += B2_re;
        	o1_32_im += B2_im;
        	
        	
        #else
        	//check this!!!
        	o2_20_re += A0_re;
        	o2_20_im += A0_im;
        	o2_30_re += B0_re;
        	o2_30_im += B0_im;
        	
        	o2_21_re += A1_re;
        	o2_21_im += A1_im;
        	o2_31_re += B1_re;
        	o2_31_im += B1_im;
        	
        	o2_22_re += A2_re;
        	o2_22_im += A2_im;
        	o2_32_re += B2_re;
        	o2_32_im += B2_im;
        	
        	i20_re += (+i00_im*mu);
        	i20_im += (-i00_re*mu);
        	i21_re += (+i01_im*mu);
        	i21_im += (-i01_re*mu);
        	i22_re += (+i02_im*mu);
        	i22_im += (-i02_re*mu);
        
        	i30_re += (+i10_im*mu);
        	i30_im += (-i10_re*mu);
        	i31_re += (+i11_im*mu);
        	i31_im += (-i11_re*mu);
        	i32_re += (+i12_im*mu);
        	i32_im += (-i12_re*mu);
        
        
        // project spinor into half spinors
        	a0_re = +2*i20_re;
        	a0_im = +2*i20_im;
        	a1_re = +2*i21_re;
        	a1_im = +2*i21_im;
        	a2_re = +2*i22_re;
        	a2_im = +2*i22_im;
        	
        	b0_re = +2*i30_re;
        	b0_im = +2*i30_im;
        	b1_re = +2*i31_re;
        	b1_im = +2*i31_im;
        	b2_re = +2*i32_re;
        	b2_im = +2*i32_im;
        	
        // identity gauge matrix
        	A0_re = a0_re; 	A0_im = a0_im;
        	B0_re = b0_re; 	B0_im = b0_im;
        	A1_re = a1_re; 	A1_im = a1_im;
        	B1_re = b1_re; 	B1_im = b1_im;
        	A2_re = a2_re; 	A2_im = a2_im;
        	B2_re = b2_re; 	B2_im = b2_im;
        	
        //Store the data:
        	o1_20_re += A0_re;
        	o1_20_im += A0_im;
        	o1_30_re += B0_re;
        	o1_30_im += B0_im;
        	
        	o1_21_re += A1_re;
        	o1_21_im += A1_im;
        	o1_31_re += B1_re;
        	o1_31_im += B1_im;
        	
        	o1_22_re += A2_re;
        	o1_22_im += A2_im;
        	o1_32_re += B2_re;
        	o1_32_im += B2_im;
        	
        	
        #endif
        }
        {// read the second flavorr spinor from device memory
        	#ifndef DSLASH_XPAY
        		READ_SPINOR(FLAVORSPINORTEX2);
        	#else
        		READ_SPINOR_DOWN(FLAVORSPINORTEX2);
        	#endif
        
        // project spinor into half spinors
        	spinorFloat a0_re = +2*i20_re;
        	spinorFloat a0_im = +2*i20_im;
        	spinorFloat a1_re = +2*i21_re;
        	spinorFloat a1_im = +2*i21_im;
        	spinorFloat a2_re = +2*i22_re;
        	spinorFloat a2_im = +2*i22_im;
        	
        	spinorFloat b0_re = +2*i30_re;
        	spinorFloat b0_im = +2*i30_im;
        	spinorFloat b1_re = +2*i31_re;
        	spinorFloat b1_im = +2*i31_im;
        	spinorFloat b2_re = +2*i32_re;
        	spinorFloat b2_im = +2*i32_im;
        	
        // identity gauge matrix
        	spinorFloat A0_re = a0_re; 	spinorFloat A0_im = a0_im;
        	spinorFloat B0_re = b0_re; 	spinorFloat B0_im = b0_im;
        	spinorFloat A1_re = a1_re; 	spinorFloat A1_im = a1_im;
        	spinorFloat B1_re = b1_re; 	spinorFloat B1_im = b1_im;
        	spinorFloat A2_re = a2_re; 	spinorFloat A2_im = a2_im;
        	spinorFloat B2_re = b2_re; 	spinorFloat B2_im = b2_im;
        	
        #ifndef DSLASH_XPAY
        	o2_20_re += A0_re;
        	o2_20_im += A0_im;
        	o2_30_re += B0_re;
        	o2_30_im += B0_im;
        	
        	o2_21_re += A1_re;
        	o2_21_im += A1_im;
        	o2_31_re += B1_re;
        	o2_31_im += B1_im;
        	
        	o2_22_re += A2_re;
        	o2_22_im += A2_im;
        	o2_32_re += B2_re;
        	o2_32_im += B2_im;
        	
        	
        #else
        	//(check this!!!)
        	o1_20_re += A0_re;
        	o1_20_im += A0_im;
        	o1_30_re += B0_re;
        	o1_30_im += B0_im;
        	
        	o1_21_re += A1_re;
        	o1_21_im += A1_im;
        	o1_31_re += B1_re;
        	o1_31_im += B1_im;
        	
        	o1_22_re += A2_re;
        	o1_22_im += A2_im;
        	o1_32_re += B2_re;
        	o1_32_im += B2_im;
        	
        	i20_re += (-i00_im*mu);
        	i20_im += (+i00_re*mu);
        	i21_re += (-i01_im*mu);
        	i21_im += (+i01_re*mu);
        	i22_re += (-i02_im*mu);
        	i22_im += (+i02_re*mu);
        
        	i30_re += (-i10_im*mu);
        	i30_im += (+i10_re*mu);
        	i31_re += (-i11_im*mu);
        	i31_im += (+i11_re*mu);
        	i32_re += (-i12_im*mu);
        	i32_im += (+i12_re*mu);
        
        
        // project spinor into half spinors
        	a0_re = +2*i20_re;
        	a0_im = +2*i20_im;
        	a1_re = +2*i21_re;
        	a1_im = +2*i21_im;
        	a2_re = +2*i22_re;
        	a2_im = +2*i22_im;
        	
        	b0_re = +2*i30_re;
        	b0_im = +2*i30_im;
        	b1_re = +2*i31_re;
        	b1_im = +2*i31_im;
        	b2_re = +2*i32_re;
        	b2_im = +2*i32_im;
        	
        // identity gauge matrix
        	A0_re = a0_re; 	A0_im = a0_im;
        	B0_re = b0_re; 	B0_im = b0_im;
        	A1_re = a1_re; 	A1_im = a1_im;
        	B1_re = b1_re; 	B1_im = b1_im;
        	A2_re = a2_re; 	A2_im = a2_im;
        	B2_re = b2_re; 	B2_im = b2_im;
        	
        //Store the data:
        	o2_20_re += A0_re;
        	o2_20_im += A0_im;
        	o2_30_re += B0_re;
        	o2_30_im += B0_im;
        	
        	o2_21_re += A1_re;
        	o2_21_im += A1_im;
        	o2_31_re += B1_re;
        	o2_31_im += B1_im;
        	
        	o2_22_re += A2_re;
        	o2_22_im += A2_im;
        	o2_32_re += B2_re;
        	o2_32_im += B2_im;
        	
        	
        #endif
        }
    }
    else {
        // read gauge matrix from device memory
        READ_GAUGE_MATRIX(GAUGE0TEX, 6);
        
        // reconstruct gauge matrix
        RECONSTRUCT_GAUGE_MATRIX(6);
        
        {// read the first flavr spinor from device memory
        	#ifndef DSLASH_XPAY
        		READ_SPINOR(FLAVORSPINORTEX1);
        	#else
        		READ_SPINOR_DOWN(FLAVORSPINORTEX1);
        	#endif
        
        // project spinor into half spinors
        	spinorFloat a0_re = +2*i20_re;
        	spinorFloat a0_im = +2*i20_im;
        	spinorFloat a1_re = +2*i21_re;
        	spinorFloat a1_im = +2*i21_im;
        	spinorFloat a2_re = +2*i22_re;
        	spinorFloat a2_im = +2*i22_im;
        	
        	spinorFloat b0_re = +2*i30_re;
        	spinorFloat b0_im = +2*i30_im;
        	spinorFloat b1_re = +2*i31_re;
        	spinorFloat b1_im = +2*i31_im;
        	spinorFloat b2_re = +2*i32_re;
        	spinorFloat b2_im = +2*i32_im;
        	
        // multiply row 0
        	spinorFloat A0_re = 0;
        	A0_re += g00_re * a0_re;
        	A0_re -= g00_im * a0_im;
        	A0_re += g01_re * a1_re;
        	A0_re -= g01_im * a1_im;
        	A0_re += g02_re * a2_re;
        	A0_re -= g02_im * a2_im;
        	spinorFloat A0_im = 0;
        	A0_im += g00_re * a0_im;
        	A0_im += g00_im * a0_re;
        	A0_im += g01_re * a1_im;
        	A0_im += g01_im * a1_re;
        	A0_im += g02_re * a2_im;
        	A0_im += g02_im * a2_re;
        	spinorFloat B0_re = 0;
        	B0_re += g00_re * b0_re;
        	B0_re -= g00_im * b0_im;
        	B0_re += g01_re * b1_re;
        	B0_re -= g01_im * b1_im;
        	B0_re += g02_re * b2_re;
        	B0_re -= g02_im * b2_im;
        	spinorFloat B0_im = 0;
        	B0_im += g00_re * b0_im;
        	B0_im += g00_im * b0_re;
        	B0_im += g01_re * b1_im;
        	B0_im += g01_im * b1_re;
        	B0_im += g02_re * b2_im;
        	B0_im += g02_im * b2_re;
        	
        	// multiply row 1
        	spinorFloat A1_re = 0;
        	A1_re += g10_re * a0_re;
        	A1_re -= g10_im * a0_im;
        	A1_re += g11_re * a1_re;
        	A1_re -= g11_im * a1_im;
        	A1_re += g12_re * a2_re;
        	A1_re -= g12_im * a2_im;
        	spinorFloat A1_im = 0;
        	A1_im += g10_re * a0_im;
        	A1_im += g10_im * a0_re;
        	A1_im += g11_re * a1_im;
        	A1_im += g11_im * a1_re;
        	A1_im += g12_re * a2_im;
        	A1_im += g12_im * a2_re;
        	spinorFloat B1_re = 0;
        	B1_re += g10_re * b0_re;
        	B1_re -= g10_im * b0_im;
        	B1_re += g11_re * b1_re;
        	B1_re -= g11_im * b1_im;
        	B1_re += g12_re * b2_re;
        	B1_re -= g12_im * b2_im;
        	spinorFloat B1_im = 0;
        	B1_im += g10_re * b0_im;
        	B1_im += g10_im * b0_re;
        	B1_im += g11_re * b1_im;
        	B1_im += g11_im * b1_re;
        	B1_im += g12_re * b2_im;
        	B1_im += g12_im * b2_re;
        	
        	// multiply row 2
        	spinorFloat A2_re = 0;
        	A2_re += g20_re * a0_re;
        	A2_re -= g20_im * a0_im;
        	A2_re += g21_re * a1_re;
        	A2_re -= g21_im * a1_im;
        	A2_re += g22_re * a2_re;
        	A2_re -= g22_im * a2_im;
        	spinorFloat A2_im = 0;
        	A2_im += g20_re * a0_im;
        	A2_im += g20_im * a0_re;
        	A2_im += g21_re * a1_im;
        	A2_im += g21_im * a1_re;
        	A2_im += g22_re * a2_im;
        	A2_im += g22_im * a2_re;
        	spinorFloat B2_re = 0;
        	B2_re += g20_re * b0_re;
        	B2_re -= g20_im * b0_im;
        	B2_re += g21_re * b1_re;
        	B2_re -= g21_im * b1_im;
        	B2_re += g22_re * b2_re;
        	B2_re -= g22_im * b2_im;
        	spinorFloat B2_im = 0;
        	B2_im += g20_re * b0_im;
        	B2_im += g20_im * b0_re;
        	B2_im += g21_re * b1_im;
        	B2_im += g21_im * b1_re;
        	B2_im += g22_re * b2_im;
        	B2_im += g22_im * b2_re;
        	
        #ifndef DSLASH_XPAY
        	o1_20_re += A0_re;
        	o1_20_im += A0_im;
        	o1_30_re += B0_re;
        	o1_30_im += B0_im;
        	
        	o1_21_re += A1_re;
        	o1_21_im += A1_im;
        	o1_31_re += B1_re;
        	o1_31_im += B1_im;
        	
        	o1_22_re += A2_re;
        	o1_22_im += A2_im;
        	o1_32_re += B2_re;
        	o1_32_im += B2_im;
        	
        	
        #else
        	//check this!!!
        	o2_20_re += A0_re;
        	o2_20_im += A0_im;
        	o2_30_re += B0_re;
        	o2_30_im += B0_im;
        	
        	o2_21_re += A1_re;
        	o2_21_im += A1_im;
        	o2_31_re += B1_re;
        	o2_31_im += B1_im;
        	
        	o2_22_re += A2_re;
        	o2_22_im += A2_im;
        	o2_32_re += B2_re;
        	o2_32_im += B2_im;
        	
        	i20_re += (+i00_im*mu);
        	i20_im += (-i00_re*mu);
        	i21_re += (+i01_im*mu);
        	i21_im += (-i01_re*mu);
        	i22_re += (+i02_im*mu);
        	i22_im += (-i02_re*mu);
        
        	i30_re += (+i10_im*mu);
        	i30_im += (-i10_re*mu);
        	i31_re += (+i11_im*mu);
        	i31_im += (-i11_re*mu);
        	i32_re += (+i12_im*mu);
        	i32_im += (-i12_re*mu);
        
        
        // project spinor into half spinors
        	a0_re = +2*i20_re;
        	a0_im = +2*i20_im;
        	a1_re = +2*i21_re;
        	a1_im = +2*i21_im;
        	a2_re = +2*i22_re;
        	a2_im = +2*i22_im;
        	
        	b0_re = +2*i30_re;
        	b0_im = +2*i30_im;
        	b1_re = +2*i31_re;
        	b1_im = +2*i31_im;
        	b2_re = +2*i32_re;
        	b2_im = +2*i32_im;
        	
        // multiply row 0
        	A0_re = 0;
        	A0_re += g00_re * a0_re;
        	A0_re -= g00_im * a0_im;
        	A0_re += g01_re * a1_re;
        	A0_re -= g01_im * a1_im;
        	A0_re += g02_re * a2_re;
        	A0_re -= g02_im * a2_im;
        	A0_im = 0;
        	A0_im += g00_re * a0_im;
        	A0_im += g00_im * a0_re;
        	A0_im += g01_re * a1_im;
        	A0_im += g01_im * a1_re;
        	A0_im += g02_re * a2_im;
        	A0_im += g02_im * a2_re;
        	B0_re = 0;
        	B0_re += g00_re * b0_re;
        	B0_re -= g00_im * b0_im;
        	B0_re += g01_re * b1_re;
        	B0_re -= g01_im * b1_im;
        	B0_re += g02_re * b2_re;
        	B0_re -= g02_im * b2_im;
        	B0_im = 0;
        	B0_im += g00_re * b0_im;
        	B0_im += g00_im * b0_re;
        	B0_im += g01_re * b1_im;
        	B0_im += g01_im * b1_re;
        	B0_im += g02_re * b2_im;
        	B0_im += g02_im * b2_re;
        	
        	// multiply row 1
        	A1_re = 0;
        	A1_re += g10_re * a0_re;
        	A1_re -= g10_im * a0_im;
        	A1_re += g11_re * a1_re;
        	A1_re -= g11_im * a1_im;
        	A1_re += g12_re * a2_re;
        	A1_re -= g12_im * a2_im;
        	A1_im = 0;
        	A1_im += g10_re * a0_im;
        	A1_im += g10_im * a0_re;
        	A1_im += g11_re * a1_im;
        	A1_im += g11_im * a1_re;
        	A1_im += g12_re * a2_im;
        	A1_im += g12_im * a2_re;
        	B1_re = 0;
        	B1_re += g10_re * b0_re;
        	B1_re -= g10_im * b0_im;
        	B1_re += g11_re * b1_re;
        	B1_re -= g11_im * b1_im;
        	B1_re += g12_re * b2_re;
        	B1_re -= g12_im * b2_im;
        	B1_im = 0;
        	B1_im += g10_re * b0_im;
        	B1_im += g10_im * b0_re;
        	B1_im += g11_re * b1_im;
        	B1_im += g11_im * b1_re;
        	B1_im += g12_re * b2_im;
        	B1_im += g12_im * b2_re;
        	
        	// multiply row 2
        	A2_re = 0;
        	A2_re += g20_re * a0_re;
        	A2_re -= g20_im * a0_im;
        	A2_re += g21_re * a1_re;
        	A2_re -= g21_im * a1_im;
        	A2_re += g22_re * a2_re;
        	A2_re -= g22_im * a2_im;
        	A2_im = 0;
        	A2_im += g20_re * a0_im;
        	A2_im += g20_im * a0_re;
        	A2_im += g21_re * a1_im;
        	A2_im += g21_im * a1_re;
        	A2_im += g22_re * a2_im;
        	A2_im += g22_im * a2_re;
        	B2_re = 0;
        	B2_re += g20_re * b0_re;
        	B2_re -= g20_im * b0_im;
        	B2_re += g21_re * b1_re;
        	B2_re -= g21_im * b1_im;
        	B2_re += g22_re * b2_re;
        	B2_re -= g22_im * b2_im;
        	B2_im = 0;
        	B2_im += g20_re * b0_im;
        	B2_im += g20_im * b0_re;
        	B2_im += g21_re * b1_im;
        	B2_im += g21_im * b1_re;
        	B2_im += g22_re * b2_im;
        	B2_im += g22_im * b2_re;
        	
        //Store the data:
        	o1_20_re += A0_re;
        	o1_20_im += A0_im;
        	o1_30_re += B0_re;
        	o1_30_im += B0_im;
        	
        	o1_21_re += A1_re;
        	o1_21_im += A1_im;
        	o1_31_re += B1_re;
        	o1_31_im += B1_im;
        	
        	o1_22_re += A2_re;
        	o1_22_im += A2_im;
        	o1_32_re += B2_re;
        	o1_32_im += B2_im;
        	
        	
        #endif
        }
        {// read the second flavorr spinor from device memory
        	#ifndef DSLASH_XPAY
        		READ_SPINOR(FLAVORSPINORTEX2);
        	#else
        		READ_SPINOR_DOWN(FLAVORSPINORTEX2);
        	#endif
        
        // project spinor into half spinors
        	spinorFloat a0_re = +2*i20_re;
        	spinorFloat a0_im = +2*i20_im;
        	spinorFloat a1_re = +2*i21_re;
        	spinorFloat a1_im = +2*i21_im;
        	spinorFloat a2_re = +2*i22_re;
        	spinorFloat a2_im = +2*i22_im;
        	
        	spinorFloat b0_re = +2*i30_re;
        	spinorFloat b0_im = +2*i30_im;
        	spinorFloat b1_re = +2*i31_re;
        	spinorFloat b1_im = +2*i31_im;
        	spinorFloat b2_re = +2*i32_re;
        	spinorFloat b2_im = +2*i32_im;
        	
        // multiply row 0
        	spinorFloat A0_re = 0;
        	A0_re += g00_re * a0_re;
        	A0_re -= g00_im * a0_im;
        	A0_re += g01_re * a1_re;
        	A0_re -= g01_im * a1_im;
        	A0_re += g02_re * a2_re;
        	A0_re -= g02_im * a2_im;
        	spinorFloat A0_im = 0;
        	A0_im += g00_re * a0_im;
        	A0_im += g00_im * a0_re;
        	A0_im += g01_re * a1_im;
        	A0_im += g01_im * a1_re;
        	A0_im += g02_re * a2_im;
        	A0_im += g02_im * a2_re;
        	spinorFloat B0_re = 0;
        	B0_re += g00_re * b0_re;
        	B0_re -= g00_im * b0_im;
        	B0_re += g01_re * b1_re;
        	B0_re -= g01_im * b1_im;
        	B0_re += g02_re * b2_re;
        	B0_re -= g02_im * b2_im;
        	spinorFloat B0_im = 0;
        	B0_im += g00_re * b0_im;
        	B0_im += g00_im * b0_re;
        	B0_im += g01_re * b1_im;
        	B0_im += g01_im * b1_re;
        	B0_im += g02_re * b2_im;
        	B0_im += g02_im * b2_re;
        	
        	// multiply row 1
        	spinorFloat A1_re = 0;
        	A1_re += g10_re * a0_re;
        	A1_re -= g10_im * a0_im;
        	A1_re += g11_re * a1_re;
        	A1_re -= g11_im * a1_im;
        	A1_re += g12_re * a2_re;
        	A1_re -= g12_im * a2_im;
        	spinorFloat A1_im = 0;
        	A1_im += g10_re * a0_im;
        	A1_im += g10_im * a0_re;
        	A1_im += g11_re * a1_im;
        	A1_im += g11_im * a1_re;
        	A1_im += g12_re * a2_im;
        	A1_im += g12_im * a2_re;
        	spinorFloat B1_re = 0;
        	B1_re += g10_re * b0_re;
        	B1_re -= g10_im * b0_im;
        	B1_re += g11_re * b1_re;
        	B1_re -= g11_im * b1_im;
        	B1_re += g12_re * b2_re;
        	B1_re -= g12_im * b2_im;
        	spinorFloat B1_im = 0;
        	B1_im += g10_re * b0_im;
        	B1_im += g10_im * b0_re;
        	B1_im += g11_re * b1_im;
        	B1_im += g11_im * b1_re;
        	B1_im += g12_re * b2_im;
        	B1_im += g12_im * b2_re;
        	
        	// multiply row 2
        	spinorFloat A2_re = 0;
        	A2_re += g20_re * a0_re;
        	A2_re -= g20_im * a0_im;
        	A2_re += g21_re * a1_re;
        	A2_re -= g21_im * a1_im;
        	A2_re += g22_re * a2_re;
        	A2_re -= g22_im * a2_im;
        	spinorFloat A2_im = 0;
        	A2_im += g20_re * a0_im;
        	A2_im += g20_im * a0_re;
        	A2_im += g21_re * a1_im;
        	A2_im += g21_im * a1_re;
        	A2_im += g22_re * a2_im;
        	A2_im += g22_im * a2_re;
        	spinorFloat B2_re = 0;
        	B2_re += g20_re * b0_re;
        	B2_re -= g20_im * b0_im;
        	B2_re += g21_re * b1_re;
        	B2_re -= g21_im * b1_im;
        	B2_re += g22_re * b2_re;
        	B2_re -= g22_im * b2_im;
        	spinorFloat B2_im = 0;
        	B2_im += g20_re * b0_im;
        	B2_im += g20_im * b0_re;
        	B2_im += g21_re * b1_im;
        	B2_im += g21_im * b1_re;
        	B2_im += g22_re * b2_im;
        	B2_im += g22_im * b2_re;
        	
        #ifndef DSLASH_XPAY
        	o2_20_re += A0_re;
        	o2_20_im += A0_im;
        	o2_30_re += B0_re;
        	o2_30_im += B0_im;
        	
        	o2_21_re += A1_re;
        	o2_21_im += A1_im;
        	o2_31_re += B1_re;
        	o2_31_im += B1_im;
        	
        	o2_22_re += A2_re;
        	o2_22_im += A2_im;
        	o2_32_re += B2_re;
        	o2_32_im += B2_im;
        	
        	
        #else
        	//(check this!!!)
        	o1_20_re += A0_re;
        	o1_20_im += A0_im;
        	o1_30_re += B0_re;
        	o1_30_im += B0_im;
        	
        	o1_21_re += A1_re;
        	o1_21_im += A1_im;
        	o1_31_re += B1_re;
        	o1_31_im += B1_im;
        	
        	o1_22_re += A2_re;
        	o1_22_im += A2_im;
        	o1_32_re += B2_re;
        	o1_32_im += B2_im;
        	
        	i20_re += (-i00_im*mu);
        	i20_im += (+i00_re*mu);
        	i21_re += (-i01_im*mu);
        	i21_im += (+i01_re*mu);
        	i22_re += (-i02_im*mu);
        	i22_im += (+i02_re*mu);
        
        	i30_re += (-i10_im*mu);
        	i30_im += (+i10_re*mu);
        	i31_re += (-i11_im*mu);
        	i31_im += (+i11_re*mu);
        	i32_re += (-i12_im*mu);
        	i32_im += (+i12_re*mu);
        
        
        // project spinor into half spinors
        	a0_re = +2*i20_re;
        	a0_im = +2*i20_im;
        	a1_re = +2*i21_re;
        	a1_im = +2*i21_im;
        	a2_re = +2*i22_re;
        	a2_im = +2*i22_im;
        	
        	b0_re = +2*i30_re;
        	b0_im = +2*i30_im;
        	b1_re = +2*i31_re;
        	b1_im = +2*i31_im;
        	b2_re = +2*i32_re;
        	b2_im = +2*i32_im;
        	
        // multiply row 0
        	A0_re = 0;
        	A0_re += g00_re * a0_re;
        	A0_re -= g00_im * a0_im;
        	A0_re += g01_re * a1_re;
        	A0_re -= g01_im * a1_im;
        	A0_re += g02_re * a2_re;
        	A0_re -= g02_im * a2_im;
        	A0_im = 0;
        	A0_im += g00_re * a0_im;
        	A0_im += g00_im * a0_re;
        	A0_im += g01_re * a1_im;
        	A0_im += g01_im * a1_re;
        	A0_im += g02_re * a2_im;
        	A0_im += g02_im * a2_re;
        	B0_re = 0;
        	B0_re += g00_re * b0_re;
        	B0_re -= g00_im * b0_im;
        	B0_re += g01_re * b1_re;
        	B0_re -= g01_im * b1_im;
        	B0_re += g02_re * b2_re;
        	B0_re -= g02_im * b2_im;
        	B0_im = 0;
        	B0_im += g00_re * b0_im;
        	B0_im += g00_im * b0_re;
        	B0_im += g01_re * b1_im;
        	B0_im += g01_im * b1_re;
        	B0_im += g02_re * b2_im;
        	B0_im += g02_im * b2_re;
        	
        	// multiply row 1
        	A1_re = 0;
        	A1_re += g10_re * a0_re;
        	A1_re -= g10_im * a0_im;
        	A1_re += g11_re * a1_re;
        	A1_re -= g11_im * a1_im;
        	A1_re += g12_re * a2_re;
        	A1_re -= g12_im * a2_im;
        	A1_im = 0;
        	A1_im += g10_re * a0_im;
        	A1_im += g10_im * a0_re;
        	A1_im += g11_re * a1_im;
        	A1_im += g11_im * a1_re;
        	A1_im += g12_re * a2_im;
        	A1_im += g12_im * a2_re;
        	B1_re = 0;
        	B1_re += g10_re * b0_re;
        	B1_re -= g10_im * b0_im;
        	B1_re += g11_re * b1_re;
        	B1_re -= g11_im * b1_im;
        	B1_re += g12_re * b2_re;
        	B1_re -= g12_im * b2_im;
        	B1_im = 0;
        	B1_im += g10_re * b0_im;
        	B1_im += g10_im * b0_re;
        	B1_im += g11_re * b1_im;
        	B1_im += g11_im * b1_re;
        	B1_im += g12_re * b2_im;
        	B1_im += g12_im * b2_re;
        	
        	// multiply row 2
        	A2_re = 0;
        	A2_re += g20_re * a0_re;
        	A2_re -= g20_im * a0_im;
        	A2_re += g21_re * a1_re;
        	A2_re -= g21_im * a1_im;
        	A2_re += g22_re * a2_re;
        	A2_re -= g22_im * a2_im;
        	A2_im = 0;
        	A2_im += g20_re * a0_im;
        	A2_im += g20_im * a0_re;
        	A2_im += g21_re * a1_im;
        	A2_im += g21_im * a1_re;
        	A2_im += g22_re * a2_im;
        	A2_im += g22_im * a2_re;
        	B2_re = 0;
        	B2_re += g20_re * b0_re;
        	B2_re -= g20_im * b0_im;
        	B2_re += g21_re * b1_re;
        	B2_re -= g21_im * b1_im;
        	B2_re += g22_re * b2_re;
        	B2_re -= g22_im * b2_im;
        	B2_im = 0;
        	B2_im += g20_re * b0_im;
        	B2_im += g20_im * b0_re;
        	B2_im += g21_re * b1_im;
        	B2_im += g21_im * b1_re;
        	B2_im += g22_re * b2_im;
        	B2_im += g22_im * b2_re;
        	
        //Store the data:
        	o2_20_re += A0_re;
        	o2_20_im += A0_im;
        	o2_30_re += B0_re;
        	o2_30_im += B0_im;
        	
        	o2_21_re += A1_re;
        	o2_21_im += A1_im;
        	o2_31_re += B1_re;
        	o2_31_im += B1_im;
        	
        	o2_22_re += A2_re;
        	o2_22_im += A2_im;
        	o2_32_re += B2_re;
        	o2_32_im += B2_im;
        	
        	
        #endif
        }
    }
}

{
    // Projector P3+
    // 2 0 0 0 
    // 0 2 0 0 
    // 0 0 0 0 
    // 0 0 0 0 
    
    int sp_idx = ((x4==0)    ? X+X4X3X2X1mX3X2X1 : X-X3X2X1) >> 1;
    int ga_idx = sp_idx;
    
    if (gauge_fixed && ga_idx < X4X3X2X1hmX3X2X1h) {
        {// read the first flavr spinor from device memory
        	#ifndef DSLASH_XPAY
        		READ_SPINOR(FLAVORSPINORTEX1);
        	#else
        		READ_SPINOR_UP(FLAVORSPINORTEX1);
        	#endif
        
        // project spinor into half spinors
        	spinorFloat a0_re = +2*i00_re;
        	spinorFloat a0_im = +2*i00_im;
        	spinorFloat a1_re = +2*i01_re;
        	spinorFloat a1_im = +2*i01_im;
        	spinorFloat a2_re = +2*i02_re;
        	spinorFloat a2_im = +2*i02_im;
        	
        	spinorFloat b0_re = +2*i10_re;
        	spinorFloat b0_im = +2*i10_im;
        	spinorFloat b1_re = +2*i11_re;
        	spinorFloat b1_im = +2*i11_im;
        	spinorFloat b2_re = +2*i12_re;
        	spinorFloat b2_im = +2*i12_im;
        	
        // identity gauge matrix
        	spinorFloat A0_re = a0_re; 	spinorFloat A0_im = a0_im;
        	spinorFloat B0_re = b0_re; 	spinorFloat B0_im = b0_im;
        	spinorFloat A1_re = a1_re; 	spinorFloat A1_im = a1_im;
        	spinorFloat B1_re = b1_re; 	spinorFloat B1_im = b1_im;
        	spinorFloat A2_re = a2_re; 	spinorFloat A2_im = a2_im;
        	spinorFloat B2_re = b2_re; 	spinorFloat B2_im = b2_im;
        	
        #ifndef DSLASH_XPAY
        	o1_00_re += A0_re;
        	o1_00_im += A0_im;
        	o1_10_re += B0_re;
        	o1_10_im += B0_im;
        	
        	o1_01_re += A1_re;
        	o1_01_im += A1_im;
        	o1_11_re += B1_re;
        	o1_11_im += B1_im;
        	
        	o1_02_re += A2_re;
        	o1_02_im += A2_im;
        	o1_12_re += B2_re;
        	o1_12_im += B2_im;
        	
        	
        #else
        	//check this!!!
        	o2_00_re += A0_re;
        	o2_00_im += A0_im;
        	o2_10_re += B0_re;
        	o2_10_im += B0_im;
        	
        	o2_01_re += A1_re;
        	o2_01_im += A1_im;
        	o2_11_re += B1_re;
        	o2_11_im += B1_im;
        	
        	o2_02_re += A2_re;
        	o2_02_im += A2_im;
        	o2_12_re += B2_re;
        	o2_12_im += B2_im;
        	
        	i00_re += (+i20_im*mu);
        	i00_im += (-i20_re*mu);
        	i01_re += (+i21_im*mu);
        	i01_im += (-i21_re*mu);
        	i02_re += (+i22_im*mu);
        	i02_im += (-i22_re*mu);
        
        	i10_re += (+i30_im*mu);
        	i10_im += (-i30_re*mu);
        	i11_re += (+i31_im*mu);
        	i11_im += (-i31_re*mu);
        	i12_re += (+i32_im*mu);
        	i12_im += (-i32_re*mu);
        
        
        // project spinor into half spinors
        	a0_re = +2*i00_re;
        	a0_im = +2*i00_im;
        	a1_re = +2*i01_re;
        	a1_im = +2*i01_im;
        	a2_re = +2*i02_re;
        	a2_im = +2*i02_im;
        	
        	b0_re = +2*i10_re;
        	b0_im = +2*i10_im;
        	b1_re = +2*i11_re;
        	b1_im = +2*i11_im;
        	b2_re = +2*i12_re;
        	b2_im = +2*i12_im;
        	
        // identity gauge matrix
        	A0_re = a0_re; 	A0_im = a0_im;
        	B0_re = b0_re; 	B0_im = b0_im;
        	A1_re = a1_re; 	A1_im = a1_im;
        	B1_re = b1_re; 	B1_im = b1_im;
        	A2_re = a2_re; 	A2_im = a2_im;
        	B2_re = b2_re; 	B2_im = b2_im;
        	
        //Store the data:
        	o1_00_re += A0_re;
        	o1_00_im += A0_im;
        	o1_10_re += B0_re;
        	o1_10_im += B0_im;
        	
        	o1_01_re += A1_re;
        	o1_01_im += A1_im;
        	o1_11_re += B1_re;
        	o1_11_im += B1_im;
        	
        	o1_02_re += A2_re;
        	o1_02_im += A2_im;
        	o1_12_re += B2_re;
        	o1_12_im += B2_im;
        	
        	
        #endif
        }
        {// read the second flavorr spinor from device memory
        	#ifndef DSLASH_XPAY
        		READ_SPINOR(FLAVORSPINORTEX2);
        	#else
        		READ_SPINOR_UP(FLAVORSPINORTEX2);
        	#endif
        
        // project spinor into half spinors
        	spinorFloat a0_re = +2*i00_re;
        	spinorFloat a0_im = +2*i00_im;
        	spinorFloat a1_re = +2*i01_re;
        	spinorFloat a1_im = +2*i01_im;
        	spinorFloat a2_re = +2*i02_re;
        	spinorFloat a2_im = +2*i02_im;
        	
        	spinorFloat b0_re = +2*i10_re;
        	spinorFloat b0_im = +2*i10_im;
        	spinorFloat b1_re = +2*i11_re;
        	spinorFloat b1_im = +2*i11_im;
        	spinorFloat b2_re = +2*i12_re;
        	spinorFloat b2_im = +2*i12_im;
        	
        // identity gauge matrix
        	spinorFloat A0_re = a0_re; 	spinorFloat A0_im = a0_im;
        	spinorFloat B0_re = b0_re; 	spinorFloat B0_im = b0_im;
        	spinorFloat A1_re = a1_re; 	spinorFloat A1_im = a1_im;
        	spinorFloat B1_re = b1_re; 	spinorFloat B1_im = b1_im;
        	spinorFloat A2_re = a2_re; 	spinorFloat A2_im = a2_im;
        	spinorFloat B2_re = b2_re; 	spinorFloat B2_im = b2_im;
        	
        #ifndef DSLASH_XPAY
        	o2_00_re += A0_re;
        	o2_00_im += A0_im;
        	o2_10_re += B0_re;
        	o2_10_im += B0_im;
        	
        	o2_01_re += A1_re;
        	o2_01_im += A1_im;
        	o2_11_re += B1_re;
        	o2_11_im += B1_im;
        	
        	o2_02_re += A2_re;
        	o2_02_im += A2_im;
        	o2_12_re += B2_re;
        	o2_12_im += B2_im;
        	
        	
        #else
        	//(check this!!!)
        	o1_00_re += A0_re;
        	o1_00_im += A0_im;
        	o1_10_re += B0_re;
        	o1_10_im += B0_im;
        	
        	o1_01_re += A1_re;
        	o1_01_im += A1_im;
        	o1_11_re += B1_re;
        	o1_11_im += B1_im;
        	
        	o1_02_re += A2_re;
        	o1_02_im += A2_im;
        	o1_12_re += B2_re;
        	o1_12_im += B2_im;
        	
        	i00_re += (-i20_im*mu);
        	i00_im += (+i20_re*mu);
        	i01_re += (-i21_im*mu);
        	i01_im += (+i21_re*mu);
        	i02_re += (-i22_im*mu);
        	i02_im += (+i22_re*mu);
        
        	i10_re += (-i30_im*mu);
        	i10_im += (+i30_re*mu);
        	i11_re += (-i31_im*mu);
        	i11_im += (+i31_re*mu);
        	i12_re += (-i32_im*mu);
        	i12_im += (+i32_re*mu);
        
        
        // project spinor into half spinors
        	a0_re = +2*i00_re;
        	a0_im = +2*i00_im;
        	a1_re = +2*i01_re;
        	a1_im = +2*i01_im;
        	a2_re = +2*i02_re;
        	a2_im = +2*i02_im;
        	
        	b0_re = +2*i10_re;
        	b0_im = +2*i10_im;
        	b1_re = +2*i11_re;
        	b1_im = +2*i11_im;
        	b2_re = +2*i12_re;
        	b2_im = +2*i12_im;
        	
        // identity gauge matrix
        	A0_re = a0_re; 	A0_im = a0_im;
        	B0_re = b0_re; 	B0_im = b0_im;
        	A1_re = a1_re; 	A1_im = a1_im;
        	B1_re = b1_re; 	B1_im = b1_im;
        	A2_re = a2_re; 	A2_im = a2_im;
        	B2_re = b2_re; 	B2_im = b2_im;
        	
        //Store the data:
        	o2_00_re += A0_re;
        	o2_00_im += A0_im;
        	o2_10_re += B0_re;
        	o2_10_im += B0_im;
        	
        	o2_01_re += A1_re;
        	o2_01_im += A1_im;
        	o2_11_re += B1_re;
        	o2_11_im += B1_im;
        	
        	o2_02_re += A2_re;
        	o2_02_im += A2_im;
        	o2_12_re += B2_re;
        	o2_12_im += B2_im;
        	
        	
        #endif
        }
    }
    else {
        // read gauge matrix from device memory
        READ_GAUGE_MATRIX(GAUGE1TEX, 7);
        
        // reconstruct gauge matrix
        RECONSTRUCT_GAUGE_MATRIX(7);
        
        {// read the first flavr spinor from device memory
        	#ifndef DSLASH_XPAY
        		READ_SPINOR(FLAVORSPINORTEX1);
        	#else
        		READ_SPINOR_UP(FLAVORSPINORTEX1);
        	#endif
        
        // project spinor into half spinors
        	spinorFloat a0_re = +2*i00_re;
        	spinorFloat a0_im = +2*i00_im;
        	spinorFloat a1_re = +2*i01_re;
        	spinorFloat a1_im = +2*i01_im;
        	spinorFloat a2_re = +2*i02_re;
        	spinorFloat a2_im = +2*i02_im;
        	
        	spinorFloat b0_re = +2*i10_re;
        	spinorFloat b0_im = +2*i10_im;
        	spinorFloat b1_re = +2*i11_re;
        	spinorFloat b1_im = +2*i11_im;
        	spinorFloat b2_re = +2*i12_re;
        	spinorFloat b2_im = +2*i12_im;
        	
        // multiply row 0
        	spinorFloat A0_re = 0;
        	A0_re += gT00_re * a0_re;
        	A0_re -= gT00_im * a0_im;
        	A0_re += gT01_re * a1_re;
        	A0_re -= gT01_im * a1_im;
        	A0_re += gT02_re * a2_re;
        	A0_re -= gT02_im * a2_im;
        	spinorFloat A0_im = 0;
        	A0_im += gT00_re * a0_im;
        	A0_im += gT00_im * a0_re;
        	A0_im += gT01_re * a1_im;
        	A0_im += gT01_im * a1_re;
        	A0_im += gT02_re * a2_im;
        	A0_im += gT02_im * a2_re;
        	spinorFloat B0_re = 0;
        	B0_re += gT00_re * b0_re;
        	B0_re -= gT00_im * b0_im;
        	B0_re += gT01_re * b1_re;
        	B0_re -= gT01_im * b1_im;
        	B0_re += gT02_re * b2_re;
        	B0_re -= gT02_im * b2_im;
        	spinorFloat B0_im = 0;
        	B0_im += gT00_re * b0_im;
        	B0_im += gT00_im * b0_re;
        	B0_im += gT01_re * b1_im;
        	B0_im += gT01_im * b1_re;
        	B0_im += gT02_re * b2_im;
        	B0_im += gT02_im * b2_re;
        	
        	// multiply row 1
        	spinorFloat A1_re = 0;
        	A1_re += gT10_re * a0_re;
        	A1_re -= gT10_im * a0_im;
        	A1_re += gT11_re * a1_re;
        	A1_re -= gT11_im * a1_im;
        	A1_re += gT12_re * a2_re;
        	A1_re -= gT12_im * a2_im;
        	spinorFloat A1_im = 0;
        	A1_im += gT10_re * a0_im;
        	A1_im += gT10_im * a0_re;
        	A1_im += gT11_re * a1_im;
        	A1_im += gT11_im * a1_re;
        	A1_im += gT12_re * a2_im;
        	A1_im += gT12_im * a2_re;
        	spinorFloat B1_re = 0;
        	B1_re += gT10_re * b0_re;
        	B1_re -= gT10_im * b0_im;
        	B1_re += gT11_re * b1_re;
        	B1_re -= gT11_im * b1_im;
        	B1_re += gT12_re * b2_re;
        	B1_re -= gT12_im * b2_im;
        	spinorFloat B1_im = 0;
        	B1_im += gT10_re * b0_im;
        	B1_im += gT10_im * b0_re;
        	B1_im += gT11_re * b1_im;
        	B1_im += gT11_im * b1_re;
        	B1_im += gT12_re * b2_im;
        	B1_im += gT12_im * b2_re;
        	
        	// multiply row 2
        	spinorFloat A2_re = 0;
        	A2_re += gT20_re * a0_re;
        	A2_re -= gT20_im * a0_im;
        	A2_re += gT21_re * a1_re;
        	A2_re -= gT21_im * a1_im;
        	A2_re += gT22_re * a2_re;
        	A2_re -= gT22_im * a2_im;
        	spinorFloat A2_im = 0;
        	A2_im += gT20_re * a0_im;
        	A2_im += gT20_im * a0_re;
        	A2_im += gT21_re * a1_im;
        	A2_im += gT21_im * a1_re;
        	A2_im += gT22_re * a2_im;
        	A2_im += gT22_im * a2_re;
        	spinorFloat B2_re = 0;
        	B2_re += gT20_re * b0_re;
        	B2_re -= gT20_im * b0_im;
        	B2_re += gT21_re * b1_re;
        	B2_re -= gT21_im * b1_im;
        	B2_re += gT22_re * b2_re;
        	B2_re -= gT22_im * b2_im;
        	spinorFloat B2_im = 0;
        	B2_im += gT20_re * b0_im;
        	B2_im += gT20_im * b0_re;
        	B2_im += gT21_re * b1_im;
        	B2_im += gT21_im * b1_re;
        	B2_im += gT22_re * b2_im;
        	B2_im += gT22_im * b2_re;
        	
        #ifndef DSLASH_XPAY
        	o1_00_re += A0_re;
        	o1_00_im += A0_im;
        	o1_10_re += B0_re;
        	o1_10_im += B0_im;
        	
        	o1_01_re += A1_re;
        	o1_01_im += A1_im;
        	o1_11_re += B1_re;
        	o1_11_im += B1_im;
        	
        	o1_02_re += A2_re;
        	o1_02_im += A2_im;
        	o1_12_re += B2_re;
        	o1_12_im += B2_im;
        	
        	
        #else
        	//check this!!!
        	o2_00_re += A0_re;
        	o2_00_im += A0_im;
        	o2_10_re += B0_re;
        	o2_10_im += B0_im;
        	
        	o2_01_re += A1_re;
        	o2_01_im += A1_im;
        	o2_11_re += B1_re;
        	o2_11_im += B1_im;
        	
        	o2_02_re += A2_re;
        	o2_02_im += A2_im;
        	o2_12_re += B2_re;
        	o2_12_im += B2_im;
        	
        	i00_re += (+i20_im*mu);
        	i00_im += (-i20_re*mu);
        	i01_re += (+i21_im*mu);
        	i01_im += (-i21_re*mu);
        	i02_re += (+i22_im*mu);
        	i02_im += (-i22_re*mu);
        
        	i10_re += (+i30_im*mu);
        	i10_im += (-i30_re*mu);
        	i11_re += (+i31_im*mu);
        	i11_im += (-i31_re*mu);
        	i12_re += (+i32_im*mu);
        	i12_im += (-i32_re*mu);
        
        
        // project spinor into half spinors
        	a0_re = +2*i00_re;
        	a0_im = +2*i00_im;
        	a1_re = +2*i01_re;
        	a1_im = +2*i01_im;
        	a2_re = +2*i02_re;
        	a2_im = +2*i02_im;
        	
        	b0_re = +2*i10_re;
        	b0_im = +2*i10_im;
        	b1_re = +2*i11_re;
        	b1_im = +2*i11_im;
        	b2_re = +2*i12_re;
        	b2_im = +2*i12_im;
        	
        // multiply row 0
        	A0_re = 0;
        	A0_re += gT00_re * a0_re;
        	A0_re -= gT00_im * a0_im;
        	A0_re += gT01_re * a1_re;
        	A0_re -= gT01_im * a1_im;
        	A0_re += gT02_re * a2_re;
        	A0_re -= gT02_im * a2_im;
        	A0_im = 0;
        	A0_im += gT00_re * a0_im;
        	A0_im += gT00_im * a0_re;
        	A0_im += gT01_re * a1_im;
        	A0_im += gT01_im * a1_re;
        	A0_im += gT02_re * a2_im;
        	A0_im += gT02_im * a2_re;
        	B0_re = 0;
        	B0_re += gT00_re * b0_re;
        	B0_re -= gT00_im * b0_im;
        	B0_re += gT01_re * b1_re;
        	B0_re -= gT01_im * b1_im;
        	B0_re += gT02_re * b2_re;
        	B0_re -= gT02_im * b2_im;
        	B0_im = 0;
        	B0_im += gT00_re * b0_im;
        	B0_im += gT00_im * b0_re;
        	B0_im += gT01_re * b1_im;
        	B0_im += gT01_im * b1_re;
        	B0_im += gT02_re * b2_im;
        	B0_im += gT02_im * b2_re;
        	
        	// multiply row 1
        	A1_re = 0;
        	A1_re += gT10_re * a0_re;
        	A1_re -= gT10_im * a0_im;
        	A1_re += gT11_re * a1_re;
        	A1_re -= gT11_im * a1_im;
        	A1_re += gT12_re * a2_re;
        	A1_re -= gT12_im * a2_im;
        	A1_im = 0;
        	A1_im += gT10_re * a0_im;
        	A1_im += gT10_im * a0_re;
        	A1_im += gT11_re * a1_im;
        	A1_im += gT11_im * a1_re;
        	A1_im += gT12_re * a2_im;
        	A1_im += gT12_im * a2_re;
        	B1_re = 0;
        	B1_re += gT10_re * b0_re;
        	B1_re -= gT10_im * b0_im;
        	B1_re += gT11_re * b1_re;
        	B1_re -= gT11_im * b1_im;
        	B1_re += gT12_re * b2_re;
        	B1_re -= gT12_im * b2_im;
        	B1_im = 0;
        	B1_im += gT10_re * b0_im;
        	B1_im += gT10_im * b0_re;
        	B1_im += gT11_re * b1_im;
        	B1_im += gT11_im * b1_re;
        	B1_im += gT12_re * b2_im;
        	B1_im += gT12_im * b2_re;
        	
        	// multiply row 2
        	A2_re = 0;
        	A2_re += gT20_re * a0_re;
        	A2_re -= gT20_im * a0_im;
        	A2_re += gT21_re * a1_re;
        	A2_re -= gT21_im * a1_im;
        	A2_re += gT22_re * a2_re;
        	A2_re -= gT22_im * a2_im;
        	A2_im = 0;
        	A2_im += gT20_re * a0_im;
        	A2_im += gT20_im * a0_re;
        	A2_im += gT21_re * a1_im;
        	A2_im += gT21_im * a1_re;
        	A2_im += gT22_re * a2_im;
        	A2_im += gT22_im * a2_re;
        	B2_re = 0;
        	B2_re += gT20_re * b0_re;
        	B2_re -= gT20_im * b0_im;
        	B2_re += gT21_re * b1_re;
        	B2_re -= gT21_im * b1_im;
        	B2_re += gT22_re * b2_re;
        	B2_re -= gT22_im * b2_im;
        	B2_im = 0;
        	B2_im += gT20_re * b0_im;
        	B2_im += gT20_im * b0_re;
        	B2_im += gT21_re * b1_im;
        	B2_im += gT21_im * b1_re;
        	B2_im += gT22_re * b2_im;
        	B2_im += gT22_im * b2_re;
        	
        //Store the data:
        	o1_00_re += A0_re;
        	o1_00_im += A0_im;
        	o1_10_re += B0_re;
        	o1_10_im += B0_im;
        	
        	o1_01_re += A1_re;
        	o1_01_im += A1_im;
        	o1_11_re += B1_re;
        	o1_11_im += B1_im;
        	
        	o1_02_re += A2_re;
        	o1_02_im += A2_im;
        	o1_12_re += B2_re;
        	o1_12_im += B2_im;
        	
        	
        #endif
        }
        {// read the second flavorr spinor from device memory
        	#ifndef DSLASH_XPAY
        		READ_SPINOR(FLAVORSPINORTEX2);
        	#else
        		READ_SPINOR_UP(FLAVORSPINORTEX2);
        	#endif
        
        // project spinor into half spinors
        	spinorFloat a0_re = +2*i00_re;
        	spinorFloat a0_im = +2*i00_im;
        	spinorFloat a1_re = +2*i01_re;
        	spinorFloat a1_im = +2*i01_im;
        	spinorFloat a2_re = +2*i02_re;
        	spinorFloat a2_im = +2*i02_im;
        	
        	spinorFloat b0_re = +2*i10_re;
        	spinorFloat b0_im = +2*i10_im;
        	spinorFloat b1_re = +2*i11_re;
        	spinorFloat b1_im = +2*i11_im;
        	spinorFloat b2_re = +2*i12_re;
        	spinorFloat b2_im = +2*i12_im;
        	
        // multiply row 0
        	spinorFloat A0_re = 0;
        	A0_re += gT00_re * a0_re;
        	A0_re -= gT00_im * a0_im;
        	A0_re += gT01_re * a1_re;
        	A0_re -= gT01_im * a1_im;
        	A0_re += gT02_re * a2_re;
        	A0_re -= gT02_im * a2_im;
        	spinorFloat A0_im = 0;
        	A0_im += gT00_re * a0_im;
        	A0_im += gT00_im * a0_re;
        	A0_im += gT01_re * a1_im;
        	A0_im += gT01_im * a1_re;
        	A0_im += gT02_re * a2_im;
        	A0_im += gT02_im * a2_re;
        	spinorFloat B0_re = 0;
        	B0_re += gT00_re * b0_re;
        	B0_re -= gT00_im * b0_im;
        	B0_re += gT01_re * b1_re;
        	B0_re -= gT01_im * b1_im;
        	B0_re += gT02_re * b2_re;
        	B0_re -= gT02_im * b2_im;
        	spinorFloat B0_im = 0;
        	B0_im += gT00_re * b0_im;
        	B0_im += gT00_im * b0_re;
        	B0_im += gT01_re * b1_im;
        	B0_im += gT01_im * b1_re;
        	B0_im += gT02_re * b2_im;
        	B0_im += gT02_im * b2_re;
        	
        	// multiply row 1
        	spinorFloat A1_re = 0;
        	A1_re += gT10_re * a0_re;
        	A1_re -= gT10_im * a0_im;
        	A1_re += gT11_re * a1_re;
        	A1_re -= gT11_im * a1_im;
        	A1_re += gT12_re * a2_re;
        	A1_re -= gT12_im * a2_im;
        	spinorFloat A1_im = 0;
        	A1_im += gT10_re * a0_im;
        	A1_im += gT10_im * a0_re;
        	A1_im += gT11_re * a1_im;
        	A1_im += gT11_im * a1_re;
        	A1_im += gT12_re * a2_im;
        	A1_im += gT12_im * a2_re;
        	spinorFloat B1_re = 0;
        	B1_re += gT10_re * b0_re;
        	B1_re -= gT10_im * b0_im;
        	B1_re += gT11_re * b1_re;
        	B1_re -= gT11_im * b1_im;
        	B1_re += gT12_re * b2_re;
        	B1_re -= gT12_im * b2_im;
        	spinorFloat B1_im = 0;
        	B1_im += gT10_re * b0_im;
        	B1_im += gT10_im * b0_re;
        	B1_im += gT11_re * b1_im;
        	B1_im += gT11_im * b1_re;
        	B1_im += gT12_re * b2_im;
        	B1_im += gT12_im * b2_re;
        	
        	// multiply row 2
        	spinorFloat A2_re = 0;
        	A2_re += gT20_re * a0_re;
        	A2_re -= gT20_im * a0_im;
        	A2_re += gT21_re * a1_re;
        	A2_re -= gT21_im * a1_im;
        	A2_re += gT22_re * a2_re;
        	A2_re -= gT22_im * a2_im;
        	spinorFloat A2_im = 0;
        	A2_im += gT20_re * a0_im;
        	A2_im += gT20_im * a0_re;
        	A2_im += gT21_re * a1_im;
        	A2_im += gT21_im * a1_re;
        	A2_im += gT22_re * a2_im;
        	A2_im += gT22_im * a2_re;
        	spinorFloat B2_re = 0;
        	B2_re += gT20_re * b0_re;
        	B2_re -= gT20_im * b0_im;
        	B2_re += gT21_re * b1_re;
        	B2_re -= gT21_im * b1_im;
        	B2_re += gT22_re * b2_re;
        	B2_re -= gT22_im * b2_im;
        	spinorFloat B2_im = 0;
        	B2_im += gT20_re * b0_im;
        	B2_im += gT20_im * b0_re;
        	B2_im += gT21_re * b1_im;
        	B2_im += gT21_im * b1_re;
        	B2_im += gT22_re * b2_im;
        	B2_im += gT22_im * b2_re;
        	
        #ifndef DSLASH_XPAY
        	o2_00_re += A0_re;
        	o2_00_im += A0_im;
        	o2_10_re += B0_re;
        	o2_10_im += B0_im;
        	
        	o2_01_re += A1_re;
        	o2_01_im += A1_im;
        	o2_11_re += B1_re;
        	o2_11_im += B1_im;
        	
        	o2_02_re += A2_re;
        	o2_02_im += A2_im;
        	o2_12_re += B2_re;
        	o2_12_im += B2_im;
        	
        	
        #else
        	//(check this!!!)
        	o1_00_re += A0_re;
        	o1_00_im += A0_im;
        	o1_10_re += B0_re;
        	o1_10_im += B0_im;
        	
        	o1_01_re += A1_re;
        	o1_01_im += A1_im;
        	o1_11_re += B1_re;
        	o1_11_im += B1_im;
        	
        	o1_02_re += A2_re;
        	o1_02_im += A2_im;
        	o1_12_re += B2_re;
        	o1_12_im += B2_im;
        	
        	i00_re += (-i20_im*mu);
        	i00_im += (+i20_re*mu);
        	i01_re += (-i21_im*mu);
        	i01_im += (+i21_re*mu);
        	i02_re += (-i22_im*mu);
        	i02_im += (+i22_re*mu);
        
        	i10_re += (-i30_im*mu);
        	i10_im += (+i30_re*mu);
        	i11_re += (-i31_im*mu);
        	i11_im += (+i31_re*mu);
        	i12_re += (-i32_im*mu);
        	i12_im += (+i32_re*mu);
        
        
        // project spinor into half spinors
        	a0_re = +2*i00_re;
        	a0_im = +2*i00_im;
        	a1_re = +2*i01_re;
        	a1_im = +2*i01_im;
        	a2_re = +2*i02_re;
        	a2_im = +2*i02_im;
        	
        	b0_re = +2*i10_re;
        	b0_im = +2*i10_im;
        	b1_re = +2*i11_re;
        	b1_im = +2*i11_im;
        	b2_re = +2*i12_re;
        	b2_im = +2*i12_im;
        	
        // multiply row 0
        	A0_re = 0;
        	A0_re += gT00_re * a0_re;
        	A0_re -= gT00_im * a0_im;
        	A0_re += gT01_re * a1_re;
        	A0_re -= gT01_im * a1_im;
        	A0_re += gT02_re * a2_re;
        	A0_re -= gT02_im * a2_im;
        	A0_im = 0;
        	A0_im += gT00_re * a0_im;
        	A0_im += gT00_im * a0_re;
        	A0_im += gT01_re * a1_im;
        	A0_im += gT01_im * a1_re;
        	A0_im += gT02_re * a2_im;
        	A0_im += gT02_im * a2_re;
        	B0_re = 0;
        	B0_re += gT00_re * b0_re;
        	B0_re -= gT00_im * b0_im;
        	B0_re += gT01_re * b1_re;
        	B0_re -= gT01_im * b1_im;
        	B0_re += gT02_re * b2_re;
        	B0_re -= gT02_im * b2_im;
        	B0_im = 0;
        	B0_im += gT00_re * b0_im;
        	B0_im += gT00_im * b0_re;
        	B0_im += gT01_re * b1_im;
        	B0_im += gT01_im * b1_re;
        	B0_im += gT02_re * b2_im;
        	B0_im += gT02_im * b2_re;
        	
        	// multiply row 1
        	A1_re = 0;
        	A1_re += gT10_re * a0_re;
        	A1_re -= gT10_im * a0_im;
        	A1_re += gT11_re * a1_re;
        	A1_re -= gT11_im * a1_im;
        	A1_re += gT12_re * a2_re;
        	A1_re -= gT12_im * a2_im;
        	A1_im = 0;
        	A1_im += gT10_re * a0_im;
        	A1_im += gT10_im * a0_re;
        	A1_im += gT11_re * a1_im;
        	A1_im += gT11_im * a1_re;
        	A1_im += gT12_re * a2_im;
        	A1_im += gT12_im * a2_re;
        	B1_re = 0;
        	B1_re += gT10_re * b0_re;
        	B1_re -= gT10_im * b0_im;
        	B1_re += gT11_re * b1_re;
        	B1_re -= gT11_im * b1_im;
        	B1_re += gT12_re * b2_re;
        	B1_re -= gT12_im * b2_im;
        	B1_im = 0;
        	B1_im += gT10_re * b0_im;
        	B1_im += gT10_im * b0_re;
        	B1_im += gT11_re * b1_im;
        	B1_im += gT11_im * b1_re;
        	B1_im += gT12_re * b2_im;
        	B1_im += gT12_im * b2_re;
        	
        	// multiply row 2
        	A2_re = 0;
        	A2_re += gT20_re * a0_re;
        	A2_re -= gT20_im * a0_im;
        	A2_re += gT21_re * a1_re;
        	A2_re -= gT21_im * a1_im;
        	A2_re += gT22_re * a2_re;
        	A2_re -= gT22_im * a2_im;
        	A2_im = 0;
        	A2_im += gT20_re * a0_im;
        	A2_im += gT20_im * a0_re;
        	A2_im += gT21_re * a1_im;
        	A2_im += gT21_im * a1_re;
        	A2_im += gT22_re * a2_im;
        	A2_im += gT22_im * a2_re;
        	B2_re = 0;
        	B2_re += gT20_re * b0_re;
        	B2_re -= gT20_im * b0_im;
        	B2_re += gT21_re * b1_re;
        	B2_re -= gT21_im * b1_im;
        	B2_re += gT22_re * b2_re;
        	B2_re -= gT22_im * b2_im;
        	B2_im = 0;
        	B2_im += gT20_re * b0_im;
        	B2_im += gT20_im * b0_re;
        	B2_im += gT21_re * b1_im;
        	B2_im += gT21_im * b1_re;
        	B2_im += gT22_re * b2_im;
        	B2_im += gT22_im * b2_re;
        	
        //Store the data:
        	o2_00_re += A0_re;
        	o2_00_im += A0_im;
        	o2_10_re += B0_re;
        	o2_10_im += B0_im;
        	
        	o2_01_re += A1_re;
        	o2_01_im += A1_im;
        	o2_11_re += B1_re;
        	o2_11_im += B1_im;
        	
        	o2_02_re += A2_re;
        	o2_02_im += A2_im;
        	o2_12_re += B2_re;
        	o2_12_im += B2_im;
        	
        	
        #endif
        }
    }
}


#ifdef DSLASH_XPAY
{
    READ_ACCUM(ACCUMFLAVORTEX1)
#ifdef SPINOR_DOUBLE
// apply twisted mass rotation
o1_00_re += (+accum0.x-accum6.x*mu);
o1_00_im += (+accum0.y+accum6.y*mu);
o1_01_re += (+accum1.x-accum7.x*mu);
o1_01_im += (+accum1.y+accum7.y*mu);
o1_02_re += (+accum2.x-accum8.x*mu);
o1_02_im += (+accum2.y+accum8.y*mu);

o1_10_re += (+accum3.x-accum9.x*mu);
o1_10_im += (+accum3.y+accum9.y*mu);
o1_11_re += (+accum4.x-accum10.x*mu);
o1_11_im += (+accum4.y+accum10.y*mu);
o1_12_re += (+accum5.x-accum11.x*mu);
o1_12_im += (+accum5.y+accum11.y*mu);

o1_20_re += (-accum0.x*mu+accum6.x);
o1_20_im += (+accum0.y*mu+accum6.y);
o1_21_re += (-accum1.x*mu+accum7.x);
o1_21_im += (+accum1.y*mu+accum7.y);
o1_22_re += (-accum2.x*mu+accum8.x);
o1_22_im += (+accum2.y*mu+accum8.y);

o1_30_re += (-accum3.x*mu+accum9.x);
o1_30_im += (+accum3.y*mu+accum9.y);
o1_31_re += (-accum4.x*mu+accum10.x);
o1_31_im += (+accum4.y*mu+accum10.y);
o1_32_re += (-accum5.x*mu+accum11.x);
o1_32_im += (+accum5.y*mu+accum11.y);


    o2_00_re += epsilon*(-o2_00_re+accum0.x);
    o2_00_im += epsilon*(-o2_00_im+accum0.y);
    o2_01_re += epsilon*(-o2_01_re+accum1.x);
    o2_01_im += epsilon*(-o2_01_im+accum1.y);
    o2_02_re += epsilon*(-o2_02_re+accum2.x);
    o2_02_im += epsilon*(-o2_02_im+accum2.y);
    o2_10_re += epsilon*(-o2_10_re+accum3.x);
    o2_10_im += epsilon*(-o2_10_im+accum3.y);
    o2_11_re += epsilon*(-o2_11_re+accum4.x);
    o2_11_im += epsilon*(-o2_11_im+accum4.y);
    o2_12_re += epsilon*(-o2_12_re+accum5.x);
    o2_12_im += epsilon*(-o2_12_im+accum5.y);
    o2_20_re += epsilon*(-o2_20_re+accum6.x);
    o2_20_im += epsilon*(-o2_20_im+accum6.y);
    o2_21_re += epsilon*(-o2_21_re+accum7.x);
    o2_21_im += epsilon*(-o2_21_im+accum7.y);
    o2_22_re += epsilon*(-o2_22_re+accum8.x);
    o2_22_im += epsilon*(-o2_22_im+accum8.y);
    o2_30_re += epsilon*(-o2_30_re+accum9.x);
    o2_30_im += epsilon*(-o2_30_im+accum9.y);
    o2_31_re += epsilon*(-o2_31_re+accum10.x);
    o2_31_im += epsilon*(-o2_31_im+accum10.y);
    o2_32_re += epsilon*(-o2_32_re+accum11.x);
    o2_32_im += epsilon*(-o2_32_im+accum11.y);
#else
// apply twisted mass rotation
o1_00_re += (+accum0.x-accum3.x*mu);
o1_00_im += (+accum0.y+accum3.y*mu);
o1_01_re += (+accum0.z-accum3.z*mu);
o1_01_im += (+accum0.w+accum3.w*mu);
o1_02_re += (+accum1.x-accum4.x*mu);
o1_02_im += (+accum1.y+accum4.y*mu);

o1_10_re += (+accum1.z-accum4.z*mu);
o1_10_im += (+accum1.w+accum4.w*mu);
o1_11_re += (+accum2.x-accum5.x*mu);
o1_11_im += (+accum2.y+accum5.y*mu);
o1_12_re += (+accum2.z-accum5.z*mu);
o1_12_im += (+accum2.w+accum5.w*mu);

o1_20_re += (-accum0.x*mu+accum3.x);
o1_20_im += (+accum0.y*mu+accum3.y);
o1_21_re += (-accum0.z*mu+accum3.z);
o1_21_im += (+accum0.w*mu+accum3.w);
o1_22_re += (-accum1.x*mu+accum4.x);
o1_22_im += (+accum1.y*mu+accum4.y);

o1_30_re += (-accum1.z*mu+accum4.z);
o1_30_im += (+accum1.w*mu+accum4.w);
o1_31_re += (-accum2.x*mu+accum5.x);
o1_31_im += (+accum2.y*mu+accum5.y);
o1_32_re += (-accum2.z*mu+accum5.z);
o1_32_im += (+accum2.w*mu+accum5.w);


    o2_00_re += epsilon*(-o2_00_re+accum0.x);
    o2_00_im += epsilon*(-o2_00_im+accum0.y);
    o2_01_re += epsilon*(-o2_01_re+accum0.z);
    o2_01_im += epsilon*(-o2_01_im+accum0.w);
    o2_02_re += epsilon*(-o2_02_re+accum1.x);
    o2_02_im += epsilon*(-o2_02_im+accum1.y);
    o2_10_re += epsilon*(-o2_10_re+accum1.z);
    o2_10_im += epsilon*(-o2_10_im+accum1.w);
    o2_11_re += epsilon*(-o2_11_re+accum2.x);
    o2_11_im += epsilon*(-o2_11_im+accum2.y);
    o2_12_re += epsilon*(-o2_12_re+accum2.z);
    o2_12_im += epsilon*(-o2_12_im+accum2.w);
    o2_20_re += epsilon*(-o2_20_re+accum3.x);
    o2_20_im += epsilon*(-o2_20_im+accum3.y);
    o2_21_re += epsilon*(-o2_21_re+accum3.z);
    o2_21_im += epsilon*(-o2_21_im+accum3.w);
    o2_22_re += epsilon*(-o2_22_re+accum4.x);
    o2_22_im += epsilon*(-o2_22_im+accum4.y);
    o2_30_re += epsilon*(-o2_30_re+accum4.z);
    o2_30_im += epsilon*(-o2_30_im+accum4.w);
    o2_31_re += epsilon*(-o2_31_re+accum5.x);
    o2_31_im += epsilon*(-o2_31_im+accum5.y);
    o2_32_re += epsilon*(-o2_32_re+accum5.z);
    o2_32_im += epsilon*(-o2_32_im+accum5.w);
#endif // SPINOR_DOUBLE

}

{
    READ_ACCUM(ACCUMFLAVORTEX2)
#ifdef SPINOR_DOUBLE
// apply twisted mass rotation
o2_00_re += (+accum0.x-accum6.x*mu);
o2_00_im += (+accum0.y+accum6.y*mu);
o2_01_re += (+accum1.x-accum7.x*mu);
o2_01_im += (+accum1.y+accum7.y*mu);
o2_02_re += (+accum2.x-accum8.x*mu);
o2_02_im += (+accum2.y+accum8.y*mu);

o2_10_re += (+accum3.x-accum9.x*mu);
o2_10_im += (+accum3.y+accum9.y*mu);
o2_11_re += (+accum4.x-accum10.x*mu);
o2_11_im += (+accum4.y+accum10.y*mu);
o2_12_re += (+accum5.x-accum11.x*mu);
o2_12_im += (+accum5.y+accum11.y*mu);

o2_20_re += (-accum0.x*mu+accum6.x);
o2_20_im += (+accum0.y*mu+accum6.y);
o2_21_re += (-accum1.x*mu+accum7.x);
o2_21_im += (+accum1.y*mu+accum7.y);
o2_22_re += (-accum2.x*mu+accum8.x);
o2_22_im += (+accum2.y*mu+accum8.y);

o2_30_re += (-accum3.x*mu+accum9.x);
o2_30_im += (+accum3.y*mu+accum9.y);
o2_31_re += (-accum4.x*mu+accum10.x);
o2_31_im += (+accum4.y*mu+accum10.y);
o2_32_re += (-accum5.x*mu+accum11.x);
o2_32_im += (+accum5.y*mu+accum11.y);


    o1_00_re += epsilon*(-o1_00_re+accum0.x);
    o1_00_im += epsilon*(-o1_00_im+accum0.y);
    o1_01_re += epsilon*(-o1_01_re+accum1.x);
    o1_01_im += epsilon*(-o1_01_im+accum1.y);
    o1_02_re += epsilon*(-o1_02_re+accum2.x);
    o1_02_im += epsilon*(-o1_02_im+accum2.y);
    o1_10_re += epsilon*(-o1_10_re+accum3.x);
    o1_10_im += epsilon*(-o1_10_im+accum3.y);
    o1_11_re += epsilon*(-o1_11_re+accum4.x);
    o1_11_im += epsilon*(-o1_11_im+accum4.y);
    o1_12_re += epsilon*(-o1_12_re+accum5.x);
    o1_12_im += epsilon*(-o1_12_im+accum5.y);
    o1_20_re += epsilon*(-o1_20_re+accum6.x);
    o1_20_im += epsilon*(-o1_20_im+accum6.y);
    o1_21_re += epsilon*(-o1_21_re+accum7.x);
    o1_21_im += epsilon*(-o1_21_im+accum7.y);
    o1_22_re += epsilon*(-o1_22_re+accum8.x);
    o1_22_im += epsilon*(-o1_22_im+accum8.y);
    o1_30_re += epsilon*(-o1_30_re+accum9.x);
    o1_30_im += epsilon*(-o1_30_im+accum9.y);
    o1_31_re += epsilon*(-o1_31_re+accum10.x);
    o1_31_im += epsilon*(-o1_31_im+accum10.y);
    o1_32_re += epsilon*(-o1_32_re+accum11.x);
    o1_32_im += epsilon*(-o1_32_im+accum11.y);
#else
// apply twisted mass rotation
o2_00_re += (+accum0.x-accum3.x*mu);
o2_00_im += (+accum0.y+accum3.y*mu);
o2_01_re += (+accum0.z-accum3.z*mu);
o2_01_im += (+accum0.w+accum3.w*mu);
o2_02_re += (+accum1.x-accum4.x*mu);
o2_02_im += (+accum1.y+accum4.y*mu);

o2_10_re += (+accum1.z-accum4.z*mu);
o2_10_im += (+accum1.w+accum4.w*mu);
o2_11_re += (+accum2.x-accum5.x*mu);
o2_11_im += (+accum2.y+accum5.y*mu);
o2_12_re += (+accum2.z-accum5.z*mu);
o2_12_im += (+accum2.w+accum5.w*mu);

o2_20_re += (-accum0.x*mu+accum3.x);
o2_20_im += (+accum0.y*mu+accum3.y);
o2_21_re += (-accum0.z*mu+accum3.z);
o2_21_im += (+accum0.w*mu+accum3.w);
o2_22_re += (-accum1.x*mu+accum4.x);
o2_22_im += (+accum1.y*mu+accum4.y);

o2_30_re += (-accum1.z*mu+accum4.z);
o2_30_im += (+accum1.w*mu+accum4.w);
o2_31_re += (-accum2.x*mu+accum5.x);
o2_31_im += (+accum2.y*mu+accum5.y);
o2_32_re += (-accum2.z*mu+accum5.z);
o2_32_im += (+accum2.w*mu+accum5.w);


    o1_00_re = epsilon*(-o1_00_re+accum0.x);
    o1_00_im = epsilon*(-o1_00_im+accum0.y);
    o1_01_re = epsilon*(-o1_01_re+accum0.z);
    o1_01_im = epsilon*(-o1_01_im+accum0.w);
    o1_02_re = epsilon*(-o1_02_re+accum1.x);
    o1_02_im = epsilon*(-o1_02_im+accum1.y);
    o1_10_re = epsilon*(-o1_10_re+accum1.z);
    o1_10_im = epsilon*(-o1_10_im+accum1.w);
    o1_11_re = epsilon*(-o1_11_re+accum2.x);
    o1_11_im = epsilon*(-o1_11_im+accum2.y);
    o1_12_re = epsilon*(-o1_12_re+accum2.z);
    o1_12_im = epsilon*(-o1_12_im+accum2.w);
    o1_20_re = epsilon*(-o1_20_re+accum3.x);
    o1_20_im = epsilon*(-o1_20_im+accum3.y);
    o1_21_re = epsilon*(-o1_21_re+accum3.z);
    o1_21_im = epsilon*(-o1_21_im+accum3.w);
    o1_22_re = epsilon*(-o1_22_re+accum4.x);
    o1_22_im = epsilon*(-o1_22_im+accum4.y);
    o1_30_re = epsilon*(-o1_30_re+accum4.z);
    o1_30_im = epsilon*(-o1_30_im+accum4.w);
    o1_31_re = epsilon*(-o1_31_re+accum5.x);
    o1_31_im = epsilon*(-o1_31_im+accum5.y);
    o1_32_re = epsilon*(-o1_32_re+accum5.z);
    o1_32_im = epsilon*(-o1_32_im+accum5.w);
#endif // SPINOR_DOUBLE

}
#else // DSLASH

    o1_00_re *= -delta;
    o1_00_im *= -delta;
    o1_01_re *= -delta;
    o1_01_im *= -delta;
    o1_02_re *= -delta;
    o1_02_im *= -delta;

    o1_10_re *= -delta;
    o1_10_im *= -delta;
    o1_11_re *= -delta;
    o1_11_im *= -delta;
    o1_12_re *= -delta;
    o1_12_im *= -delta;

    o1_20_re *= -delta;
    o1_20_im *= -delta;
    o1_21_re *= -delta;
    o1_21_im *= -delta;
    o1_22_re *= -delta;
    o1_22_im *= -delta;

    o1_30_re *= -delta;
    o1_30_im *= -delta;
    o1_31_re *= -delta;
    o1_31_im *= -delta;
    o1_32_re *= -delta;
    o1_32_im *= -delta;



    o2_00_re *= -delta;
    o2_00_im *= -delta;
    o2_01_re *= -delta;
    o2_01_im *= -delta;
    o2_02_re *= -delta;
    o2_02_im *= -delta;

    o2_10_re *= -delta;
    o2_10_im *= -delta;
    o2_11_re *= -delta;
    o2_11_im *= -delta;
    o2_12_re *= -delta;
    o2_12_im *= -delta;

    o2_20_re *= -delta;
    o2_20_im *= -delta;
    o2_21_re *= -delta;
    o2_21_im *= -delta;
    o2_22_re *= -delta;
    o2_22_im *= -delta;

    o2_30_re *= -delta;
    o2_30_im *= -delta;
    o2_31_re *= -delta;
    o2_31_im *= -delta;
    o2_32_re *= -delta;
    o2_32_im *= -delta;

#endif // DSLASH_XPAY


    // write spinor field back to device memory
    WRITE_FLAVOR_SPINOR();
// undefine to prevent warning when precision is changed
#undef spinorFloat
#undef SHARED_STRIDE

#undef A_re
#undef A_im

#undef g00_re
#undef g00_im
#undef g01_re
#undef g01_im
#undef g02_re
#undef g02_im
#undef g10_re
#undef g10_im
#undef g11_re
#undef g11_im
#undef g12_re
#undef g12_im
#undef g20_re
#undef g20_im
#undef g21_re
#undef g21_im
#undef g22_re
#undef g22_im

#undef i00_re
#undef i00_im
#undef i01_re
#undef i01_im
#undef i02_re
#undef i02_im
#undef i10_re
#undef i10_im
#undef i11_re
#undef i11_im
#undef i12_re
#undef i12_im
#undef i20_re
#undef i20_im
#undef i21_re
#undef i21_im
#undef i22_re
#undef i22_im
#undef i30_re
#undef i30_im
#undef i31_re
#undef i31_im
#undef i32_re
#undef i32_im

#undef o1_00_re
#undef o1_00_im
#undef o1_01_re
#undef o1_01_im
#undef o1_02_re
#undef o1_02_im
#undef o1_10_re
#undef o1_10_im
#undef o1_11_re
#undef o1_11_im
#undef o1_12_re
#undef o1_12_im
#undef o1_20_re
#undef o1_20_im
#undef o1_21_re
#undef o1_21_im

#undef o2_00_re
#undef o2_00_im
#undef o2_01_re
#undef o2_01_im
#undef o2_02_re
#undef o2_02_im
#undef o2_10_re
#undef o2_10_im
#undef o2_11_re
#undef o2_11_im
#undef o2_12_re
#undef o2_12_im
#undef o2_20_re
#undef o2_20_im
#undef o2_21_re
#undef o2_21_im

